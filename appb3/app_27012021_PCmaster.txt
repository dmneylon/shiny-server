## app.R ##



##############################################################################################################################################################
##############################################################################################################################################################
## Libraries ##

library(shiny)
library(shinydashboard)
library(DT)
library(tabulizer)
library(jpeg)
library(stringi)
library(stringr)
library(dplyr)
library(data.table)
library(readxl)
library(tinytex)


##############################################################################################################################################################
##############################################################################################################################################################
## Data Sources Beacon 3 ##

DS6456 <- as.data.frame(read.csv("DS6456.csv"))
VC <- as.data.frame(read.csv("VersionControl.csv"))
bomlist <- as.data.frame(read.csv("BomList.csv"))
bomlist_SF <- as.data.frame(read.csv("BomList_SF.csv"))
SF <- as.data.frame(read.csv("SF.csv"))

RadioHW <- as.data.frame(read.csv("RadioHW.csv", check.names = FALSE), stringsAsFactors = FALSE)
DUBBHW <- as.data.frame(read.csv("DUBBHW.csv", check.names = FALSE), stringsAsFactors = FALSE)
CabHW <- as.data.frame(read.csv("CabHW.csv", check.names = FALSE), stringsAsFactors = FALSE)

PCoverview <- as.data.frame(read.csv("PCoverview.csv"), stringsAsFactors = FALSE)
RadioPCoverview <- as.data.frame(read.csv("RadioPCoverview.csv"), stringsAsFactors = FALSE)
BBPCoverview <- as.data.frame(read.csv("BBPCoverview.csv"), stringsAsFactors = FALSE)
CabPCoverview <- as.data.frame(read.csv("CabPCoverview.csv"), stringsAsFactors = FALSE)
TotalPCoverview <- as.data.frame(read.csv("TotalPCoverview.csv"), stringsAsFactors = FALSE)

QCselect <- as.data.frame(read.csv("Qcode_Selector.csv"))
Configtrans <- as.data.frame(read.csv("QcodeTranslator.csv"))

HLDNB <- "www/UKRE_19_143EricssonB3NewBuildSCD.pdf"
print(getwd())
split_pdf(HLDNB, "www")
HLDB1B3 <- "www/UKRE_19_141EricssonB1toB3SiteUpgradesSCD.pdf"
print(getwd())
split_pdf(HLDB1B3, "www")
HLDB2B3 <- "www/UKRE_19_142EricssonB2toB3SiteUpgradesSCD.pdf"
print(getwd())
split_pdf(HLDB2B3, "www")

Cab1NB <- "www/NewbuildCab1.pdf"
split_pdf(Cab1NB, "www")
Cab1B1B3 <- "www/B1-B3Cab1.pdf"
split_pdf(Cab1B1B3, "www")
Cab2B1B3 <- "www/B1-B3Cab2.pdf"
split_pdf(Cab2B1B3, "www")
Cab1B2B3 <- "www/B2-B3Cab1.pdf"
split_pdf(Cab1B2B3, "www")
Cab2B2B3 <- "www/B2-B3Cab2.pdf"
split_pdf(Cab2B2B3, "www")

CDNB <- "www/HLDconnectiondiagramsB3newbuild.pdf"
split_pdf(CDNB, "www")
CDB1B3 <- "www/HLDconnectiondiagramsB1-B3.pdf"
split_pdf(CDB1B3, "www")
CDB2B3 <- "www/HLDconnectiondiagramsB2-B3.pdf"
split_pdf(CDB2B3, "www")

CPRINB <- "www/CPRIRef_newbuild.pdf"
split_pdf(CPRINB, "www")
CPRIB1B3 <- "www/CPRIRef_B1B3.pdf"
split_pdf(CPRIB1B3, "www")
CPRIB2B3 <- "www/CPRIRef_B2B3.pdf"
split_pdf(CPRIB2B3, "www")

BLANK <- "www/blank.pdf"
ProdInv <- as.data.frame(read.csv("ProductInventory.csv"), stringsAsFactors = FALSE)
DTree <- as.data.frame(read.csv("DecisionTree.csv", check.names = FALSE), stringsAsFactors = FALSE)
CE <- as.data.frame(read.csv("CabinetEnvironment.csv", check.names = FALSE), stringsAsFactors = FALSE)
CE2 <- as.data.frame(read.csv("CERMD.csv", check.names = FALSE), stringsAsFactors = FALSE)
portalloc <- read_xlsx("Typical connections_recomendations_Rev B.xlsx", sheet = "GU900")




##############################################################################################################################################################
##############################################################################################################################################################
## Dashboard Header ##

dbHeader <- dashboardHeader(title = paste("RAN Site Configurator", VC[1,1]), titleWidth = 300,
                            tags$li(tags$b(paste("shiny version:", as.character(packageVersion("shiny")), "  |")),
                                    class = "dropdown"),
                            tags$li(tags$b(paste("  RSC version:",VC[1,1])),
                                    class = "dropdown"),
                            tags$li(a(href = 'https://www.shinyapps.io/admin/#/dashboard',
                                      icon("info-circle"),
                                      title = "Dashboard"),
                                    class = "dropdown"),
                            tags$li(a(href = 'https://internal.ericsson.com/',
                                      img(src = 'EricssonLogo.png',
                                          title = "Company Home", height = "30px"),
                                      style = "padding-top:10px; padding-bottom:10px;"),
                                    class = "dropdown"),
                            dropdownMenu(type = "messages",
                                         messageItem(
                                           from = "Ericsson Engineering",
                                           message = paste("Application updated to", VC[1,1], "comments:", VC[1,6]),
                                           time = VC[1,4]
                                         ),
                                         messageItem(
                                           from = "Delivery Team",
                                           message = "How do I register?",
                                           icon = icon("question"),
                                           time = "13:45"
                                         ),
                                         messageItem(
                                           from = "Support",
                                           message = "The new server is ready.",
                                           icon = icon("life-ring"),
                                           time = "2014-12-01"
                                         )
                            ),
                            dropdownMenu(type = "notifications",
                                         notificationItem(
                                           text = "5 new users today",
                                           icon("users")
                                         ),
                                         notificationItem(
                                           text = "12 items delivered",
                                           icon("truck"),
                                           status = "success"
                                         ),
                                         notificationItem(
                                           text = "Server load at 86%",
                                           icon = icon("exclamation-triangle"),
                                           status = "warning"
                                         )
                            ),
                            dropdownMenu(type = "tasks", badgeStatus = "success",
                                         taskItem(value = 90, color = "green",
                                                  "Documentation"
                                         ),
                                         taskItem(value = 17, color = "aqua",
                                                  "Project X"
                                         ),
                                         taskItem(value = 75, color = "yellow",
                                                  "Server deployment"
                                         ),
                                         taskItem(value = 80, color = "red",
                                                  "Overall project"
                                         )
                                         
                            ))



##############################################################################################################################################################
##############################################################################################################################################################
## ui ##

ui <- dashboardPage(
  dbHeader,
  
  dashboardSidebar(width = 300,
    sidebarMenu(
      menuItem("Site Overview", tabName = "siteoverview", icon = icon("edit")),
      menuItem("Proposed Build", tabName = "proposedbuild", icon = icon("edit")),
      menuItem("Q-code translator", tabName = "qcodetrans", icon = icon("edit")),
      menuItem("Configuration Decision Tree", tabName = "configdt", icon = icon("tree")),
      menuItem("Reports", tabName = "reports", icon = icon("file-download")),
      menuItem("Q-Codes & Ordering Codes", tabName = "hwin", icon = icon("info")),
      menuItem("HW Config Output", tabName = "hwout", icon = icon("info")),
      menuItem("Power Consumption", tabName = "PC", icon = icon("info")),
      menuItem("Bill of Materials BOM", tabName = "bom", icon = icon("boxes")),
      # min:1 max:1 HLD slide #
      menuItem("HLD", tabName = "hld", icon = icon("file-pdf")),
      # min:1 max:3 Cab Layout slide #
      menuItem("Cabinet 1 Layout", tabName = "c1l", icon = icon("file-pdf")),
      menuItem("Cabinet 2 Layout", tabName = "c2l", icon = icon("file-pdf")),
      menuItem("Cabinet 3 Layout", tabName = "c3l", icon = icon("file-pdf")),
      # min:1 max:5 Connectivity Diagram slide #
      menuItem("Connectivity Diagram Baseline", tabName = "conndiag1", icon = icon("file-pdf")),
      menuItem("Connectivity Diagram GU900", tabName = "conndiag2", icon = icon("file-pdf")),
      menuItem("Connectivity Diagram NR34", tabName = "conndiag3", icon = icon("file-pdf")),
      menuItem("Connectivity Diagram NR21/NR7", tabName = "conndiag4", icon = icon("file-pdf")),
      menuItem("Connectivity Diagram TX MoRAN", tabName = "conndiag5", icon = icon("file-pdf")),
      # min:1 max:4 CPRI Connectivity slide #
      menuItem("CPRI Connectivity Baseline", tabName = "CPRI1", icon = icon("file-pdf")),
      menuItem("CPRI Connectivity GU900", tabName = "CPRI2", icon = icon("file-pdf")),
      menuItem("CPRI Connectivity NR34", tabName = "CPRI3", icon = icon("file-pdf")),
      menuItem("CPRI Connectivity NR21/NR7", tabName = "CPRI4", icon = icon("file-pdf")),
      menuItem("Cabinet Environment", tabName = "CE", icon = icon("info")),
      menuItem("SIU_PDU_EcBUS allocations", icon = icon("link"),
               href="Typical connections_recomendations_Rev B.xlsx"),
      menuItem("Product Inventory", tabName = "prodinv", icon = icon("file-pdf")),
      menuItem("Power Consumtpion master", tabName = "pcmaster", icon = icon("file-pdf")),
      menuItem("Q-Code Matches", tabName = "qcodehits", icon = icon("file-pdf")),
      menuItem("Data Sources", tabName = "datasrc", icon = icon("database")),
      menuItem("Version Control", tabName = "vctrl", icon = icon("archive")),
      menuItem("PowerCalc", icon = icon("link"), 
               href = "http://powercalc2.rnd.ericsson.se/"),
      menuItem("SiteHandler", icon = icon("link"), 
               href = "https://sitehandler-emea1.ericsson.net/sh-emea1/login")
      )
    ),

  dashboardBody(
    # tags$head(tags$style(
    #   HTML('.wrapper {height: auto !important; position:relative; overflow-x:hidden; overflow-y:hidden}')   #shinydashboard increase size of dashboard page
    # )),
    tabItems(
      # 1st tab content
      tabItem(tabName = "siteoverview",
              fluidRow(style = "max-height: 100h; overflow-y: auto;",
                sidebarLayout(
                  sidebarPanel(
                    wellPanel(h4(tags$strong("Site Overview:")), tags$hr(),
                    textInput("SiteID", "Site ID"),
                    textInput("SiteName", "Site Name"),
                    textInput("SiteAddr", "Site Address"),
                    textInput("PostCode", "Post Code"),
                    box(uiOutput("GoogleMaps"), background = "lime", width = 100),
                    textInput("ASP", "ASP"),
                    #textInput("SiteAddr", "Site Address"),
                    textAreaInput("Access", "Access Details", width = "100%", height = "55px"),
                    fileInput("myFile", "Select site photo to upload, .jpg or .png File",
                              multiple = FALSE,
                              accept = c('image/png', 'image/jpeg'))
                    )),
                    
                    
                    mainPanel(
                      wellPanel(h4(tags$strong("Site Overview Photo")),
                      br(),
                      box(imageOutput("piccy", width = "100px", height = "100px"), width = "50px", height = "750px")), width = 6
                    )
                  )
              )),
      
      # 2nd tab content
      tabItem(tabName = "proposedbuild",
              mainPanel(
                wellPanel(h4(tags$strong("Proposed Build:")), tags$hr(),
                          selectInput("Config", 
                                      label = "Choose a configuration:",
                                      choices = DS6456$TelefonicaConfiguration,
                                      selected = ""),
                          h5(tags$strong("Comments and Instructions Relating to B3 Upgrade:")),
                          box(verbatimTextOutput("Comments"),background = "red", width = 100),
                          h5(tags$strong("Comments and Instructions Relating to Tech Adds:")),
                          box(verbatimTextOutput("TechAdd"),background = "red", width = 100),
                          box(textOutput("Capacity"),background = "aqua", width = 100),
                          box(textOutput("SF"),background = "purple", width = 100),
                          selectInput("SFtype", "Street Furniture Pole type:", choices = c("Apollo", "Elara", "Orion", "-"), selected = "-"),
                          h5(tags$strong("Beacon 3 SCD:")),
                          box(textOutput("SCD"),background = "orange", width = 100),
                          selectInput("BuildType", "Build Type:", choices = c("New Build", "B1 - B3 Upgrade", "B2 - B3 Upgrade", "Tech Add only", "Preparatory", "Transition", "Calculator", ""), selected = ""),
                          
                          # h5(tags$strong("Baseline 4G Q-code:")),
                          # box(
                          #   textOutput("Base_4G_Qcode"),background="lime",width = 50),
                          # 
                          # h5(tags$strong("LTE Upgrade options already existing for chosen configuration:")),
                          # fluidRow(
                          # column(2,
                          # h5("UG Option 1a."),
                          #   box(textOutput("UG1a_exist"),width = 20)),
                          # column(2,
                          # h5("UG Option 2a."),
                          #   box(textOutput("UG2a_exist"),width = 20)),
                          # column(2,
                          # h5("UG Option 2b."),
                          #   box(textOutput("UG2b_exist"),width = 20)),
                          # column(2,
                          # h5("UG Option 3."),
                          #   box(textOutput("UG3_exist"),width = 20)),
                          # column(2,
                          # h5("UG Option 4."),
                          #   box(textOutput("UG4_exist"),width = 20))
                          # ),
                          
                          # column(3,
                          # h5("UG Option 5."),
                          #   box(textOutput("UG5_exist"),width = 25)),
                          # column(3,
                          # h5("UG Option 6."),
                          #   box(textOutput("UG6_exist"),width = 25)),
                          # column(3,
                          # h5("UG Option 7."),
                          #   box(textOutput("UG7_exist"),width = 25)),
                          # column(3,
                          # h5("UG Option 8."),
                          #   box(textOutput("UG8_exist"),width = 25)),
                          # column(3,
                          # h5("UG Option 9."),
                          #   box(textOutput("UG9_exist"),width = 25)),
                          # column(3,
                          # h5("UG Option 10."),
                          #   box(textOutput("UG10_exist"),width = 25)),
                          # column(3,
                          # h5("UG Option 11."),
                          #   box(textOutput("UG11_exist"),width = 25)),
                          # column(3,
                          # h5("UG Option 12."),
                          #   box(textOutput("UG12_exist"),width = 25))

                          
                       

                          h5(tags$strong("Select 4G Upgrade options:")),
                          fluidRow(
                            box(
                              uiOutput("L8_swapSelection")
                              #selectInput("L8_swap", "1a. L800 RRUS 11 to Radio 2217 Swap Ordering Code", choices = c("Yes", "No", "Yes existing", "-"), selected = "-")
                              , width = 12, solidHeader = TRUE),
							              box(
							                uiOutput("L18_4x4Selection")
                              #selectInput("L18_4x4", "2a. L1800 UG Ordering Code", choices = c("Yes", "No", "Yes existing", "-"), selected = "-")
                              , width = 12, solidHeader = TRUE),
							              box(
							                uiOutput("L21_4415Selection")
                              #selectInput("L21_4415", "2b. 4415 L2100 UG Ordering Code", choices = c("Yes", "No", "Yes existing", "-"), selected = "-")
                              , width = 12, solidHeader = TRUE)
							              ),

                          fluidRow(
                            box(
                              uiOutput("T23Selection")
                              #selectInput("T23", "3. 4x4 T23 UG Ordering Code (Macro / Orion)", choices = c("Yes", "No", "Yes existing", "-"), selected = "-")
                              , width = 12, solidHeader = TRUE),
                            box(
                              uiOutput("L26Selection")
                              #selectInput("L26", "4. L26 UG Ordering Code", choices = c("Yes", "No", "Yes existing", "-"), selected = "-")
                              , width = 12, solidHeader = TRUE)
                          ),
						  
						  h5(tags$strong("Select 5G Upgrade options:")),
                          fluidRow(
                            box(
                              uiOutput("TEF_5G_T34_8x8Selection")
                              #selectInput("TEF_5G_T34_8x8", "5. TEF Only 5G T34 8x8 UG Ordering Code", choices = c("Yes", "No", "Yes existing", "-"), selected = "-")
                              , width = 12, solidHeader = TRUE),
                            box(
                              uiOutput("TEF_5G_T34_64MSelection")
                              #selectInput("TEF_5G_T34_64M", "6. TEF Only 5G T34 M-MiMo UG Ordering Code", choices = c("Yes", "No", "Yes existing", "-"), selected = "-")
                              , width = 12, solidHeader = TRUE),
                            box(
                              uiOutput("MORAN_5G_T34_8x8Selection")
                              #selectInput("MORAN_5G_T34_8x8", "7. VF 5G T34 8x8 MoRAN UG Ordering Code", choices = c("Yes", "No", "Yes existing", "-"), selected = "-")
                              , width = 12, solidHeader = TRUE)
                          ),
                          fluidRow(
                            box(
                              uiOutput("MORAN_5G_T34_64MSelection")
                              #selectInput("MORAN_5G_T34_64M", "8. VF 5G T34 M-MiMo MoRAN UG Ordering Code", choices = c("Yes", "No", "Yes existing", "-"), selected = "-")
                              , width = 12, solidHeader = TRUE),
                            box(
                              uiOutput("ESS_5G_N21_4x4Selection")
                              #selectInput("ESS_5G_N21_4x4", "9. ESS 5G N21 4x4 UG Ordering Code", choices = c("Yes", "No", "Yes existing", "-"), selected = "-")
                              , width = 12, solidHeader = TRUE),
                            box(
                              uiOutput("T23BB_ESS_5G_N21_4x4Selection")
                              #selectInput("T23BB_ESS_5G_N21_4x4", "10. T23 BB + ESS 5G N21 4x4 UG Ordering Code", choices = c("Yes", "No", "Yes existing", "-"), selected = "-")
                              , width = 12, background = "orange")
                          ),
						  fluidRow(
                            box(
                              uiOutput("N7_2x2_MMBBSelection")
                              #selectInput("N7_2x2_MMBB", "11. 5G N7 2x2 + 4G/5G MM BB UG Ordering Code", choices = c("Yes", "No", "Yes existing", "-"), selected = "-")
                              , width = 12, solidHeader = TRUE),
                            box(
                              uiOutput("N7_2x2_MMBB_T23BBSelection")
                              #selectInput("N7_2x2_MMBB_T23BB", "12. 5G N7 2x2 + T23 BB + 4G/5G MM BB UG Ordering Code", choices = c("Yes", "No", "Yes existing", "-"), selected = "-")
                              , width = 12, background = "orange")
                          ),
						  actionButton("GO", "Generate Q-Code lookup pattern", icon("paper-plane"), 
						               style="color: #fff; background-color: #337ab7; border-color: #2e6da4"),
						  #selectInput("QCgen", "Generate Q-Code lookup pattern:", choices = c("Yes", "No", ""), selected = ""),
						  h5(tags$strong("Lookup pattern for 4G & 5G Q-codes:")),
						  box(
						    textOutput("LteNR_Qcode_pattern"),background="lime",width = 50),style = "overflow-y:scroll; max-height: 1250px"
                          ))),
						  
      
      
      # Q-code Translator tab content
      tabItem(tabName = "qcodetrans",
              mainPanel(wellPanel(
                        textInput("man2GQ", "2G Q-code"),
                        textInput("man3GQ", "3G Q-code"),
                        textInput("man4GQ", "4G Q-code"),
                        textInput("man5GQ", "5G Q-code"),
                        box(textOutput("qcodeconctrans"),background="lime",width = 50),
                        br(),
                        actionButton("GO2", "Generate matching Configurations", icon("paper-plane"),
                                     style="color: #fff; background-color: #337ab7; border-color: #2e6da4"),
                        br()),
                        wellPanel(
                        DT::dataTableOutput("confighits", width = "100%", height = "auto"))
                        )),
      
      
      
      
      # 3rd tab content
      tabItem(tabName = "configdt",
              mainPanel(
                h5(tags$strong("Answer all Decision Tree steps:")),
                fluidRow(
                  box(
                    selectInput("SCD", "SCD", choices = c(as.vector(DTree[[3]]), "-"), selected = "-"), width = 4, solidHeader = TRUE),
                  box(
                    selectInput("CapacityModel", "Capacity Model", choices = c(as.vector(DTree[[4]]), "-"), selected = "-"), width = 4, solidHeader = TRUE),
                  box(
                    selectInput("Watts", "12W/20W", choices = c(as.vector(DTree[[5]]), "-"), selected = "-"), width = 4, solidHeader = TRUE)
                ),
                fluidRow(
                  box(
                    selectInput("Sectors", "Sectors", choices = c(as.vector(DTree[[6]]), "-"), selected = "-"), width = 4, solidHeader = TRUE),
                  box(
                    selectInput("InOutSite", "Indoor/Outdoor", choices = c(as.vector(DTree[[7]]), "-"), selected = "-"), width = 4, solidHeader = TRUE),
                  box(
                    selectInput("BaseCab", "2G/3G/4G Cabinet Type", choices = c(as.vector(DTree[[8]]), "-"), selected = "-"), width = 4, solidHeader = TRUE)
                ),
                fluidRow(
                  box(
                    selectInput("DoubCab", "Double Cabinet site", choices = c(as.vector(DTree[[9]]), "-"), selected = "-"), width = 4, solidHeader = TRUE),
                  box(
                    selectInput("LancYorkCabUG", "Lancaster/York cabinet upgrade", choices = c(as.vector(DTree[[10]]), "-"), selected = "-"), width = 4, solidHeader = TRUE),
                  box(
                    selectInput("BBloc", "BB units in York/Lancaster cab", choices = c(as.vector(DTree[[11]]), "-"), selected = "-"), width = 4, solidHeader = TRUE)
                ),
                fluidRow(
                  box(
                    selectInput("G9post", "G900 radio post build", choices = c(as.vector(DTree[[12]]), "-"), selected = "-"), width = 4, solidHeader = TRUE),
                  box(
                    selectInput("L8build", "L800 radio build scenario", choices = c(as.vector(DTree[[13]]), "-"), selected = "-"), width = 4, solidHeader = TRUE),
                  box(
                    selectInput("L18post", "L1800 radio post build", choices = c(as.vector(DTree[[14]]), "-"), selected = "-"), width = 4, solidHeader = TRUE)
                ),
                fluidRow(
                  box(
                    selectInput("LU21exist", "2100 existing radio build", choices = c(as.vector(DTree[[15]]), "-"), selected = "-"), width = 4, solidHeader = TRUE),
                  box(
                    selectInput("LteDUBB", "LTE DUS to Baseband upgrade", choices = c(as.vector(DTree[[16]]), "-"), selected = "-"), width = 4, solidHeader = TRUE),
                  box(
                    selectInput("Q15", "-", choices = c(as.vector(DTree[[1]]), "-"), selected = "-"), width = 4, solidHeader = TRUE)
                ),
                fluidRow(
                  h5(tags$strong("Proposed Configuration:")),
                  box(textOutput("propconfig"),background = "light-blue", width = 100),
                  
                  h5(tags$strong("Decision Tree Configuration:")),
                  box(textOutput("dtconfig"),background = "light-blue", width = 100)
                ),
                fluidRow(
                  box(textOutput("Match"),background = "green", width = 100),
                  box(textOutput("NoMatch"),background = "red", width = 100)
                )
              )
      ),
      
      
      # 4th tab content
      tabItem(tabName = "reports",
              mainPanel(
                wellPanel(
                  h4(tags$strong("Download SID:")),
                  downloadButton("report", "Generate SID")),
                br(),
                wellPanel(
                  h4(tags$strong("Upload to Site Handler:")),
                  actionButton("Upload SID to Site Handler",a("Upload SID to Site Handler",target="_blank",href="https://sitehandler-emea1.ericsson.net/sh-emea1/login")))
                , width = 10)
              ),
      
      # 5th tab content
      tabItem(
        
        tabName = "hwin",
              mainPanel(
                wellPanel(
                  h3("Quantum Codes"),tags$hr(),
                  fluidRow(
                  column(3,
                  h4("2G Q-code"),
                  box(
                  textOutput("GSM_Qcode"),background="green",width = 25)),
                  column(3,
                  h4("3G Q-code"),
                  box(
                  textOutput("UMTS_Qcode"),background="blue",width = 25)),
                  column(3,
                  h4("4G Q-code"),
                  box(
                  textOutput("LTE_Qcode"),background="yellow",width = 25)),
                  column(3,
                  h4("5G Q-code"),
                  box(
                  textOutput("NR_Qcode"),background="purple",width = 25)),
                  column(12,
                  h4("Q-code concatenation"),
                  box(
                  textOutput("Qcode_concat"),background="aqua",width = 100))
                  )),
                wellPanel(
                  h3("Ordering Codes"),tags$hr(),
                  fluidRow(
                  column(12,
                  h4("1. Baseline B3 Ordering Code"),
                  box(
                  textOutput("B3_UG_OC"),width = 25)),
                  column(12,
                  h4("1a. L800 RRUS 11 to Radio 2217 Swap Ordering Code"),
                  box(
                  textOutput("L8_swap_OC"),width = 25)),
                  column(12,
                  h4("2a. L1800 UG Ordering Code"),
                  box(
                  textOutput("L18_4x4_OC"),width = 25)),
                  column(12,
                  h4("2b. 4415 L2100 UG Ordering Code"),
                  box(
                  textOutput("L21_4415_OC"),width = 25)),
                  column(12,
                  h4("3. 4x4 T23 UG Ordering Code (Macro / Orion)"),
                  box(
                  textOutput("T23_OC"),width = 25)),
                  column(12,
                  h4("4. L26 UG Ordering Code"),
                  box(
                  textOutput("L26_OC"),width = 25)),
                  column(12,
                  h4("5. TEF Only 5G T34 8x8 UG Ordering Code"),
                  box(
                  textOutput("TEF_5G_T34_8x8_OC"),width = 25)),
                  column(12,
                  h4("6. TEF Only 5G T34 M-MiMo UG Ordering Code"),
                  box(
                  textOutput("TEF_5G_T34_64M_OC"),width = 25)),
				  column(12,
                  h4("7. VF 5G T34 8x8 MoRAN UG Ordering Code"),
                  box(
                  textOutput("MORAN_5G_T34_8x8_OC"),width = 25)),
                  column(12,
                  h4("8. VF 5G T34 M-MiMo MoRAN UG Ordering Code"),
                  box(
                  textOutput("MORAN_5G_T34_64M_OC"),width = 25)),
                  column(12,
                  h4("9. ESS 5G N21 4x4 UG Ordering Code"),
                  box(
                  textOutput("ESS_5G_N21_4x4_OC"),width = 25)),
                  column(12,
                  h4("10. T23 BB + ESS 5G N21 4x4 UG Ordering Code"),
                  box(
                  textOutput("T23BB_ESS_5G_N21_4x4_OC"),width = 25)),
                  column(12,
                  h4("11. 5G N7 2x2 + 4G/5G MM BB UG Ordering Code"),
                  box(
                  textOutput("N7_2x2_MMBB_OC"),width = 25)),
                  column(12,
                  h4("12. 5G N7 2x2 + T23 BB + 4G/5G MM BB UG Ordering Code"),
                  box(
                  textOutput("N7_2x2_MMBB_T23BB_OC"),width = 25))
                ), style = "overflow-y:scroll; max-height: 900px")
      )),
      
      # 6th tab content
      tabItem(tabName = "hwout",
              mainPanel(
                wellPanel(
                  DT::dataTableOutput("CabHW", width = "100%", height = "auto")),
                wellPanel(
                  DT::dataTableOutput("DUBBHW", width = "100%", height = "auto")),
                wellPanel(
                  DT::dataTableOutput("RadioHW", width = "100%", height = "auto"))
                )
      ),

      # 7th tab content
      tabItem(tabName = "PC",
              mainPanel(
                wellPanel(
                  DT::dataTableOutput("SupportSysPC", width = "100%", height = "auto")),
                wellPanel(
                  DT::dataTableOutput("DUBBPC", width = "100%", height = "auto")),
                wellPanel(
                  DT::dataTableOutput("RadioPC", width = "100%", height = "auto")),
                wellPanel(
                 DT::dataTableOutput("TotalPC", width = "100%", height = "auto")),
                wellPanel(
                  DT::dataTableOutput("Cab1PC", width = "100%", height = "auto")),
                wellPanel(
                  DT::dataTableOutput("Cab2PC", width = "100%", height = "auto"))
                , style = "overflow-y:scroll; max-height: 1200px")
      ),

      # 8th tab content
      tabItem(tabName = "bom",
              mainPanel(
                DT::dataTableOutput("bom", width = "100%", height = "auto")
              )
      ),

      # 9th tab content
      tabItem(tabName = "hld",
              mainPanel(
                br(),
                uiOutput("HLDpage")
              )
      ),

      # 10th tab content
      tabItem(tabName = "c1l",
              mainPanel(
                br(),
                uiOutput("CAB1page")
              )
      ),

      # 11th tab content
      tabItem(tabName = "c2l",
              mainPanel(
                br(),
                uiOutput("CAB2page")
              )
      ),

      # 12th tab content
      tabItem(tabName = "c3l",
              mainPanel(
                br(),
                uiOutput("CAB3page")
              )
      ),

      # 13th tab content
      tabItem(tabName = "conndiag1",
              mainPanel(
                br(),
                uiOutput("CDBase")
              )
      ),

      # 14th tab content
      tabItem(tabName = "conndiag2",
              mainPanel(
                br(),
                uiOutput("CDGU9")
              )
      ),
      
      # 15th tab content
      tabItem(tabName = "conndiag3",
              mainPanel(
                br(),
                uiOutput("CDN34")
              )
      ),
      
      # 16th tab content
      tabItem(tabName = "conndiag4",
              mainPanel(
                br(),
                uiOutput("CDN21N7")
              )
      ),
      
      # 17th tab content
      tabItem(tabName = "conndiag5",
              mainPanel(
                br(),
                uiOutput("CDTX")
              )
      ),

      # 18th tab content
      tabItem(tabName = "CPRI1",
              mainPanel(
                br(),
                uiOutput("CPRIBase")
              )
      ),

      # 19th tab content
      tabItem(tabName = "CPRI2",
              mainPanel(
                br(),
                uiOutput("CPRIGU9")
              )
      ),
      
      # 20th tab content
      tabItem(tabName = "CPRI3",
              mainPanel(
                br(),
                uiOutput("CPRIN34")
              )
      ),
      
      # 21st tab content
      tabItem(tabName = "CPRI4",
              mainPanel(
                br(),
                uiOutput("CPRIN21N7")
              )
      ),

      # 22nd tab content
      tabItem(tabName = "CE",
              mainPanel(
                DT::dataTableOutput("CE", width = "100%", height = "auto")
              )
      ),

      # # 20th tab content
      # tabItem(tabName = "portalloc",
      #          mainPanel(
      #           #fileInput("uploadFile", "XLSX file", accept = ".xlsx"),
      #           #tableOutput("portalloc")
      #           a("click on me",target="_blank",href="Typical connections_recomendations_Rev B.xlsx")
      #         )
      # ),

      # 23rd tab content
      tabItem(tabName = "prodinv",
              mainPanel(
                DT::dataTableOutput("prodinv", width = "100%", height = "auto")
              )
      ),
      
      # XXrd tab content
      tabItem(tabName = "pcmaster",
              mainPanel(
                DT::dataTableOutput("pcmaster", width = "100%", height = "auto")
              )
      ),
      
      # 24th tab content
      tabItem(tabName = "qcodehits",
              mainPanel(
                DT::dataTableOutput("qcodehits", width = "100%", height = "auto")
              )
      ),

      # 25th tab content
      tabItem(tabName = "datasrc",
              h5(tags$strong("Beacon 2 Upgrade HLD/SCD:")),
              a("Ericsson Beacon 2 Site High Level Design v3.2",target="_blank",href="Ericsson Beacon 2 Site High Level Design v3.2.pdf"),
              br(),
              h5(tags$strong("5G Upgrade HLD/SCD:")),
              a("HLD for upgrade of Telefonica Beacon 2 site to 5G_Rev 11",target="_blank",href="HLD for upgrade of Telefonica Beacon 2 site to 5G_Rev 11.pptx"),
              br(),
              h5(tags$strong("New Build HLD/SCD:")),
              a("UKRE_19_097 Ericsson Beacon 2 New Build SCD Issue 1.0",target="_blank",href="UKRE_19_097 Ericsson Beacon 2 New Build SCD Issue 1.0.pdf"),
              br(),
              h5(tags$strong("DS6456 LLD:")),
              a("DS6456 Ericsson Beacon 2 Upgrades",target="_blank",href="DS6456 Ericsson Beacon 2 Upgrades.docx"),
              br(),
              h5(tags$strong("REB099 LLD:")),
              a("REB099 Ericsson Beacon Detailed Configurations",target="_blank",href="REB099 Ericsson Beacon Detailed Configurations.docx"),
              br(),
              h5(tags$strong("2G Quantum Code Structure:")),
              a("2G Ericsson Quantum Code Structure 4.6",target="_blank",href="2G Ericsson Quantum Code Structure 4.6.pptx"),
              br(),
              h5(tags$strong("3G Quantum Code Structure:")),
              a("3G Ericsson Quantum Code Structure_5.4",target="_blank",href="3G Ericsson Quantum Code Structure_5.4.pptx"),
              br(),
              h5(tags$strong("4G Quantum Code Structure:")),
              a("LTE Ericsson Quantum Code Structure 7.1",target="_blank",href="LTE Ericsson Quantum Code Structure 7.1.pptx"),
              br(),
              h5(tags$strong("5G Quantum Code Structure:")),
              a("5G Ericsson Quantum Code Structure 1.3",target="_blank",href="5G Ericsson Quantum Code Structure 1.3.pptx"),
              br()
      ),

      # 26th tab content
      tabItem(tabName = "vctrl",
              mainPanel(
                DT::dataTableOutput("vctrl", width = "100%", height = "auto")
              )
      )
    )
  )
)



##############################################################################################################################################################
##############################################################################################################################################################
## server ##

server <- function(input, output, session) { 
  
  output$L8_swapSelection <- renderUI({
    if(input$Config =="")
    {
      selectInput("L8_swap", "1a. L800 RRUS 11 to Radio 2217 Swap Ordering Code", choices = c("Yes", "No", "Yes existing", "-"), selected = "-")
    }
    else if (is.na(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),11]))
    {
    selectInput("L8_swap", "1a. L800 RRUS 11 to Radio 2217 Swap Ordering Code", choices = c("No","-"), selected = "-")
    }
    else
    {
     selectInput("L8_swap", "1a. L800 RRUS 11 to Radio 2217 Swap Ordering Code", choices = c("Yes", "No", "Yes existing", "-"), selected = "-")
    }
  })

  output$L18_4x4Selection <- renderUI({
    if(input$Config =="")
    {
      selectInput("L18_4x4", "2a. L1800 UG Ordering Code", choices = c("Yes", "No", "Yes existing", "-"), selected = "-")
    }
    else if (is.na(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),29]))
    {
      selectInput("L18_4x4", "2a. L1800 UG Ordering Code", choices = c("No","-"), selected = "-")
    }
    else
    {
      selectInput("L18_4x4", "2a. L1800 UG Ordering Code", choices = c("Yes", "No", "Yes existing", "-"), selected = "-")
    }
  })
  
  output$L21_4415Selection <- renderUI({
    if(input$Config =="")
    {
      selectInput("L21_4415", "2b. 4415 L2100 UG Ordering Code", choices = c("Yes", "No", "Yes existing", "-"), selected = "-")
    }
    else if (is.na(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),30]))
    {
      selectInput("L21_4415", "2b. 4415 L2100 UG Ordering Code", choices = c("No","-"), selected = "-")
    }
    else
    {
      selectInput("L21_4415", "2b. 4415 L2100 UG Ordering Code", choices = c("Yes", "No", "Yes existing", "-"), selected = "-")
    }
  })
  
  output$T23Selection <- renderUI({
    if(input$Config =="")
    {
      selectInput("T23", "3. 4x4 T23 UG Ordering Code (Macro / Orion)", choices = c("Yes", "No", "Yes existing", "-"), selected = "-")
    }
    else if (is.na(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),22]))
    {
      selectInput("T23", "3. 4x4 T23 UG Ordering Code (Macro / Orion)", choices = c("No","-"), selected = "-")
    }
    else
    {
      selectInput("T23", "3. 4x4 T23 UG Ordering Code (Macro / Orion)", choices = c("Yes", "No", "Yes existing", "-"), selected = "-")
    }
  })
  
  output$L26Selection <- renderUI({
    if(input$Config =="")
    {
      selectInput("L26", "4. L26 UG Ordering Code", choices = c("Yes", "No", "Yes existing", "-"), selected = "-")
    }
    else if (is.na(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),15]))
    {
      selectInput("L26", "4. L26 UG Ordering Code", choices = c("No","-"), selected = "-")
    }
    else
    {
      selectInput("L26", "4. L26 UG Ordering Code", choices = c("Yes", "No", "Yes existing", "-"), selected = "-")
    }
  })
  
  output$TEF_5G_T34_8x8Selection <- renderUI({
    if(input$Config =="")
    {
      selectInput("TEF_5G_T34_8x8", "5. TEF Only 5G T34 8x8 UG Ordering Code", choices = c("Yes", "No", "Yes existing", "-"), selected = "-")
    }
    else if (is.na(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),32]))
    {
      selectInput("TEF_5G_T34_8x8", "5. TEF Only 5G T34 8x8 UG Ordering Code", choices = c("No","-"), selected = "-")
    }
    else
    {
      selectInput("TEF_5G_T34_8x8", "5. TEF Only 5G T34 8x8 UG Ordering Code", choices = c("Yes", "No", "Yes existing", "-"), selected = "-")
    }
  })
  
  output$TEF_5G_T34_64MSelection <- renderUI({
    if(input$Config =="")
    {
      selectInput("TEF_5G_T34_64M", "6. TEF Only 5G T34 M-MiMo UG Ordering Code", choices = c("Yes", "No", "Yes existing", "-"), selected = "-")
    }
    else if (is.na(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),34]))
    {
      selectInput("TEF_5G_T34_64M", "6. TEF Only 5G T34 M-MiMo UG Ordering Code", choices = c("No","-"), selected = "-")
    }
    else
    {
      selectInput("TEF_5G_T34_64M", "6. TEF Only 5G T34 M-MiMo UG Ordering Code", choices = c("Yes", "No", "Yes existing", "-"), selected = "-")
    }
  })
  
  output$MORAN_5G_T34_8x8Selection <- renderUI({
    if(input$Config =="")
    {
      selectInput("MORAN_5G_T34_8x8", "7. VF 5G T34 8x8 MoRAN UG Ordering Code", choices = c("Yes", "No", "Yes existing", "-"), selected = "-")
    }
    else if (is.na(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),36]))
    {
      selectInput("MORAN_5G_T34_8x8", "7. VF 5G T34 8x8 MoRAN UG Ordering Code", choices = c("No","-"), selected = "-")
    }
    else
    {
      selectInput("MORAN_5G_T34_8x8", "7. VF 5G T34 8x8 MoRAN UG Ordering Code", choices = c("Yes", "No", "Yes existing", "-"), selected = "-")
    }
  })
  
  output$MORAN_5G_T34_64MSelection <- renderUI({
    if(input$Config =="")
    {
      selectInput("MORAN_5G_T34_64M", "8. VF 5G T34 M-MiMo MoRAN UG Ordering Code", choices = c("Yes", "No", "Yes existing", "-"), selected = "-")
    }
    else if (is.na(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),38]))
    {
      selectInput("MORAN_5G_T34_64M", "8. VF 5G T34 M-MiMo MoRAN UG Ordering Code", choices = c("No","-"), selected = "-")
    }
    else
    {
      selectInput("MORAN_5G_T34_64M", "8. VF 5G T34 M-MiMo MoRAN UG Ordering Code", choices = c("Yes", "No", "Yes existing", "-"), selected = "-")
    }
  })
  
  output$ESS_5G_N21_4x4Selection <- renderUI({
    if(input$Config =="")
    {
      selectInput("ESS_5G_N21_4x4", "9. ESS 5G N21 4x4 UG Ordering Code", choices = c("Yes", "No", "Yes existing", "-"), selected = "-")
    }
    else if (is.na(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),49]))
    {
      selectInput("ESS_5G_N21_4x4", "9. ESS 5G N21 4x4 UG Ordering Code", choices = c("No","-"), selected = "-")
    }
    else
    {
      selectInput("ESS_5G_N21_4x4", "9. ESS 5G N21 4x4 UG Ordering Code", choices = c("Yes", "No", "Yes existing", "-"), selected = "-")
    }
  })
  
  output$T23BB_ESS_5G_N21_4x4Selection <- renderUI({
    if(input$Config =="")
    {
      selectInput("T23BB_ESS_5G_N21_4x4", "10. T23 BB + ESS 5G N21 4x4 UG Ordering Code", choices = c("Yes", "No", "Yes existing", "-"), selected = "-")
    }
    else if (is.na(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),50]))
    {
      selectInput("T23BB_ESS_5G_N21_4x4", "10. T23 BB + ESS 5G N21 4x4 UG Ordering Code", choices = c("No","-"), selected = "-")
    }
    else
    {
      selectInput("T23BB_ESS_5G_N21_4x4", "10. T23 BB + ESS 5G N21 4x4 UG Ordering Code", choices = c("Yes", "No", "Yes existing", "-"), selected = "-")
    }
  })
  
  output$N7_2x2_MMBBSelection <- renderUI({
    if(input$Config =="")
    {
      selectInput("N7_2x2_MMBB", "11. 5G N7 2x2 + 4G/5G MM BB UG Ordering Code", choices = c("Yes", "No", "Yes existing", "-"), selected = "-")
    }
    else if (is.na(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),66]))
    {
      selectInput("N7_2x2_MMBB", "11. 5G N7 2x2 + 4G/5G MM BB UG Ordering Code", choices = c("No","-"), selected = "-")
    }
    else
    {
      selectInput("N7_2x2_MMBB", "11. 5G N7 2x2 + 4G/5G MM BB UG Ordering Code", choices = c("Yes", "No", "Yes existing", "-"), selected = "-")
    }
  })
  
  output$N7_2x2_MMBB_T23BBSelection <- renderUI({
    if(input$Config =="")
    {
      selectInput("N7_2x2_MMBB_T23BB", "12. 5G N7 2x2 + T23 BB + 4G/5G MM BB UG Ordering Code", choices = c("Yes", "No", "Yes existing", "-"), selected = "-")
    }
    else if (is.na(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),67]))
    {
      selectInput("N7_2x2_MMBB_T23BB", "12. 5G N7 2x2 + T23 BB + 4G/5G MM BB UG Ordering Code", choices = c("No","-"), selected = "-")
    }
    else
    {
      selectInput("N7_2x2_MMBB_T23BB", "12. 5G N7 2x2 + T23 BB + 4G/5G MM BB UG Ordering Code", choices = c("Yes", "No", "Yes existing", "-"), selected = "-")
    }
  })
  
 
  
  

  

# Google Maps link #  
  
  vG <- reactive({
    a("Google Maps", target="_blank", href=paste0("https://www.google.com/maps/place/", gsub(" ", "", input$PostCode, fixed = TRUE)))
  })
  
  output$GoogleMaps <- renderUI({
    vG()
  })
  
  # rendering uploaded site photo #    
  observe({print(input$myFile$datapath)})  
  #observe({View(input$myFile)})
  
  re1 <- reactive({
    if(is.null(input$myFile)){paste("No image uploaded")} else{gsub("\\\\", "/", input$myFile$datapath)}
    #req(gsub("\\\\", "/", input$myFile$datapath))
  })
  observe({print(re1())})
  observe({print(paste("Donnie Neylon: ",re1()))})
  
  
  output$piccy <- renderImage({
    list(src = re1(), width = 720, height = 720)
  }, deleteFile = FALSE)                          # There is a small quirk with using renderImage() we need to set the deleteFile flag to FALSE. Otherwise, the file is read into the temp directory, displayed for the user and then deleted.
  
  
  
# rendering version control #  
  
  VC$filter <- ifelse(grepl(VC[1,1], VC$Version),0, ifelse(grepl("\\.", VC$Version), 1, 2))    # create filter for verson control dataframe so we can style specfic cells, grepl returns a true/false for our matching criteria, we need \\ to escape special characters \^$.?*|+()[{
  
  output$vctrl <- DT::renderDataTable(
    datatable(VC, options = list(columnDefs = list(list(className = 'dt-center', targets = 1)),
                                 scrollX = TRUE, scrollY = "750px", pagelength = 20, lengthMenu = c(20,25,30,100)))                                               # order = list(list(4, 'desc')))
    %>% formatStyle('Version', valueColumns = "filter", backgroundColor = styleEqual(c(0,1,2),c('aqua','white','yellow')), fontWeight = 'bold')
  )
  
  # # rendering port allocation #
  #   dataset<-reactive({ 
  #     inFile <- input$uploadFile 
  #     dat<-read_excel(inFile$datapath, sheet = 3)
  #     return(dat)
  #   })
  
  # output$portalloc <- renderTable({
  #   if(is.null(input$uploadFile)){return ()}
  #   else{
  #   return (dataset())
  #   }
  #   })
  
  
  
# output comments and instructions relating to B3 Upgrade #
  output$Comments <- renderText({ 
    if(input$Config =="")
      {
        return (NULL)
    }
    else
    {
    return (as.character(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),156]))
    }
  })
  
# output comments and instructions relating to Tech Adds #
  output$TechAdd <- renderText({ 
    
    if (input$BuildType == "Tech Add only" & (input$ESS_5G_N21_4x4 == "Yes existing" | input$N7_2x2_MMBB == "Yes existing") & input$T23 == "Yes")
    {
      return (as.character(DS6456[270,156]))
    }
    else if ((input$ESS_5G_N21_4x4 == "Yes" | input$N7_2x2_MMBB == "Yes") & (input$T23 == "No" | input$T23 == "-") & (input$TEF_5G_T34_8x8 == "No" | input$TEF_5G_T34_8x8 == "-")
              & (input$TEF_5G_T34_64M == "No" | input$TEF_5G_T34_64M == "-") & (input$MORAN_5G_T34_8x8 == "No" | input$MORAN_5G_T34_8x8 == "-") & (input$MORAN_5G_T34_64M == "No" | input$MORAN_5G_T34_64M == "-"))
    {
      return (as.character(DS6456[271,156]))
    }
    else if ((input$N7_2x2_MMBB_T23BB == "Yes" | input$N7_2x2_MMBB == "Yes") & (input$TEF_5G_T34_64M == "Yes" | input$TEF_5G_T34_64M == "Yes existing" | input$MORAN_5G_T34_64M == "Yes" | input$MORAN_5G_T34_64M == "Yes existing"))
    {
      return (as.character(DS6456[273,156]))
    }
    else
    {
      #return (NULL)
      paste("")
    }
  })
  

# variable to identify capacity model #    
  vA <- reactive({
    if(stri_detect_fixed(input$Config, "Small UL") == TRUE)
    {
      paste("Small UL")
    }
    else if(stri_detect_fixed(input$Config, "Small") == TRUE)
    {
      paste("Small")
    }
    else if(stri_detect_fixed(input$Config, "High") == TRUE)
    {
      paste("High")
    }
    else if(stri_detect_fixed(input$Config, "Medium") == TRUE)
    {
      paste("Medium")
    }
    else if(stri_detect_fixed(input$Config, "Low") == TRUE)
    {
      paste("Low")
    }
    else if(stri_detect_fixed(input$Config, "Network Rail") == TRUE)
    {
      paste("Network Rail")
    }
    else if(stri_detect_fixed(input$Config, "Stealth") == TRUE)
    {
      paste("Stealth")
    }
    else if(input$Config == "")
    {
      paste("")
    }
    else
    {
      paste("No Capacity label")
    }  })
  observe({print(vA())})
  
  output$Capacity <- renderText({ 
    
    paste(vA())
    
  })
  
# variable to identify street furniture site #    
  vB <- reactive({
    if(input$Config %in% SF[,1])
    {
      paste("StreetFurniture")
    }
  })
  observe({print(vB())})
  
  output$SF <- renderText({ 
    
    paste(vB())
    
  })
  
# variable to identify SCD #    
  vSCD <- reactive({
    if(substr(input$Config, 1, 2) == "B1")
    {
      paste("B1-B3")
    }
    else if(substr(input$Config, 1, 2) == "B2")
    {
      paste("B2-B3")
    }
    else if(substr(input$Config, 1, 3) == "B3 ")
    {
      paste("New Build")
    }
    else if(substr(input$Config, 1, 6) == "B3-CCR")
    {
      paste("CCR")
    }
    else
    {paste("Preparatory")}
  })
  observe({print(vSCD())})
  
  output$SCD <- renderText({ 
    
    paste(vSCD())
    
  })

  # variable to determine Site Type Radio (STR), will be concatenated with the Q-code pattern for hardware matching section #  
  STR <- reactive({
    if(vSCD()=="New Build" & str_detect(input$Config,"TEF"))
    {
      paste("T")
    }
    else if(str_detect(input$Config,"Stealth"))
    {
      paste("S")
    }
    else
    {
      paste("M")
    }
  })
  observe({print(paste("Site Type Radio Identifier: ",STR()))})
  

  
## Configuration Builder ##  
# variables to get Dtree concatenation for matching #  
  output$propconfig <- renderText({
    paste(input$Config)
  })
  
  vM <- reactive({
    paste(input$SCD,input$CapacityModel,input$Watts,input$Sectors,input$InOutSite,input$BaseCab,input$DoubCab,
           input$LancYorkCabUG,input$BBloc,input$G9post,input$L8build,input$L18post,input$LU21exist,input$LteDUBB)
  }) 
  observe({print(vM())})
  
# vM1 variable for params list #  
  vM1 <- reactive({
    if(vM() == as.character(DTree[which(DS6456$TelefonicaConfiguration == input$Config),17]))
    {paste("Matched")}
    else
      {paste("Not Matched")}
  }) 
  observe({print(vM1())})
  observe({print(as.character(DTree[which(DS6456$TelefonicaConfiguration == input$Config),17]))})
  
  
  output$dtconfig <- renderText({
    paste(as.character(DTree[which(DTree$Concatenation == vM()),2]))
  })
  
  output$Match <- renderText({
    if(vM() == as.character(DTree[which(DS6456$TelefonicaConfiguration == input$Config),17])){paste0("Match")}else{paste("")}
  })
  
  output$NoMatch <- renderText({
    if(vM() != as.character(DTree[which(DS6456$TelefonicaConfiguration == input$Config),17])){paste0("No Match")}
    else{paste("")}
  })
  
  

  
  

      
  

  
  
##############################################################################################################################################################
## Rendering Q-codes ##
  
 # Column Header Indexes #
  # 1: B3 SCD Slide no. B3-CCR (Pg) no.
  # 2: Telefonica Configuration
  # 3: GSM 12W/20W
  # 4: 2G Q-Code
  # 5: 3G Q-Code
  # 6: 4G (L8 / L9 / L18 / L21) Q-Code
  # 7: 4G (L18 4x4) Q-Code
  # 8: 4G (L21 4415) Q-Code
  # 9: 1. Baseline B3 Ordering Code
  # 10: Comments Relating to 'B3' Upgrade
  # 11:
  # 12: 4G L9 + L26 Q-Code
  # 13: 4G L9 + L26 (L18 4x4) Q-Code
  # 14: 4G L9 + L26 (L21 4415) Q-Code
  # 15: 4. L26 UG Ordering Code
  # 16: 4G L9 + T23 4x4 (No N7/N21) Q-Code
  # 17: 4G L9 + T23 4x4 (L18 4x4) (No N7/N21) Q-Code
  # 18: 4G L9 + T23 4x4 (L21 4415) (No N7/N21) Q-Code
  # 19: 4G L9 + T23 4x4 (N7/N21) Q-Code
  # 20: 4G L9 + T23 4x4 (L18 4x4) (N7/N21) Q-Code
  # 21: 4G L9 + T23 4x4 (L21 4415) (N7/N21) Q-Code
  # 22: 3. 4x4 T23 UG Ordering Code (Macro / Orion)
  # 23: 4G L9 + L26 + T23 4x4 (No N7/N21) Q-Code
  # 24: 4G L9 + L26 + T23 4x4 (L18 4x4) (No N7/N21) Q-Code
  # 25: 4G L9 + L26 + T23 4x4 (L21 4415) (No N7/N21) Q-Code
  # 26: 4G L9 + L26 + T23 4x4 (N7/N21) Q-Code
  # 27: 4G L9 + L26 + T23 4x4 (L18 4x4) (N7/N21) Q-Code
  # 28: 4G L9 + L26 + T23 4x4 (L21 4415) (N7/N21) Q-Code
  # 29: 2a. L1800 UG Ordering Code
  # 30: 2b. 4415 L2100 UG Ordering
  # 31: TEF Only 5G T34 8x8 Q-Code
  # 32: 5. TEF Only 5G T34 8x8 UG Ordering Code
  # 33: TEF Only 5G T34 M-MiMo Q-Code
  # 34: 6. TEF Only 5G T34 M-MiMo UG Ordering Code
  # 35: TEF & VF 5G MoRAN T34 8x8 Q-Code
  # 36: 7. VF 5G T34 8x8 MoRAN UG Ordering Code
  # 37: TEF & VF 5G MoRAN T34 M-MiMo Q-Code
  # 38: 8. VF 5G T34 M-MiMo MoRAN UG Ordering Code
  # 39: TEF Only 5G N21 4x4 Q-Code
  # 40: TEF Only 5G N21 4x4 (4415) Q-Code
  # 41: TEF Only 5G T34 8x8 + N21 4x4 Q-Code
  # 42: TEF Only 5G T34 8x8 + N21 4x4 (4415) Q-Code
  # 43: TEF Only 5G T34 M-MiMo + N21 4x4 Q-Code
  # 44: TEF Only 5G T34 M-MiMo + N21 4x4 (4415) Q-Code
  # 45: TEF & VF 5G MoRAN T34 8x8 + TEF Only N21 4x4 Q-Code
  # 46: TEF & VF 5G MoRAN T34 8x8 + TEF Only N21 4x4 (4415) Q-Code
  # 47: TEF & VF 5G MoRAN T34 M-MiMo + TEF Only N21 4x4 Q-Code
  # 48: TEF & VF 5G MoRAN T34 M-MiMo + TEF Only N21 4x4 (4415) Q-Code
  # 49: 9. ESS 5G N21 4x4 UG Ordering Code
  # 50: 10. T23 BB + ESS 5G N21 4x4 UG Ordering Code
  # 51: TEF Only 5G N7 2x2 Q-Code
  # 52: TEF Only 5G N21 4x4 + TEF Only N7 2x2 Q-Code
  # 53: TEF Only 5G N21 4x4 (4415) + TEF Only N7 2x2 Q-Code
  # 54: TEF Only 5G T34 8x8 + TEF Only N7 2x2 Q-Code
  # 55: TEF Only 5G T34 M-MiMo + TEF Only N7 2x2 Q-Code
  # 56: TEF Only 5G T34 8x8 + TEF Only N21 4x4 + TEF Only N7 2x2 Q-Code
  # 57: TEF Only 5G T34 8x8 + TEF Only N21 4x4 (4415) + TEF Only N7 2x2 Q-Code
  # 58: TEF Only 5G T34 M-MiMo + TEF Only N21 4x4 + TEF Only N7 2x2 Q-Code
  # 59: TEF Only 5G T34 M-MiMo + TEF Only N21 4x4 (4415) + TEF Only N7 2x2 Q-Code
  # 60: TEF & VF 5G MoRAN T34 8x8 + TEF Only N7 2x2 Q-Code
  # 61: TEF & VF 5G MoRAN T34 M-MiMo + TEF Only N7 2x2 Q-Code
  # 62: TEF & VF 5G MoRAN T34 8x8 + TEF Only N21 4x4 + TEF Only N7 2x2 Q-Code
  # 63: TEF & VF 5G MoRAN T34 8x8 + TEF Only N21 4x4 (4415) + TEF Only N7 2x2 Q-Code
  # 64: TEF & VF 5G MoRAN T34 M-MiMo + TEF Only N21 4x4 + TEF Only N7 2x2 Q-Code
  # 65: TEF & VF 5G MoRAN T34 M-MiMo + TEF Only N21 4x4 (4415) + TEF Only N7 2x2 Q-Code
  # 66: 11.  5G N7 2x2 + 4G/5G MM BB UG Ordering Code
  # 67: 12. 5G N7 2x2 + T23 BB + 4G/5G MM BB UG Ordering Code
  # 68:
  # 69:
  # 70:
  # .
  # .
  # . 
  # .
  # .
  # .
  # 157: B3 SCD Slide no.B3-CCR (Pg) no.
  # 158: Cab1 (Baseline)
  # 159: Cab1 (N34)
  # 160: Cab1 (N21/N7)
  # 161: Cab2 (Baseline)
  # 162: Cab2 (N34)
  # 163: Cab2 (N21/N7)
  # 164: Connectivity (Baseline) (L18 2x2/NA) (Apollo/Elara/NA)
  # 165: Connectivity (Baseline) (L18 2x2/NA) (Orion)
  # 166: Connectivity (Baseline) (L18 4x4/NA) (Apollo/Elara/NA)
  # 167: Connectivity (Baseline) (L18 4x4/NA) (Orion)
  # 168: Connectivity (Baseline) including GU900
  # 169: Connectivity N34 (Tef) 8T8R
  # 170: Connectivity N34 (Tef) M-MIMO
  # 171: Connectivity N34 (MoRAN) 8T8R
  # 172: Connectivity N34 (MoRAN) M-MIMO
  # 173: Connectivity N21/N7 (Tef) (L18 2x2/NA) (L21 2217) (Apollo/Elara/NA)
  # 174: Connectivity N21/N7 (Tef) (L18 2x2/NA) (L21 2217) (Orion)
  # 175: Connectivity N21/N7 (Tef) (L18 2x2/NA) (L21 4415) (Apollo/Elara/NA)
  # 176: Connectivity N21/N7 (Tef) (L18 2x2/NA) (L21 4415) (Orion)
  # 177: Connectivity N21/N7 (Tef) (L18 2x2/NA) TX
  # 178: Connectivity N21/N7 (Tef) (L18 4x4/NA) (L21 2217) (Apollo/Elara/NA)
  # 179: Connectivity N21/N7 (Tef) (L18 4x4/NA) (L21 2217) (Orion)
  # 180: Connectivity N21/N7 (Tef) (L18 4x4/NA) (L21 4415) (Apollo/Elara/NA)
  # 181: Connectivity N21/N7 (Tef) (L18 4x4/NA) (L21 4415) (Orion)
  # 182: Connectivity N21/N7 (Tef) (L18 4x4/NA) TX
  # 183: Connectivity N21/N7 (MoRAN) (L18 2x2/NA) (L21 2217)
  # 184: Connectivity N21/N7 (MoRAN) (L18 2x2/NA) (L21 4415)
  # 185: Connectivity N21/N7 (MoRAN) (L18 4x4/NA) (L21 2217)
  # 186: Connectivity N21/N7 (MoRAN) (L18 4x4/NA) (L21 4415)
  # 187: CPRI Base
  # 188: CPRI N34
  # 189: CPRI N21/N7
  # 190:
  # 191:
  # 192:
  
  
  
  v2 <- reactive({
    if (input$man2GQ != "")
    {return (input$man2GQ)}
    else
    {
    return (as.character(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),4]))    # might be better to refer to column name than column index "6" but need to address column names, removing spaces etc.
    }
  })
  output$GSM_Qcode <- renderText({ 

    paste(v2())
    
  })
  
  v3 <- reactive({
    if (input$man3GQ != "")
    {return (input$man3GQ)}
    else
    {
    return (as.character(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),5]))
    }
  })
  output$UMTS_Qcode <- renderText({ 
    
    paste(v3())
    
  })
  

  
  # variable v4 to get 4G5G Q-code pattern for Q-code selection #
  v4 <- reactive({
    if(input$Config =="")
    {
      paste("B.NNNNNNNNNNNN")
    }
    else
    {
    paste("B",                                                                    # "B" for Baseline                                                            
          ".",                                                                    # L8 can be anytyhing ".", whether L8 upgrade/swap is required it will not affect Q-code selection as the L8 swap if required is mandatory not optional #
          ifelse(substr(input$L18_4x4,1,1)=="-","N",substr(input$L18_4x4,1,1)),
          ifelse(substr(input$L21_4415,1,1)=="-","N",substr(input$L21_4415,1,1)),
          ifelse(substr(input$T23,1,1)=="-","N",substr(input$T23,1,1)),
          ifelse(substr(input$L26,1,1)=="-","N",substr(input$L26,1,1)),
          ifelse(substr(input$TEF_5G_T34_8x8,1,1)=="-","N",substr(input$TEF_5G_T34_8x8,1,1)),
          ifelse(substr(input$TEF_5G_T34_64M,1,1)=="-","N",substr(input$TEF_5G_T34_64M,1,1)),
          ifelse(substr(input$MORAN_5G_T34_8x8,1,1)=="-","N",substr(input$MORAN_5G_T34_8x8,1,1)),
          ifelse(substr(input$MORAN_5G_T34_64M,1,1)=="-","N",substr(input$MORAN_5G_T34_64M,1,1)),
          ifelse(substr(input$ESS_5G_N21_4x4,1,1)=="-","N",substr(input$ESS_5G_N21_4x4,1,1)),
          ifelse(substr(input$T23BB_ESS_5G_N21_4x4,1,1)=="-","N",substr(input$T23BB_ESS_5G_N21_4x4,1,1)),
          ifelse(substr(input$N7_2x2_MMBB,1,1)=="-","N",substr(input$N7_2x2_MMBB,1,1)),
          ifelse(substr(input$N7_2x2_MMBB_T23BB,1,1)=="-","N",substr(input$N7_2x2_MMBB_T23BB,1,1)),
          sep = "")
    }
  }) 
  observe({print(v4())})
  
  
  output$LteNR_Qcode_pattern <- renderText({
    paste(as.character(v4()))
  })
  
   # vQ <- reactive({  
   #   if(input$QCgen != "Yes")
   #   {
   #     return(QCselect)
   #   }
   #   else
   #     {
   #   QCselect$LTE_Qcode_Match <- ifelse(str_detect(v4(), regex(QCselect$LTE_Qcode_pattern, ignore.case = T)), 1, 0)
   #   QCselect$NR_Qcode_Match <- ifelse(str_detect(v4(), regex(QCselect$NR_Qcode_pattern, ignore.case = T)), 1, 0)
   #   return(QCselect)
   #     }
   # })
   
   vQ <- reactive({
     
     input$GO
  
     isolate({
       QCselect$LTE_Qcode_Match <- ifelse(str_detect(v4(), regex(QCselect$LTE_Qcode_pattern, ignore.case = T)), 1, 0)
       QCselect$NR_Qcode_Match <- ifelse(str_detect(v4(), regex(QCselect$NR_Qcode_pattern, ignore.case = T)), 1, 0)
       return(QCselect)
     })
   })
  
  v5 <- reactive({  
  LTE_Qcode_Index <- vQ()[which(vQ()$LTE_Qcode_Match == 1),5]
  return(LTE_Qcode_Index)
  })
  observe({print(paste("LTE_Qcode_Index: ",v5()))})
  
  
  
  v5Z <- reactive({
    as.character(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),v5()])
  })
  
  v5Apre <- reactive({
    if(nchar(toString(v5Z())) == 16)
    {
      paste(substr(v5Z(),1,12),"000000000",substr(v5Z(),13,16),sep = "")
    }
    else if(nchar(toString(v5Z())) == 22)
    {
      paste(substr(v5Z(),1,18),"000",substr(v5Z(),19,22),sep = "")
    }
    else if(nchar(toString(v5Z())) == 25)
    {
      paste(v5Z())
    }
    else if(is.na(v5Z()))
    {
      paste("")
    }
    
    else
    {
      paste("Invalid string length")
    }
    
  })
  
  
  # first a variable to handle the downsizing of quantity of L2300 Radio 8808 B40Y in Apollo/Elara pole Street Furniture sites #
  vApolloElara <- reactive({
    if(input$Config == "")                                  #  this condition is the starting point so function has something to return before any site configuration is given
    {
      multiplier <- 1
      return (multiplier) 
    }
    else if(!(input$Config %in% SF[,1]))
    {
      multiplier <- 1
      return (multiplier)
    }
    else if((input$Config %in% SF[,1]) & ((v5Apre() == "") | (as.numeric(substr(v5Apre(),14,14)) ==0)))
    {
      multiplier <- 1
      return (multiplier)
    }
    else if((input$Config %in% SF[,1]) & (input$SFtype == "Apollo" | input$SFtype == "Elara") & (as.numeric(substr(v5Apre(),14,14)) == 3))
    {
      multiplier <- 2/3
      return (multiplier)
    }
    else if((input$Config %in% SF[,1]) & (input$SFtype == "Apollo" | input$SFtype == "Elara") & (as.numeric(substr(v5Apre(),14,14)) == 2))
    {
      multiplier <- 1/2
      return (multiplier)
    }
    else if((input$Config %in% SF[,1]) & (input$SFtype == "Orion" | input$SFtype == "-"))
    {
      multiplier <- 1
      return (multiplier)
    }
  })
  observe({print(paste("Apollo Elara multiplier is: ", vApolloElara()))})  
  
  
  # prepare the 4G Q-code by applying the Apollo/Elara multiplier to the L2300
  v5A <- reactive({
    if (input$man4GQ != "")
    {
      if(nchar(toString(input$man4GQ)) == 16)
      {
        paste(substr(input$man4GQ,1,12),"000000000",substr(input$man4GQ,13,16),sep = "")
      }
      else if(nchar(toString(input$man4GQ)) == 22)
      {
        paste(substr(input$man4GQ,1,18),"000",substr(input$man4GQ,19,22),sep = "")
      }
      else if(nchar(toString(input$man4GQ)) == 25)
      {
        paste(input$man4GQ)
      }
    }
    else
    {
    return (paste0(substr(v5Apre(),1,13), as.numeric(substr(v5Apre(),14,14))*vApolloElara(), substr(v5Apre(),15,25)))
    }
  })
  
  # render the 4G Q-code
  output$LTE_Qcode <- renderText({ 
    
    paste(v5A())
    
  })
  
  
  v6 <- reactive({
    if(!(1 %in% vQ()$NR_Qcode_Match))
    {
      NR_Qcode_Index <- 0
    }
    else
    {
    NR_Qcode_Index <- vQ()[which(vQ()$NR_Qcode_Match == 1),5]
    }
    return(NR_Qcode_Index)
  })
  observe({print(paste("NR_Qcode_Index: ",v6()))})

  
  # render the 5G Q-code
  v6A1 <- reactive({
    if (input$man5GQ != "")
    {return (input$man5GQ)}
    
    else if(v6()==0)
    {
      paste("*")
    }
    else
    {
    as.character(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),v6()])
    }
  })
  output$NR_Qcode <- renderText({ 
      paste(v6A1())
    
  })
  

  # render the concatenated Q-code for pattern matching
  looper <-  1
  
  v6A <- reactive({
    if(input$BuildType == "Calculator")
    {
      return(Configtrans$ConcatenatedQCx3[looper])
    }
    else
    {
    paste(v2(),v3(),v5A(),v2(),v3(),v5A(),v2(),v3(),v5A(),v6A1(),STR(), sep = "")
    }
  })
  observe({print(paste("v6A: ",v6A()))})
  

  # render the concatenated Q-code for display
  v6A2 <- reactive({
    paste(v2(),v3(),v5A(),v6A1(), sep = "")
  })
  output$Qcode_concat <- renderText({

    paste(v6A2())

  })
  
  

  
  # rendering Product Inventory #  
  output$qcodehits <- DT::renderDataTable(
    vQ(), options = list(columnDefs = list(list(targets = 4, visible = FALSE),list(className = 'dt-center', targets = c(5,6))),
                          scrollX = TRUE, pagelength = 100, lengthMenu = c(10,20,50,80,90,100), stringsAsFactors = FALSE)
  )
  
  
  vCtrans <- reactive({
    paste0(input$man2GQ,input$man3GQ,v5A(),input$man5GQ)
  })
  
  # output concatenated manually entered Q-Codes #
  output$qcodeconctrans <- renderText({
    
    paste(vCtrans())
    
  })
  
  
  # search for configuration matches to manually entered Q-codes #
  vconfighits <- reactive({
    
    input$GO2
    
    isolate({
      Configtrans$Match <- ifelse(str_detect(vCtrans(), regex(Configtrans$ConcatenatedQC, ignore.case = T)), 1, 0)
      return(Configtrans)
    })
  })
  
  
  # rendering Configuration matches to manually entered Q-codes #  
  output$confighits <- DT::renderDataTable(
    vconfighits()[vconfighits()$Match==1,], options = list(columnDefs = list(list(className = 'dt-center', targets = c(0,4,5,6,7))),
                         scrollX = TRUE, pagelength = 100, lengthMenu = c(10,20,50,80,90,100), stringsAsFactors = FALSE),rownames= FALSE
  )
  

  
    
##############################################################################################################################################################  
## Rendering Ordering codes ## 
  
# all v7 - v20 variables have to deal with outputting ordering codes in Tech Add only mode, so for example an L26 Tech Add is to be deployed #
# at an already Beacon 3ed site which when Beacon 3ed got an L23 upgrade, we want to select L23 as "Yes existing" so that 4G Q-code will be   #
# updated as per build but ordering code will not be passed through to BOM as hardware is already installed.                                 #
  
  v7 <- reactive({
    if(input$BuildType == "Tech Add only")
    {
      paste("")
    }
    else
    {
    as.character(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),9])
    }
  })
  observe(v7())
  
  output$B3_UG_OC <- renderText({ 
    
    paste(v7())
    
  })
  
  v8 <- reactive({
    if(input$L8_swap == "Yes existing" | input$L8_swap == "-")
    {
      paste("")
    }
    else if(input$L8_swap == "Yes"){
      as.character(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),11])
    }
    else
    {
      paste("")
    }
  })
  
  output$L8_swap_OC <- renderText({ 
    
    paste(v8())
    
  })

  v9 <- reactive({
    if(input$L18_4x4 == "Yes existing" | input$L18_4x4 == "-")
    {
      paste("")
    }
    else if(input$L18_4x4 == "Yes"){
      as.character(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),29])
    }
    else
    {
      paste("")
    }
  })
  
  output$L18_4x4_OC <- renderText({ 
    
    paste(v9())
    
  })  
  
  
  v10 <- reactive({
    if(input$L21_4415 == "Yes existing" | input$L21_4415 == "-")
    {
      paste("")
    }
    else if(input$L21_4415 == "Yes"){
      as.character(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),30])
    }
    else
    {
      paste("")
    }
  })
  
  output$L21_4415_OC <- renderText({ 
    
    paste(v10())
    
  })


  v11 <- reactive({
    if(input$T23 == "Yes existing" | input$T23 == "-")
    {
      paste("")
    }
    else if(input$T23 == "Yes"){
      as.character(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),22])
    }
    else
    {
      paste("")
    }
  })
  
  output$T23_OC <- renderText({ 
    
    paste(v11())
    
  })
  
  
  v12 <- reactive({
    if(input$L26 == "Yes existing" | input$L26 == "-")
    {
      paste("")
    }
    else if(input$L26 == "Yes"){
      as.character(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),15])
    }
    else
    {
      paste("")
    }
  })
  
  output$L26_OC <- renderText({ 
    
    paste(v12())
    
  })
  

  v13 <- reactive({
    if(input$TEF_5G_T34_8x8 == "Yes existing" | input$TEF_5G_T34_8x8 == "-")
    {
      paste("")
    }
    else if(input$TEF_5G_T34_8x8 == "Yes"){
      as.character(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),32])
    }
    else
    {
      paste("")
    }
  })
  
  output$TEF_5G_T34_8x8_OC <- renderText({ 
    
    paste(v13())
    
  })  
  
  
  v14 <- reactive({
    if(input$TEF_5G_T34_64M == "Yes existing" | input$TEF_5G_T34_64M == "-")
    {
      paste("")
    }
    else if(input$TEF_5G_T34_64M == "Yes"){
      as.character(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),34])
    }
    else
   {
      paste("")
    }
  })
  
  output$TEF_5G_T34_64M_OC <- renderText({ 
    
    paste(v14())
    
  })  
  

  
  v15 <- reactive({
    if(input$MORAN_5G_T34_8x8 == "Yes existing" | input$MORAN_5G_T34_8x8 == "-")
    {
      paste("")
    }
    else if(input$MORAN_5G_T34_8x8 == "Yes"){
      as.character(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),36])
    }
    else
    {
      paste("")
    }
  })
  
  output$MORAN_5G_T34_8x8_OC <- renderText({ 
    
    paste(v15())
    
  })
  
  
  v16 <- reactive({
    if(input$MORAN_5G_T34_64M == "Yes existing" | input$MORAN_5G_T34_64M == "-")
    {
      paste("")
    }
    else if(input$MORAN_5G_T34_64M == "Yes"){
      as.character(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),38])
    }
    else
    {
      paste("")
    }
  })
  
  output$MORAN_5G_T34_64M_OC <- renderText({ 
    
    paste(v16())
    
  })
  
  
  v17 <- reactive({
    if(input$ESS_5G_N21_4x4 == "Yes existing" | input$ESS_5G_N21_4x4 == "-")
    {
      paste("")
    }
    else if(input$ESS_5G_N21_4x4 == "Yes"){
      as.character(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),49])
    }
    else
    {
      paste("")
    }
  })
  
  output$ESS_5G_N21_4x4_OC <- renderText({ 
    
    paste(v17())
    
  })
  
  
  v18 <- reactive({
    if(input$T23BB_ESS_5G_N21_4x4 == "Yes existing" | input$T23BB_ESS_5G_N21_4x4 == "-")
    {
      paste("")
    }
    else if(input$T23BB_ESS_5G_N21_4x4 == "Yes"){
      as.character(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),50])
    }
    else
    {
      paste("")
    }
  })
  
  output$T23BB_ESS_5G_N21_4x4_OC <- renderText({ 
    
    paste(v18())
    
  })
  
  
  v19 <- reactive({
    if(input$N7_2x2_MMBB == "Yes existing" | input$N7_2x2_MMBB == "-")
    {
      paste("")
    }
    else if(input$N7_2x2_MMBB == "Yes"){
      as.character(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),66])
    }
    else
    {
      paste("")
    }
  })
  
  output$N7_2x2_MMBB_OC <- renderText({ 
    
    paste(v19())
    
  })
  
  
  v20 <- reactive({
    if(input$N7_2x2_MMBB_T23BB == "Yes existing" | input$N7_2x2_MMBB_T23BB == "-")
    {
      paste("")
    }
    else if(input$N7_2x2_MMBB_T23BB == "Yes"){
      as.character(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),67])
    }
    else
    {
      paste("")
    }
  })
  
  output$N7_2x2_MMBB_T23BB_OC <- renderText({ 
    
    paste(v20())
    
  })
  
  
  
##############################################################################################################################################################
## Mappings section ##  
  
  # variable to return HLD based on SCD identified #
  HLD <- reactive({
    if(vSCD() == "B1-B3")
    {
      return (HLDB1B3)
    }
    else if(vSCD() == "B2-B3")
    {
      return (HLDB2B3)
    }
    else if(vSCD() == "New Build")
    {
      return (HLDNB)
    }
    else
    {paste("HLDNB")}
  })
  observe({print(HLD())})
  
  
  # variable to get HLD page number #
  # substring insertion of "00" or "0" or "" is dependent of number of pages in a document, greater than 100, greater than 10 but less than 100, less than 10
  v1 <- reactive({
    if(HLD() == HLDB2B3)
    {
      if(nchar(toString(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),1])) == 1)
      {
        paste(substr(HLD(), 5, nchar(HLD())-4),"00",DS6456[which(DS6456$TelefonicaConfiguration == input$Config),1],".pdf",sep="")      
      }
      else if(nchar(toString(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),1])) == 2)
      {
        paste(substr(HLD(), 5, nchar(HLD())-4),"0",DS6456[which(DS6456$TelefonicaConfiguration == input$Config),1],".pdf",sep="")
      }
      else
      {
        paste(substr(HLD(), 5, nchar(HLD())-4),DS6456[which(DS6456$TelefonicaConfiguration == input$Config),1],".pdf",sep="")  
      }
    }
    else if(HLD() == HLDB1B3 | HLD() == HLDNB)
    {
      if(nchar(toString(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),1])) == 1)
      {
        paste(substr(HLD(), 5, nchar(HLD())-4),"0",DS6456[which(DS6456$TelefonicaConfiguration == input$Config),1],".pdf",sep="")
      }
      else if(nchar(toString(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),1])) == 2)
      {
        paste(substr(HLD(), 5, nchar(HLD())-4),"",DS6456[which(DS6456$TelefonicaConfiguration == input$Config),1],".pdf",sep="")
      }
      else
      {
        paste(substr(HLD(), 5, nchar(HLD())-4),DS6456[which(DS6456$TelefonicaConfiguration == input$Config),1],".pdf",sep="")  
      }
    }
    
  })
  observe({print(v1())})
  
  
  
  # rendering HLD page #  
  output$HLDpage <- renderUI({
    tags$iframe(style="height:900px; width:100%; scrolling=yes",src=v1())
  })
  
  
  # variable to return CAB1 Layout HLD based on SCD identified #
  CAB1 <- reactive({
    if(vSCD() == "B1-B3")
    {
      return (Cab1B1B3)
    }
    else if(vSCD() == "B2-B3")
    {
      return (Cab1B2B3)
    }
    else if(vSCD() == "New Build")
    {
      return (Cab1NB)
    }
    else
    {paste("No Cabinet Layout required")}
  })
  observe({print(CAB1())})
  
  
  # variable to return CAB2 Layout HLD based on SCD identified #
  CAB2 <- reactive({
    if(vSCD() == "B1-B3")
    {
      return (Cab2B1B3)
    }
    else if(vSCD() == "B2-B3")
    {
      return (Cab2B2B3)
    }
    else
    {paste("No Cabinet Layout required")}
  })
  observe({print(CAB2())})  
  
  
  
  # variable to return column index of reference for cabinet 1 layout #
  vColCab1 <- reactive({
    if(nchar(v6A2()) < 51 | is.na(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),159]) | is.na(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),160]) ) # columns FC & FD
       {
         return (158)
    }
    else if(nchar(v6A2()) > 50 & substr(v6A2(),50,54)=="56E21")
    {
      return (160)
    }
    else if(nchar(v6A2()) > 50 & substr(v6A2(),50,54)=="56E34")
    {
      return (159)
    }
  })
  observe({print(paste("v6A2: ",v6A2()))})
  observe({print(paste("Cabinet 1 column Index: ",vColCab1()))})
  
  
  # variable to get CAB1 page number #  
  v1A <- reactive({
    if(CAB1() == Cab1NB)
    {
      paste(substr(CAB1(), 5, nchar(CAB1())-4),DS6456[which(DS6456$TelefonicaConfiguration == input$Config),vColCab1()],".pdf",sep="")
    }
    else
    {
      if(is.na(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),vColCab1()]))
      {
        paste(substring(BLANK, 5),sep="")
      }
      else if(nchar(toString(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),vColCab1()])) == 1)
      {
        paste(substr(CAB1(), 5, nchar(CAB1())-4),"0",DS6456[which(DS6456$TelefonicaConfiguration == input$Config),vColCab1()],".pdf",sep="")
      }
      else if(nchar(toString(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),vColCab1()])) == 2)
      {
        paste(substr(CAB1(), 5, nchar(CAB1())-4),"",DS6456[which(DS6456$TelefonicaConfiguration == input$Config),vColCab1()],".pdf",sep="")
      }
      else
      {
        paste(substr(CAB1(), 5, nchar(CAB1())-4),DS6456[which(DS6456$TelefonicaConfiguration == input$Config),vColCab1()],".pdf",sep="")  
      }
    }
  })
  observe({print(v1A())})
  
  
  # rendering CAB1 page #  
  output$CAB1page <- renderUI({
    tags$iframe(style="height:900px; width:100%; scrolling=yes",src=v1A())
  })

  
  # variable to return column index of reference for cabinet 2 layout #
  vColCab2 <- reactive({
    if(nchar(v6A2()) < 51 | is.na(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),162]) | is.na(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),163]))  # columns FF & FG
    {
      return (161)
    }
    else if(nchar(v6A2()) > 50 & substr(v6A2(),50,54)=="56E21")
    {
      return (163)
    }
    else if(nchar(v6A2()) > 50 & substr(v6A2(),50,54)=="56E34")
    {
      return (162)
    }
  }) 
  observe({print(paste("Cabinet 2 column Index: ",vColCab2()))})
  
  
  # variable to get CAB2 page number #  
  v1B <- reactive({
    if(is.na(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),vColCab2()]) | CAB1() == Cab1NB)
    {
      paste(substring(BLANK, 5),sep="")
    }
    else if(nchar(toString(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),vColCab2()])) == 1)
    {
      paste(substr(CAB2(), 5, nchar(CAB2())-4),"0",DS6456[which(DS6456$TelefonicaConfiguration == input$Config),vColCab2()],".pdf",sep="")
    }
    else if(nchar(toString(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),vColCab2()])) == 2)
    {
      paste(substr(CAB2(), 5, nchar(CAB2())-4),"",DS6456[which(DS6456$TelefonicaConfiguration == input$Config),vColCab2()],".pdf",sep="")
    }
    else
    {
      paste(substr(CAB2(), 5, nchar(CAB2())-4),DS6456[which(DS6456$TelefonicaConfiguration == input$Config),vColCab2()],".pdf",sep="")  
    }
  })
  observe({print(v1B())})
  
  
  # rendering CAB2 page #  
  output$CAB2page <- renderUI({
    tags$iframe(style="height:900px; width:100%; scrolling=yes",src=v1B())
  })
  
  # Not sure if a cabinet 3 is required under any configuration scenario???? #
  # # variable to get CAB3 page number #  
  #   v1C <- reactive({
  #     if(is.na(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),35]))
  #     {
  #       paste(substring(BLANK, 5),sep="")
  #     }
  #     else if(nchar(toString(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),35])) == 1)
  #     {
  #       paste(substr(CAB, 5, nchar(CAB)-4),"0",DS6456[which(DS6456$TelefonicaConfiguration == input$Config),35],".pdf",sep="")
  #     }
  #     else if(nchar(toString(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),35])) == 2)
  #     {
  #       paste(substr(CAB, 5, nchar(CAB)-4),"",DS6456[which(DS6456$TelefonicaConfiguration == input$Config),35],".pdf",sep="")
  #     }
  #     else
  #     {
  #       paste(substr(CAB, 5, nchar(CAB)-4),DS6456[which(DS6456$TelefonicaConfiguration == input$Config),35],".pdf",sep="")  
  #     }
  #   })
  #   observe({print(v1C())})
  #   
  #   
  # # rendering CAB3 page #  
  #   output$CAB3page <- renderUI({
  #     tags$iframe(style="height:900px; width:100%; scrolling=yes",src=v1C())
  #   })
  
  
  
  
  
  
  
  # variable to return Connectivity Diagram HLD based on SCD identified #
  CD <- reactive({
    if(vSCD() == "B1-B3")
    {
      return (CDB1B3)
    }
    else if(vSCD() == "B2-B3")
    {
      return (CDB2B3)
    }
    else if(vSCD() == "New Build")
    {
      return (CDNB)
    }
    else
    {paste("No Connectivty Diagram required")}
  })
  observe({print(CD())})    
  
  
  # variable to get CD1 page number #  
  v1Dpre <- reactive({
    L184x4 <- c("v", "y")
    L182x2 <- c("a", "b", "t")
    if(CD() == CDNB)
    {
      return(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),166])   # column FJ
    }
    else if(input$SFtype == "Orion" & substr(v6A2(), 33,33) %in% L182x2)
    {
      return(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),165])   # column FI
    }
    else if(input$SFtype != "Orion" & substr(v6A2(), 33,33) %in% L182x2)
    {
      return(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),164])   # column FH
    }
    else if(input$SFtype == "Orion" & substr(v6A2(), 33,33) %in% L184x4)
    {
      return(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),167])   # column FK
    }
    else if(input$SFtype != "Orion" & substr(v6A2(), 33,33) %in% L184x4)
    {
      return(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),166])   # column FJ
    }
    else
    {
      paste(0)  
    }
  })
  observe({print(v1Dpre())})
  
  v1D <- reactive({
    if(v1Dpre()==0 | input$Config == "")
    {
      paste(substring(BLANK, 5),sep="")
    }
    else if(v1Dpre()!=0 & nchar(toString(v1Dpre()))==1)
            {
      paste(substr(CD(), 5, nchar(CD())-4), "0", v1Dpre(),".pdf",sep="")
    }
    else if(v1Dpre()!=0 & nchar(toString(v1Dpre()))==2)
            {
      paste(substr(CD(), 5, nchar(CD())-4), "", v1Dpre(),".pdf",sep="")    
    }
  })
  observe({print(paste("Connection Diagram 1st page: ",v1Dpre()))})
  observe({print(paste("Connection Diagram pdf: ",v1D()))})
  
  # rendering CD1 page #  
  output$CDBase <- renderUI({
    tags$iframe(style="height:900px; width:100%; scrolling=yes",src=v1D())
  })
  
  
  # variable to get CD2 page number #  
  v1Epre <- reactive({
    if(input$Config=="" | DS6456[which(DS6456$TelefonicaConfiguration == input$Config),168]==0)
    {
      return(0)
    }
    else
    {
      return(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),168])   # column FL  
    }
  })
  observe({print(v1Epre())})
  
  v1E <- reactive({
    if(v1Epre()==0)
    {
      paste(substring(BLANK, 5),sep="")
    }
    else if(v1Epre()!=0 & nchar(toString(v1Epre()))==1)
    {
      paste(substr(CD(), 5, nchar(CD())-4), "0", v1Epre(),".pdf",sep="")
    }
    else if(v1Epre()!=0 & nchar(toString(v1Epre()))==2)
    {
      paste(substr(CD(), 5, nchar(CD())-4), "", v1Epre(),".pdf",sep="")    
    }
  })  
  observe({print(paste("Connection Diagram 2nd page: ",v1E()))})
  
  
  # rendering CD2 page #  
  output$CDGU9 <- renderUI({
    tags$iframe(style="height:900px; width:100%; scrolling=yes",src=v1E())
  })
  
  

  # variable to get CD3 page number #  
  v1Eapre <- reactive({
    if (input$Config == "")
    {
      paste(0)
    }
    else if(substr(input$TEF_5G_T34_8x8,1,1)=="Y")
    {
      return(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),169])   # column FM
    }
    else if(substr(input$TEF_5G_T34_64M,1,1)=="Y")
    {
      return(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),170])   # column FN
    }
    else if(substr(input$MORAN_5G_T34_8x8,1,1)=="Y")
    {
      return(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),171])   # column FO
    }
    else if(substr(input$MORAN_5G_T34_64M,1,1)=="Y")
    {
      return(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),172])   # column FP
    }
    else
    {
      paste(0)   
    }
  })
  observe({print(v1Eapre())})
  
  v1Ea <- reactive({
    if(v1Eapre()==0)
    {
      paste(substring(BLANK, 5),sep="")
    }
    else if(v1Eapre()!=0 & nchar(toString(v1Eapre()))==1)
    {
      paste(substr(CD(), 5, nchar(CD())-4), "0", v1Eapre(),".pdf",sep="")
    }
    else if(v1Eapre()!=0 & nchar(toString(v1Eapre()))==2)
    {
      paste(substr(CD(), 5, nchar(CD())-4), "", v1Eapre(),".pdf",sep="")    
    }
  })  
  
  # rendering CD3 page #  
  output$CDN34 <- renderUI({
    tags$iframe(style="height:900px; width:100%; scrolling=yes",src=v1Ea())
  })
 

  
   
  # variable to get CD4 page number #  
  v1Ebpre <- reactive({
    L184x4 <- c("v", "y")
    L182x2 <- c("a", "b", "t")
    L214415 <- c("v", "y")
    L212217 <- c("a", "b", "t")
    if(input$SFtype != "Orion" & (substr(v6A2(),50,54)=="56E21" | substr(v6A2(),50,53)=="56E7") & substr(v6A2(), 33,33) %in% L182x2 & substr(v6A2(), 36,36) %in% L212217 
       & substr(v6A1(),nchar(v6A1())-1,nchar(v6A1())-1)=="0")
    {
      return(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),173])   # column FQ
    }
    else if(input$SFtype == "Orion" & (substr(v6A2(),50,54)=="56E21" | substr(v6A2(),50,53)=="56E7") & substr(v6A2(), 33,33) %in% L182x2 & substr(v6A2(), 36,36) %in% L212217 
            & substr(v6A1(),nchar(v6A1())-1,nchar(v6A1())-1)=="0")
    {
      return(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),174])   # column FR
    }
    else if(input$SFtype != "Orion" & (substr(v6A2(),50,54)=="56E21" | substr(v6A2(),50,53)=="56E7") & substr(v6A2(), 33,33) %in% L182x2 & substr(v6A2(), 36,36) %in% L214415
            & substr(v6A1(),nchar(v6A1())-1,nchar(v6A1())-1)=="0")
    {
      return(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),175])   # column FS
    }
    else if(input$SFtype == "Orion" & (substr(v6A2(),50,54)=="56E21" | substr(v6A2(),50,53)=="56E7") & substr(v6A2(), 33,33) %in% L182x2 & substr(v6A2(), 36,36) %in% L214415
            & substr(v6A1(),nchar(v6A1())-1,nchar(v6A1())-1)=="0")
    {
      return(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),176])   # column FT
    }
#######    
    else if(input$SFtype != "Orion" & (substr(v6A2(),50,54)=="56E21" | substr(v6A2(),50,53)=="56E7") & substr(v6A2(), 33,33) %in% L184x4 & substr(v6A2(), 36,36) %in% L212217 
            & substr(v6A1(),nchar(v6A1())-1,nchar(v6A1())-1)=="0")
    {
      return(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),178])   # column FV
    }
    else if(input$SFtype == "Orion" & (substr(v6A2(),50,54)=="56E21" | substr(v6A2(),50,53)=="56E7") & substr(v6A2(), 33,33) %in% L184x4 & substr(v6A2(), 36,36) %in% L212217 
            & substr(v6A1(),nchar(v6A1())-1,nchar(v6A1())-1)=="0")
    {
      return(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),179])   # column FW
    }
    else if(input$SFtype != "Orion" & (substr(v6A2(),50,54)=="56E21" | substr(v6A2(),50,53)=="56E7") & substr(v6A2(), 33,33) %in% L184x4 & substr(v6A2(), 36,36) %in% L214415
            & substr(v6A1(),nchar(v6A1())-1,nchar(v6A1())-1)=="0")
    {
      return(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),180])   # column FX
    }
    else if(input$SFtype == "Orion" & (substr(v6A2(),50,54)=="56E21" | substr(v6A2(),50,53)=="56E7") & substr(v6A2(), 33,33) %in% L184x4 & substr(v6A2(), 36,36) %in% L214415
            & substr(v6A1(),nchar(v6A1())-1,nchar(v6A1())-1)=="0")
    {
      return(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),181])   # column FY
    }
#######    
    else if(input$SFtype == "-" & (substr(v6A2(),50,54)=="56E21" | substr(v6A2(),50,53)=="56E7") & substr(v6A2(), 33,33) %in% L182x2 & substr(v6A2(), 36,36) %in% L212217 
            & substr(v6A1(),nchar(v6A1())-1,nchar(v6A1())-1)!="0")
    {
      return(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),183])   # column GA
    }
    else if(input$SFtype == "-" & (substr(v6A2(),50,54)=="56E21" | substr(v6A2(),50,53)=="56E7") & substr(v6A2(), 33,33) %in% L182x2 & substr(v6A2(), 36,36) %in% L214415 
            & substr(v6A1(),nchar(v6A1())-1,nchar(v6A1())-1)!="0")
    {
      return(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),184])   # column GB
    }
    else if(input$SFtype == "-" & (substr(v6A2(),50,54)=="56E21" | substr(v6A2(),50,53)=="56E7") & substr(v6A2(), 33,33) %in% L184x4 & substr(v6A2(), 36,36) %in% L212217
            & substr(v6A1(),nchar(v6A1())-1,nchar(v6A1())-1)!="0")
    {
      return(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),185])   # column GC
    }
    else if(input$SFtype == "-" & (substr(v6A2(),50,54)=="56E21" | substr(v6A2(),50,53)=="56E7") & substr(v6A2(), 33,33) %in% L184x4 & substr(v6A2(), 36,36) %in% L214415
            & substr(v6A1(),nchar(v6A1())-1,nchar(v6A1())-1)!="0")
    {
      return(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),186])   # column GD
    }
    else
    {
      paste(0)   
    }
  })
  observe({print(v1Ebpre())})
  
  v1Eb <- reactive({
    if(v1Ebpre()==0)
    {
      paste(substring(BLANK, 5),sep="")
    }
    else if(v1Ebpre()!=0 & nchar(toString(v1Ebpre()))==1)
    {
      paste(substr(CD(), 5, nchar(CD())-4), "0", v1Ebpre(),".pdf",sep="")
    }
    else if(v1Ebpre()!=0 & nchar(toString(v1Ebpre()))==2)
    {
      paste(substr(CD(), 5, nchar(CD())-4), "", v1Ebpre(),".pdf",sep="")    
    }
  })  
  
  # rendering CD4 page #  
  output$CDN21N7 <- renderUI({
    tags$iframe(style="height:900px; width:100%; scrolling=yes",src=v1Eb())
  })
  
  
  # variable to get CD5 page number #  
  v1Ecpre <- reactive({
    if(input$Config=="" | DS6456[which(DS6456$TelefonicaConfiguration == input$Config),182]==0)
    {
      paste(0)
    }
    else
    {
      return(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),182])   # column FZ  
    }
  })
  observe({print(v1Ecpre())})
  
  v1Ec <- reactive({
    if(v1Ecpre()==0)
    {
      paste(substring(BLANK, 5),sep="")
    }
    else if(v1Ecpre()!=0 & nchar(toString(v1Ecpre()))==1)
    {
      paste(substr(CD(), 5, nchar(CD())-4), "0", v1Ecpre(),".pdf",sep="")
    }
    else if(v1Ecpre()!=0 & nchar(toString(v1Ecpre()))==2)
    {
      paste(substr(CD(), 5, nchar(CD())-4), "", v1Ecpre(),".pdf",sep="")    
    }
  })    
  
  # rendering CD5 page #  
  output$CDTX <- renderUI({
    tags$iframe(style="height:900px; width:100%; scrolling=yes",src=v1Ec())
  })
  
  
  
  
  
  # variable to return CPRI HLD based on SCD identified #
  CPRI <- reactive({
    if(vSCD() == "B1-B3")
    {
      return (CPRIB1B3)
    }
    else if(vSCD() == "B2-B3")
    {
      return (CPRIB2B3)
    }
    else if(vSCD() == "New Build")
    {
      return (CPRINB)
    }
    else
    {paste("No CPRI Diagram required")}
  })
  observe({print(CPRI())})  
  
  
  # variable to get CPRI1 page number #  
  v1F <- reactive({
    if((CPRI()==CPRIB1B3 & v1Dpre()==0) | (CPRI()==CPRIB2B3 & v1Dpre()==0) | (CPRI()==CPRINB & v1Dpre()==0))
    {
      paste(substring(BLANK, 5),sep="")
    }
    else if(CPRI()==CPRIB1B3 & v1Dpre()==42)
    {
      paste(substr(CPRI(), 5, nchar(CPRI())-4),"41",".pdf",sep="")
    }
    else if(CPRI()==CPRIB2B3 & v1Dpre()==60)
    {
      paste(substr(CPRI(), 5, nchar(CPRI())-4),"59",".pdf",sep="")
    }
    else if(v1Dpre()!=0 & nchar(toString(v1Dpre()))==1)
    {
      paste(substr(CPRI(), 5, nchar(CPRI())-4),"0",v1Dpre(),".pdf",sep="")
    }
    else if(v1Dpre()!=0 & nchar(toString(v1Dpre()))==2)
    {
      paste(substr(CPRI(), 5, nchar(CPRI())-4),v1Dpre(),".pdf",sep="")
    }
  })
  observe({print(v1F())})
  
  
  # rendering CPRI1 page #  
  output$CPRIBase <- renderUI({
    tags$iframe(style="height:900px; width:100%; scrolling=yes",src=v1F())
  })
  
  
  # variable to get CPRI2 page number #  
  v1G <- reactive({
    if((CPRI()==CPRIB1B3 & v1Epre()==0) | (CPRI()==CPRIB2B3 & v1Epre()==0) | (CPRI()==CPRINB & v1Epre()==0))
    {
      paste(substring(BLANK, 5),sep="")
    }
    else if(CPRI()==CPRIB1B3 & v1Epre()==42)
    {
      paste(substr(CPRI(), 5, nchar(CPRI())-4),"41",".pdf",sep="")
    }
    else if(CPRI()==CPRIB2B3 & v1Epre()==60)
    {
      paste(substr(CPRI(), 5, nchar(CPRI())-4),"59",".pdf",sep="")
    }
    else if(v1Epre()!=0 & nchar(toString(v1Epre()))==1)
    {
      paste(substr(CPRI(), 5, nchar(CPRI())-4),"0",v1Epre(),".pdf",sep="")
    }
    else if(v1Epre()!=0 & nchar(toString(v1Epre()))==2)
    {
      paste(substr(CPRI(), 5, nchar(CPRI())-4),v1Epre(),".pdf",sep="")
    }
  })
  observe({print(v1G())})
  
  
  # rendering CPRI2 page #  
  output$CPRIGU9 <- renderUI({
    tags$iframe(style="height:900px; width:100%; scrolling=yes",src=v1G())
  })
  
  # variable to get CPRI3 page number #  
  v1Ga <- reactive({
    if((CPRI()==CPRIB1B3 & v1Eapre()==0) | (CPRI()==CPRIB2B3 & v1Eapre()==0) | (CPRI()==CPRINB & v1Eapre()==0))
    {
      paste(substring(BLANK, 5),sep="")
    }
    else if(CPRI()==CPRIB1B3 & v1Eapre()==42)
    {
      paste(substr(CPRI(), 5, nchar(CPRI())-4),"41",".pdf",sep="")
    }
    else if(CPRI()==CPRIB2B3 & v1Eapre()==60)
    {
      paste(substr(CPRI(), 5, nchar(CPRI())-4),"59",".pdf",sep="")
    }
    else if(v1Eapre()!=0 & nchar(toString(v1Eapre()))==1)
    {
      paste(substr(CPRI(), 5, nchar(CPRI())-4),"0",v1Eapre(),".pdf",sep="")
    }
    else if(v1Eapre()!=0 & nchar(toString(v1Eapre()))==2)
    {
      paste(substr(CPRI(), 5, nchar(CPRI())-4),v1Eapre(),".pdf",sep="")
    }
  })
  observe({print(v1Ga())})
  
  
  # rendering CPRI3 page #  
  output$CPRIN34 <- renderUI({
    tags$iframe(style="height:900px; width:100%; scrolling=yes",src=v1Ga())
  })
  
  # variable to get CPRI4 page number #  
  v1Gb <- reactive({
    if((CPRI()==CPRIB1B3 & v1Ebpre()==0) | (CPRI()==CPRIB2B3 & v1Ebpre()==0) | (CPRI()==CPRINB & v1Ebpre()==0))
    {
      paste(substring(BLANK, 5),sep="")
    }
    else if(CPRI()==CPRIB1B3 & v1Ebpre()==42)
    {
      paste(substr(CPRI(), 5, nchar(CPRI())-4),"41",".pdf",sep="")
    }
    else if(CPRI()==CPRIB2B3 & v1Ebpre()==60)
    {
      paste(substr(CPRI(), 5, nchar(CPRI())-4),"59",".pdf",sep="")
    }
    else if(v1Ebpre()!=0 & nchar(toString(v1Ebpre()))==1)
    {
      paste(substr(CPRI(), 5, nchar(CPRI())-4),"0",v1Ebpre(),".pdf",sep="")
    }
    else if(v1Ebpre()!=0 & nchar(toString(v1Ebpre()))==2)
    {
      paste(substr(CPRI(), 5, nchar(CPRI())-4),v1Ebpre(),".pdf",sep="")
    }
  })
  observe({print(v1Gb())})
  
  
  # rendering CPRI4 page #  
  output$CPRIN21N7 <- renderUI({
    tags$iframe(style="height:900px; width:100%; scrolling=yes",src=v1Gb())
  })
  

  

##############################################################################################################################################################  
## Updating the HW data by manipulation of the Q-code concatenation ##

# # Capacity look ups (Beacon 2) #
# CA <- c("High", "Medium", "Small", "Small UL", "Network Rail", "Low") 
# CB <- c("High", "Medium", "Small", "Small UL", "Network Rail", "Stealth")
# CL <- "Low"
# CS <- "Stealth"
# cabsx2 <- c(28,30,31,32,33,34,35,36,38,40,41,42,43,44,45,46,47,49,50,51,54,56,64,67,83,84,86,87,89,90,91,92,95,96,5,6,7,8,9,10,11,12,13,14,15,16,18,20,21,22,"L9 06","L9 07","L9 08","L9 09","L9 10","L9 15","L9 16","L9 17","L9 18")





# 2x Cabinet sites for Beacon 3 (both cabinets are RBS 6201 or RBS 6102), numbers represent slide numbers on HLDs, all New Build sites are at most 1x Cabinet/Enclosure #
cabsx2_B1B3 <- c(17,20,21,22,23,24,27,28,29,30,31,32,33,34,40,42,49,50,51,52,53,54)
cabsx2_B2B3 <- c(19,22,23,24,25,28,29,30,31,32,33,34,48,50,64,65,66,67,68,69,90)


# 2x cabinet configurations where York or Lancaster is the 2nd cabinet
# cabsx2_B1B3_YL <- c(35y,36y,37y,38y,39y,41l,43l,55y,56y,57y,58y,59y,60y,67y)
# cabsx2_B2B3_YL <- c(35y,36y,37l,38y,39l,40y,41y,42y,43l,44y,49l,51l,52l,53l,70y,71y,72l,73y,74l,75y,76y,77y,78l,79y,89y)

# vector for identification of HLD pages that have 2x cabinet with or which 1 cabinet is a York or Lancaster #
cabsx2_B1B3_YL <- c(35,36,37,38,39,41,43,55,56,57,58,59,60,67)
cabsx2_B2B3_YL <- c(35,36,37,38,39,40,41,42,43,44,49,51,52,53,70,71,72,73,74,75,76,77,78,79,89)

# # vector for identification of HLD pages that have any 2x cabinet configuration #
cabsx2_B1B3_RBS_YL <- c(17,20,21,22,23,24,27,28,29,30,31,32,33,34,40,42,49,50,51,52,53,54,35,36,37,38,39,41,43,55,56,57,58,59,60,67)
cabsx2_B2B3_RBS_YL <- c(19,22,23,24,25,28,29,30,31,32,33,34,48,50,64,65,66,67,68,69,90,35,36,37,38,39,40,41,42,43,44,49,51,52,53,70,71,72,73,74,75,76,77,78,79,89)




# When match found, calculate quantity, Radios rows 2-99, DU/BB 100-124, Cabinets 125-136, remember starts at ProdInv$Qty[1] as this is the first row, header row not counted #  
v6B <- reactive({
  
  for (looper in 1:nrow(Configtrans))
  {
  
# Radios #
  ProdInv$Match <- ifelse(str_detect(v6A(), regex(ProdInv$QcodePattern, ignore.case = T)), 1, 0)
  # GSM 900 SM Radios #
  ProdInv$Qty[1]<- ProdInv$Match[1]* as.numeric(substr(v6A(),5,5))
  ProdInv$Qty[2]<- ProdInv$Match[2]* as.numeric(substr(v6A(),5,5))
  ProdInv$Qty[3]<- ProdInv$Match[3]* as.numeric(substr(v6A(),5,5))
  ProdInv$Qty[4]<- ProdInv$Match[4]* as.numeric(substr(v6A(),5,5))
  ProdInv$Qty[5]<- ProdInv$Match[5]* as.numeric(substr(v6A(),5,5))
  
  # UMTS SM Radios #
  ProdInv$Qty[6]<- ProdInv$Match[6]* as.numeric(substr(v6A(),5,5))
  ProdInv$Qty[7]<- ProdInv$Match[7]* as.numeric(substr(v6A(),19,19))
  ProdInv$Qty[8]<- ProdInv$Match[8]* as.numeric(substr(v6A(),19,19))
  ProdInv$Qty[9]<- ProdInv$Match[9]* as.numeric(substr(v6A(),19,19))
  ProdInv$Qty[10]<- ProdInv$Match[10]* as.numeric(substr(v6A(),19,19))
  ProdInv$Qty[11]<- ProdInv$Match[11]* as.numeric(substr(v6A(),19,19))
  ProdInv$Qty[12]<- ProdInv$Match[12]* as.numeric(substr(v6A(),19,19))
  ProdInv$Qty[13]<- ProdInv$Match[13]* as.numeric(substr(v6A(),17,17))
  ProdInv$Qty[14]<- ProdInv$Match[14]* as.numeric(substr(v6A(),17,17))
  ProdInv$Qty[15]<- ProdInv$Match[15]* as.numeric(substr(v6A(),17,17))
  ProdInv$Qty[16]<- ProdInv$Match[16]* as.numeric(substr(v6A(),17,17))
  ProdInv$Qty[17]<- ProdInv$Match[17]* as.numeric(substr(v6A(),19,19))
  ProdInv$Qty[18]<- ProdInv$Match[18]* as.numeric(substr(v6A(),19,19))
  
  
  # LTE SM Radios #
  ProdInv$Qty[19]<- ProdInv$Match[19]* as.numeric(substr(v6A(),32,32))
  ProdInv$Qty[20]<- ProdInv$Match[20]* as.numeric(substr(v6A(),32,32))
  ProdInv$Qty[21]<- ifelse(as.numeric(substr(v6A(),35,35) == "X"), 0, ProdInv$Match[21]* as.numeric(substr(v6A(),35,35)))
  ProdInv$Qty[22]<- ifelse(as.numeric(substr(v6A(),35,35) == "X"), 0, ProdInv$Match[22]* as.numeric(substr(v6A(),35,35)))
  ProdInv$Qty[23]<- ProdInv$Match[23]* as.numeric(substr(v6A(),41,41))
  ProdInv$Qty[24]<- ProdInv$Match[24]* as.numeric(substr(v6A(),38,38))
  ProdInv$Qty[25]<- ProdInv$Match[25]* as.numeric(substr(v6A(),38,38))
  ProdInv$Qty[26]<- ProdInv$Match[26]* as.numeric(substr(v6A(),29,29))
  ProdInv$Qty[27]<- ProdInv$Match[27]* as.numeric(substr(v6A(),29,29))
  ProdInv$Qty[28]<- ProdInv$Match[28]* as.numeric(substr(v6A(),29,29))
  ProdInv$Qty[29]<- ifelse(as.numeric(substr(v6A(),44,44) == "X"), 0, ProdInv$Match[29]* as.numeric(substr(v6A(),44,44)))
  ProdInv$Qty[30]<- ifelse(as.numeric(substr(v6A(),44,44) == "X"), 0, ProdInv$Match[30]* as.numeric(substr(v6A(),44,44)))
  ProdInv$Qty[31]<- ifelse(as.numeric(substr(v6A(),35,35) == "X"), 0, ProdInv$Match[31]* as.numeric(substr(v6A(),35,35)))
  ProdInv$Qty[32]<- ProdInv$Match[32]* as.numeric(substr(v6A(),32,32))
  ProdInv$Qty[33]<- ifelse(as.numeric(substr(v6A(),44,44) == "X"), 0, ProdInv$Match[33]* as.numeric(substr(v6A(),44,44)))
  ProdInv$Qty[34]<- ProdInv$Match[34]* as.numeric(substr(v6A(),29,29))
  ProdInv$Qty[35]<- ifelse(as.numeric(substr(v6A(),35,35) == "X"), 0, ProdInv$Match[35]* as.numeric(substr(v6A(),35,35)))
  ProdInv$Qty[36]<- ProdInv$Match[36]* as.numeric(substr(v6A(),32,32))
  ProdInv$Qty[37]<- ProdInv$Match[37]* as.numeric(substr(v6A(),32,32))
  ProdInv$Qty[38]<- ProdInv$Match[38]* as.numeric(substr(v6A(),32,32))
  ProdInv$Qty[39]<- ProdInv$Match[39]* as.numeric(substr(v6A(),29,29))
  ProdInv$Qty[40]<- ProdInv$Match[40]* as.numeric(substr(v6A(),32,32))
  ProdInv$Qty[41]<- ProdInv$Match[41]* as.numeric(substr(v6A(),32,32))
  ProdInv$Qty[42]<- ProdInv$Match[42]* as.numeric(substr(v6A(),32,32))
  ProdInv$Qty[43]<- ProdInv$Match[43]* as.numeric(substr(v6A(),32,32))
  ProdInv$Qty[44]<- ProdInv$Match[44]* as.numeric(substr(v6A(),29,29))
  ProdInv$Qty[45]<- ProdInv$Match[45]* as.numeric(substr(v6A(),29,29))
  ProdInv$Qty[46]<- ProdInv$Match[46]* as.numeric(substr(v6A(),32,32))
  ProdInv$Qty[47]<- ProdInv$Match[47]* as.numeric(substr(v6A(),32,32))
  ProdInv$Qty[48]<- ifelse(as.numeric(substr(v6A(),35,35) == "X"), 0, ProdInv$Match[48]* as.numeric(substr(v6A(),35,35)))
  ProdInv$Qty[49]<- ifelse(as.numeric(substr(v6A(),35,35) == "X"), 0, ProdInv$Match[49]* as.numeric(substr(v6A(),35,35)))
  ProdInv$Qty[50]<- ProdInv$Match[50]* as.numeric(substr(v6A(),38,38))
  ProdInv$Qty[51]<- ProdInv$Match[51]* as.numeric(substr(v6A(),38,38))
  ProdInv$Qty[52]<- ifelse(as.numeric(substr(v6A(),35,35) == "X"), 0, ProdInv$Match[52]* as.numeric(substr(v6A(),35,35)))
  ProdInv$Qty[53]<- ProdInv$Match[53]* as.numeric(substr(v6A(),32,32))
  ProdInv$Qty[54]<- ProdInv$Match[54]* as.numeric(substr(v6A(),32,32))
  
  
  # GSM & UMTS MM Radios
  ProdInv$Qty[55]<- ProdInv$Match[55]* as.numeric(substr(v6A(),5,5))
  ProdInv$Qty[56]<- ProdInv$Match[56]* as.numeric(substr(v6A(),5,5))
  ProdInv$Qty[57]<- ProdInv$Match[57]* as.numeric(substr(v6A(),5,5))
  ProdInv$Qty[58]<- ProdInv$Match[58]* as.numeric(substr(v6A(),5,5))
  ProdInv$Qty[59]<- ProdInv$Match[59]* as.numeric(substr(v6A(),5,5))
  ProdInv$Qty[60]<- ProdInv$Match[60]* as.numeric(substr(v6A(),5,5))
  ProdInv$Qty[61]<- ProdInv$Match[61]* as.numeric(substr(v6A(),5,5))
  
  # 5G NR SM Radios                                                                  
  ProdInv$Qty[62]<- ProdInv$Match[62]* 3
  ProdInv$Qty[63]<- ProdInv$Match[63]* 3
  ProdInv$Qty[64]<- ProdInv$Match[64]* 3
  ProdInv$Qty[65]<- ProdInv$Match[65]* 2
  ProdInv$Qty[66]<- ProdInv$Match[66]* 3
  ProdInv$Qty[67]<- ProdInv$Match[67]* 2
  
  
  # 5G NR & GSM MM Radios                                                           # have to be careful that these radios are counted twice Radio 2238 B8 B20 B28B, needs further testing using applicable configurations
  ProdInv$Qty[68]<- ProdInv$Match[68]* 3
  ProdInv$Qty[69]<- ProdInv$Match[69]* 2
  ProdInv$Qty[70]<- ProdInv$Match[70]* 3
  ProdInv$Qty[71]<- ProdInv$Match[71]* 2
  
  
  # 5G NR & GSM & UMTS MM Radios                                                    # have to be careful that these radios are counted twice Radio 2238 B8 B20 B28B, needs further testing using applicable configurations
  ProdInv$Qty[72]<- ProdInv$Match[72]* 3
  ProdInv$Qty[73]<- ProdInv$Match[73]* 2
  ProdInv$Qty[74]<- ProdInv$Match[74]* 3
  ProdInv$Qty[75]<- ProdInv$Match[75]* 2
  
  
  # LTE & UMTS MM Radios
  ProdInv$Qty[76]<- ProdInv$Match[76]* 6
  ProdInv$Qty[77]<- ProdInv$Match[77]* 4
  ProdInv$Qty[78]<- ProdInv$Match[78]* 2
  ProdInv$Qty[79]<- ProdInv$Match[79]* 6
  ProdInv$Qty[80]<- ProdInv$Match[80]* 4
  ProdInv$Qty[81]<- ProdInv$Match[81]* 2
  
  
  # Reserved additional radio dataframe row positions, set to zero for now #
  ProdInv$Qty[82]<- 0
  ProdInv$Qty[83]<- 0
  ProdInv$Qty[84]<- 0
  ProdInv$Qty[85]<- 0
  ProdInv$Qty[86]<- 0
  ProdInv$Qty[87]<- 0
  ProdInv$Qty[88]<- 0
  ProdInv$Qty[89]<- 0
  ProdInv$Qty[90]<- 0
  ProdInv$Qty[91]<- 0
  ProdInv$Qty[92]<- 0
  ProdInv$Qty[93]<- 0
  ProdInv$Qty[94]<- 0
  ProdInv$Qty[95]<- 0
  ProdInv$Qty[96]<- 0
  ProdInv$Qty[97]<- 0
  ProdInv$Qty[98]<- 0

 
  
  # # Small Cells if required in a CCR #
  # ProdInv$Qty[XX]<- ifelse(substr(v6A(),32,32)== "A", ProdInv$Match[XX]*10, 0)
  # ProdInv$Qty[XX]<- ifelse(substr(v6A(),32,32)== "B", ProdInv$Match[XX]*11,0)
  # ProdInv$Qty[XX]<- ifelse(substr(v6A(),32,32)== "C", ProdInv$Match[XX]*12, 0)
  # ProdInv$Qty[XX]<- ifelse(substr(v6A(),32,32)== "D", ProdInv$Match[XX]*13, 0)
  # ProdInv$Qty[XX]<- ifelse(substr(v6A(),32,32)== "E", ProdInv$Match[XX]*14, 0)
  # ProdInv$Qty[XX]<- ifelse(substr(v6A(),32,32)== "F", ProdInv$Match[XX]*15, 0)


  
  
# DU/BB #
  # DUG 10
  ProdInv$Qty[99] <- 0
  
  # DUG 20
  ProdInv$Qty[100] <- ifelse(substr(v6A(),11,11) == 1, 3, ifelse(substr(v6A(),11,11) == 2, 4, ifelse(substr(v6A(),11,11) == 3, 6, ifelse(substr(v6A(),11,11) == 4, 4,             
                      ifelse(substr(v6A(),11,11) == 5, 2, ifelse(substr(v6A(),11,11) == 6, 3, ifelse(substr(v6A(),11,11) == 7, 2, ifelse(substr(v6A(),11,11) == 8, 1,                                                                                                                   
                      ifelse(substr(v6A(),11,11) == 9, 1, ifelse(substr(v6A(),11,11) == 9, 1,0))))))))))
  
  # DUW 20
  ProdInv$Qty[101] <- ifelse(substr(v6A(),23,23) == 9, 1, 0)
  
  # DUW 30
  ProdInv$Qty[102] <- ifelse(substr(v6A(),23,23) == "K" | substr(v6A(),23,23) == "Q" | substr(v6A(),23,23) == "S" | substr(v6A(),23,23) == 9, 1,
                     ifelse(substr(v6A(),23,23) == "F" | substr(v6A(),23,23) == "L" | substr(v6A(),23,23) == "M" | substr(v6A(),23,23) == "P" | substr(v6A(),23,23) == "T", 2,
                     ifelse(substr(v6A(),23,23) == "N" | substr(v6A(),23,23) == "4", 3,
                     ifelse(substr(v6A(),23,23) == 5, 4, 0))))
  
  # DUW 31
  ProdInv$Qty[103] <- ifelse(substr(v6A(),23,23) == "A" | substr(v6A(),23,23) == "F" | substr(v6A(),23,23) == "K" | substr(v6A(),23,23) == "L" 
                             | substr(v6A(),23,23) == "M" | substr(v6A(),23,23) == "Q" | substr(v6A(),23,23) == 4, 1,
                      ifelse(substr(v6A(),23,23) == "B" | substr(v6A(),23,23) == "C", 2,
                      ifelse(substr(v6A(),23,23) == "D", 3,
                      ifelse(substr(v6A(),23,23) == "E", 4, 0))))
  
  # DUS 31
  ProdInv$Qty[104] <- ifelse(substr(v6A(),49,49) == 1, 1, ifelse(substr(v6A(),49,49) == 2, 2, ifelse(substr(v6A(),49,49) == 3, 3, ifelse(substr(v6A(),49,49) == 4, 4, 0))))
  
  # # Baseband 5212
  # ProdInv$Qty[105] <- ifelse(substr(v6A(),48,48) == 5, 2, 0)
  
  # # Baseband 5216
  # ProdInv$Qty[106] <- ifelse(substr(v6A(),23,23) == "H", 2, ifelse(substr(v6A(),23,23) == "G" | substr(v6A(),23,23) == "J", 1,
  #                    ifelse(substr(v6A(),48,48) == 3 | substr(v6A(),48,48) == 4 | substr(v6A(),48,48) == 6, 1, 0)))
  
  # Baseband 6620 with fan (BB6620)
  ProdInv$Qty[107] <- sum(ifelse(substr(v6A(),48,48) == 8, 2, ifelse(substr(v6A(),48,48) == "B", 1, 0)),
                          ifelse(substr(v6A(),23,23) == 7, 1,0))
  
  # Baseband 6630 with fan (BB6630)
  ProdInv$Qty[108] <- if(v6A1() == "*")     # that is no 5G
                        {
                         sum(ifelse(substr(v6A(),11,11) == "A", 1, 0),
                             ifelse(substr(v6A(),23,23) == "R" | substr(v6A(),23,23) == 8, 1, 0),
                             ifelse(substr(v6A(),48,48) == "B" | substr(v6A(),48,48) == "C" | substr(v6A(),48,48) == "D", 1, 0),
                             ifelse(substr(v6A(),48,48) == 7 | substr(v6A(),48,48) == "A", 2, 0),
                             ifelse(substr(v6A(),48,48) == "G" | substr(v6A(),48,48) == "H",3,0))
                        }
                      else
                        {
                         sum(ifelse(substr(v6A(),11,11) == "A", 1, 0),
                             ifelse(substr(v6A(),23,23) == "R" | substr(v6A(),23,23) == 8, 1, 0),
                             ifelse(substr(v6A(),48,48) == "B" | substr(v6A(),48,48) == "C" | substr(v6A(),48,48) == "D", 1, 0),
                             ifelse(substr(v6A(),48,48) == 7 | substr(v6A(),48,48) == "A", 2, 0),
                             ifelse(substr(v6A(),48,48) == "G" | substr(v6A(),48,48) == "H",3,0),
                             ifelse(substr(v6A(),nchar(v6A())-1,nchar(v6A())-1) == 1 | substr(v6A(),nchar(v6A())-1,nchar(v6A())-1) == "A", 1,
                                    ifelse(substr(v6A(),nchar(v6A())-1,nchar(v6A())-1) ==2 | substr(v6A(),nchar(v6A())-1,nchar(v6A())-1) == "B" | substr(v6A(),nchar(v6A())-1,nchar(v6A())-1) == "C", 2, 
                                    ifelse(substr(v6A(),nchar(v6A())-1,nchar(v6A())-1) == 3 | substr(v6A(),nchar(v6A())-1,nchar(v6A())-1) == "D" | substr(v6A(),nchar(v6A())-1,nchar(v6A())-1) == "E", 3,
                                    ifelse(substr(v6A(),nchar(v6A())-1,nchar(v6A())-1) == 4 | substr(v6A(),nchar(v6A())-1,nchar(v6A())-1) == "F", 4,
                                    0)))))
                        }

  # Baseband R503
  ProdInv$Qty[109] <- if(v6A1() == "*")     # that is no 5G
                        {
                         sum(ifelse(substr(v6A(),23,23) == 8, 1, 0),
                             ifelse(substr(v6A(),48,48) == 1 | substr(v6A(),48,48) == "C", 1, 
                                    ifelse(substr(v6A(),48,48) == 2 | substr(v6A(),48,48) == "A" | substr(v6A(),48,48) == "G", 2,
                                    ifelse(substr(v6A(),48,48) == 9, 4, 0))))
                        }
                     else
                       {
                        sum(ifelse(substr(v6A(),23,23) == 8, 1, 0),
                            ifelse(substr(v6A(),48,48) == 1 | substr(v6A(),48,48) == "C", 1, 
                                   ifelse(substr(v6A(),48,48) == 2 | substr(v6A(),48,48) == "A" | substr(v6A(),48,48) == "G", 2,
                                    ifelse(substr(v6A(),48,48) == 9, 4, 0))),
                            ifelse(substr(v6A(),nchar(v6A())-2,nchar(v6A())-2) == 1, 1, ifelse(substr(v6A(),nchar(v6A())-2,nchar(v6A())-2) == 2, 2,
                                   ifelse(substr(v6A(),nchar(v6A())-2,nchar(v6A())-2) == 3, 3, ifelse(substr(v6A(),nchar(v6A())-2,nchar(v6A())-2) == 4, 4, 0)))))
                       }
  
  # SIU 02, TCU 03, TCU 02
  ProdInv$Qty[110] <- 0
  ProdInv$Qty[111] <- 0
  ProdInv$Qty[112] <- 0
  
  
  # Baseband 6318 (BB6318)
  ProdInv$Qty[113] <- sum(ifelse(substr(v6A(),23,23) == 6, 1, 0), ifelse(substr(v6A(),48,48) == "E", 1, 0), ifelse(substr(v6A(),nchar(toString(v6A()))-1,nchar(toString(v6A()))-1) == 5, 1, 0))
  
  # Baseband 6502 (BB6502)
  ProdInv$Qty[114] <- ifelse(("Dark" %in% input$Config | substr(v6A(),48,48) == "F" | "6502" %in% input$Config) & substr(v6A(),46,47) == "sm", 1, 0)
  
  
  
# reserved additional DU/BB dataframe positions, set to zero until required #
  ProdInv$Qty[115] <- 0
  ProdInv$Qty[116] <- 0
  ProdInv$Qty[117] <- 0
  ProdInv$Qty[118] <- 0
  ProdInv$Qty[119] <- 0
  ProdInv$Qty[120] <- 0
  ProdInv$Qty[121] <- 0
  ProdInv$Qty[122] <- 0
  ProdInv$Qty[123] <- 0
  
  # Cabinets #
  # RBS6201
  ProdInv$Qty[124] <- ifelse((substr(v6A(),8,9) == "id" | substr(v6A(),20,21) == "id" | substr(v6A(),46,47) == "id") & vSCD() == "B1-B3" & (DS6456[which(DS6456$TelefonicaConfiguration == input$Config),1] %in% cabsx2_B1B3), 2,
                             ifelse((substr(v6A(),8,9) == "id" | substr(v6A(),20,21) == "id" | substr(v6A(),46,47) == "id") & vSCD() == "B2-B3" & (DS6456[which(DS6456$TelefonicaConfiguration == input$Config),1] %in% cabsx2_B2B3), 2,
                                    ifelse((substr(v6A(),8,9) == "id" | substr(v6A(),20,21) == "id" | substr(v6A(),46,47) == "id") & vSCD() == "New Build", 1,
                                           ifelse((substr(v6A(),8,9) == "id" | substr(v6A(),20,21) == "id" | substr(v6A(),46,47) == "id") & vSCD() == "B1-B3" & !(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),1] %in% cabsx2_B1B3), 1,
                                                  ifelse((substr(v6A(),8,9) == "id" | substr(v6A(),20,21) == "id" | substr(v6A(),46,47) == "id") & vSCD() == "B2-B3" & !(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),1] %in% cabsx2_B2B3), 1,
                                                         0)))))
  
  # RBS6102
  ProdInv$Qty[125] <- ifelse((substr(v6A(),8,9) == "oa" | substr(v6A(),20,21) == "oa" | substr(v6A(),20,21) == "oc" | substr(v6A(),20,21) == "of" | substr(v6A(),46,47) == "oa") &
                               vSCD() == "B1-B3" & (DS6456[which(DS6456$TelefonicaConfiguration == input$Config),1] %in% cabsx2_B1B3), 2,
                             ifelse((substr(v6A(),8,9) == "oa" | substr(v6A(),20,21) == "oa" | substr(v6A(),20,21) == "oc" | substr(v6A(),20,21) == "of" | substr(v6A(),46,47) == "oa") &
                                      vSCD() == "B2-B3" & (DS6456[which(DS6456$TelefonicaConfiguration == input$Config),1] %in% cabsx2_B2B3), 2,
                                    ifelse((substr(v6A(),8,9) == "oa" | substr(v6A(),20,21) == "oa" | substr(v6A(),20,21) == "oc" | substr(v6A(),20,21) == "of" | substr(v6A(),46,47) == "oa") &
                                             vSCD() == "New Build", 1,
                                           ifelse((substr(v6A(),8,9) == "oa" | substr(v6A(),20,21) == "oa" | substr(v6A(),20,21) == "oc" | substr(v6A(),20,21) == "of" | substr(v6A(),46,47) == "oa") &
                                                    vSCD() == "B1-B3" & !(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),1] %in% cabsx2_B1B3), 1,
                                                  ifelse((substr(v6A(),8,9) == "oa" | substr(v6A(),20,21) == "oa" | substr(v6A(),20,21) == "oc" | substr(v6A(),20,21) == "of" | substr(v6A(),46,47) == "oa") &
                                                           vSCD() == "B2-B3" & !(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),1] %in% cabsx2_B2B3), 1,0)))))
  
                                                      
  
  # York cabinet
  ProdInv$Qty[132] <- ifelse(substr(v6A(),46,47) == "oy" | substr(v6A(),46,47) == "of" | substr(v6A(),46,47) == "ys",1,0)
  
    
  # Lancaster / Shire / 3rd party cabinet
  ProdInv$Qty[134] <- ifelse(substr(v6A(),46,47) == "ys" & HLD() != HLDNB,1,0)

  ProdInv$Qty[135] <- ifelse(substr(v6A(),46,47) == "ys" & HLD() == HLDNB,1,0)

  
  
  # RBS6202
  ProdInv$Qty[126] <- ifelse(substr(v6A(),8,9) == "sc" | substr(v6A(),20,21) == "oc" | substr(v6A(),20,21) == "sc" | substr(v6A(),46,47) == "sc", 1, 0)
  
  # RBS6147
  ProdInv$Qty[127] <- ifelse(substr(v6A(),20,21) == "io" | substr(v6A(),46,47) == "io", 1, 0)
  
  # RBS6601
  ProdInv$Qty[128] <- ifelse(substr(v6A(),8,9) == "ir" | substr(v6A(),20,21) == "ir" | substr(v6A(),20,21) == "ib" | substr(v6A(),46,47) == "ir" | substr(v6A(),46,47) == "ib", 1, 0)
  
  # 19" Rack
  ProdInv$Qty[129] <- ifelse(substr(v6A(),8,9) == "ir" | substr(v6A(),20,21) == "ir" | substr(v6A(),20,21) == "ib" | substr(v6A(),46,47) == "ir" | substr(v6A(),46,47) == "ib", 1, 0)
  
  # RBS6140/6150
  ProdInv$Qty[130] <- ifelse(substr(v6A(),8,9) == "ob" | substr(v6A(),20,21) == "ob" | substr(v6A(),46,47) == "ob", 1, 0)
  
  # RBS6301
  ProdInv$Qty[131] <- ifelse(substr(v6A(),46,47) == "or", 1, 0)
  
  # Eltek (Indoor/Outdoor)
  ProdInv$Qty[133] <- ifelse(substr(v6A(),8,9) == "ie" | substr(v6A(),20,21) == "ie" | substr(v6A(),46,47) == "ie" |
                               substr(v6A(),8,9) == "oe" | substr(v6A(),20,21) == "oe" | substr(v6A(),46,47) == "oe", 1, 0)
  

# reserved additional Cab/Enclosure dataframe positions, set to zero until required #
  # # RBS6320
  # ProdInv$Qty[134] <- ifelse(substr(v6A(),8,9) == "od" | substr(v6A(),20,21) == "od" | substr(v6A(),46,47) == "od", 1, 0)
  # 
  # # RBS6501/RBS6502
  # ProdInv$Qty[135] <- ifelse("Dark" %in% input$Config | "6502" %in% input$Config, 0, ifelse(substr(v6A(),20,21) == "sm" | substr(v6A(),46,47) == "sm", 1, 0))
  

  
# Calculating and populating the total power consumption based on the unit power consumption multiplied by the quantity #
  
  # Idle #
  
  ProdInv$IdlePCtotal[1]<- ProdInv$Qty[1] *  ProdInv$IdlePCunit[1]
  ProdInv$IdlePCtotal[2]<- ProdInv$Qty[2] *  ProdInv$IdlePCunit[2]
  ProdInv$IdlePCtotal[3]<- ProdInv$Qty[3] *  ProdInv$IdlePCunit[3]
  ProdInv$IdlePCtotal[4]<- ProdInv$Qty[4] *  ProdInv$IdlePCunit[4]
  ProdInv$IdlePCtotal[5]<- ProdInv$Qty[5] *  ProdInv$IdlePCunit[5]
  ProdInv$IdlePCtotal[6]<- ProdInv$Qty[6] *  ProdInv$IdlePCunit[6]
  ProdInv$IdlePCtotal[7]<- ProdInv$Qty[7] *  ProdInv$IdlePCunit[7]
  ProdInv$IdlePCtotal[8]<- ProdInv$Qty[8] *  ProdInv$IdlePCunit[8]
  ProdInv$IdlePCtotal[9]<- ProdInv$Qty[9] *  ProdInv$IdlePCunit[9]
  ProdInv$IdlePCtotal[10]<- ProdInv$Qty[10] *  ProdInv$IdlePCunit[10]
  ProdInv$IdlePCtotal[11]<- ProdInv$Qty[11] *  ProdInv$IdlePCunit[11]
  ProdInv$IdlePCtotal[12]<- ProdInv$Qty[12] *  ProdInv$IdlePCunit[12]
  ProdInv$IdlePCtotal[13]<- ProdInv$Qty[13] *  ProdInv$IdlePCunit[13]
  ProdInv$IdlePCtotal[14]<- ProdInv$Qty[14] *  ProdInv$IdlePCunit[14]
  ProdInv$IdlePCtotal[15]<- ProdInv$Qty[15] *  ProdInv$IdlePCunit[15]
  ProdInv$IdlePCtotal[16]<- ProdInv$Qty[16] *  ProdInv$IdlePCunit[16]
  ProdInv$IdlePCtotal[17]<- ProdInv$Qty[17] *  ProdInv$IdlePCunit[17]
  ProdInv$IdlePCtotal[18]<- ProdInv$Qty[18] *  ProdInv$IdlePCunit[18]
  ProdInv$IdlePCtotal[19]<- ProdInv$Qty[19] *  ProdInv$IdlePCunit[19]
  ProdInv$IdlePCtotal[20]<- ProdInv$Qty[20] *  ProdInv$IdlePCunit[20]
  ProdInv$IdlePCtotal[21]<- ProdInv$Qty[21] *  ProdInv$IdlePCunit[21]
  ProdInv$IdlePCtotal[22]<- ProdInv$Qty[22] *  ProdInv$IdlePCunit[22]
  ProdInv$IdlePCtotal[23]<- ProdInv$Qty[23] *  ProdInv$IdlePCunit[23]
  ProdInv$IdlePCtotal[24]<- ProdInv$Qty[24] *  ProdInv$IdlePCunit[24]
  ProdInv$IdlePCtotal[25]<- ProdInv$Qty[25] *  ProdInv$IdlePCunit[25]
  ProdInv$IdlePCtotal[26]<- ProdInv$Qty[26] *  ProdInv$IdlePCunit[26]
  ProdInv$IdlePCtotal[27]<- ProdInv$Qty[27] *  ProdInv$IdlePCunit[27]
  ProdInv$IdlePCtotal[28]<- ProdInv$Qty[28] *  ProdInv$IdlePCunit[28]
  ProdInv$IdlePCtotal[29]<- ProdInv$Qty[29] *  ProdInv$IdlePCunit[29]
  ProdInv$IdlePCtotal[30]<- ProdInv$Qty[30] *  ProdInv$IdlePCunit[30]
  ProdInv$IdlePCtotal[31]<- ProdInv$Qty[31] *  ProdInv$IdlePCunit[31]
  ProdInv$IdlePCtotal[32]<- ProdInv$Qty[32] *  ProdInv$IdlePCunit[32]
  ProdInv$IdlePCtotal[33]<- ProdInv$Qty[33] *  ProdInv$IdlePCunit[33]
  ProdInv$IdlePCtotal[34]<- ProdInv$Qty[34] *  ProdInv$IdlePCunit[34]
  ProdInv$IdlePCtotal[35]<- ProdInv$Qty[35] *  ProdInv$IdlePCunit[35]
  ProdInv$IdlePCtotal[36]<- ProdInv$Qty[36] *  ProdInv$IdlePCunit[36]
  ProdInv$IdlePCtotal[37]<- ProdInv$Qty[37] *  ProdInv$IdlePCunit[37]
  ProdInv$IdlePCtotal[38]<- ProdInv$Qty[38] *  ProdInv$IdlePCunit[38]
  ProdInv$IdlePCtotal[39]<- ProdInv$Qty[39] *  ProdInv$IdlePCunit[39]
  ProdInv$IdlePCtotal[40]<- ProdInv$Qty[40] *  ProdInv$IdlePCunit[40]
  ProdInv$IdlePCtotal[41]<- ProdInv$Qty[41] *  ProdInv$IdlePCunit[41]
  ProdInv$IdlePCtotal[42]<- ProdInv$Qty[42] *  ProdInv$IdlePCunit[42]
  ProdInv$IdlePCtotal[43]<- ProdInv$Qty[43] *  ProdInv$IdlePCunit[43]
  ProdInv$IdlePCtotal[44]<- ProdInv$Qty[44] *  ProdInv$IdlePCunit[44]
  ProdInv$IdlePCtotal[45]<- ProdInv$Qty[45] *  ProdInv$IdlePCunit[45]
  ProdInv$IdlePCtotal[46]<- ProdInv$Qty[46] *  ProdInv$IdlePCunit[46]
  ProdInv$IdlePCtotal[47]<- ProdInv$Qty[47] *  ProdInv$IdlePCunit[47]
  ProdInv$IdlePCtotal[48]<- ProdInv$Qty[48] *  ProdInv$IdlePCunit[48]
  ProdInv$IdlePCtotal[49]<- ProdInv$Qty[49] *  ProdInv$IdlePCunit[49]
  ProdInv$IdlePCtotal[50]<- ProdInv$Qty[50] *  ProdInv$IdlePCunit[50]
  ProdInv$IdlePCtotal[51]<- ProdInv$Qty[51] *  ProdInv$IdlePCunit[51]
  ProdInv$IdlePCtotal[52]<- ProdInv$Qty[52] *  ProdInv$IdlePCunit[52]
  ProdInv$IdlePCtotal[53]<- ProdInv$Qty[53] *  ProdInv$IdlePCunit[53]
  ProdInv$IdlePCtotal[54]<- ProdInv$Qty[54] *  ProdInv$IdlePCunit[54]
  ProdInv$IdlePCtotal[55]<- ProdInv$Qty[55] *  ProdInv$IdlePCunit[55]
  ProdInv$IdlePCtotal[56]<- ProdInv$Qty[56] *  ProdInv$IdlePCunit[56]
  ProdInv$IdlePCtotal[57]<- ProdInv$Qty[57] *  ProdInv$IdlePCunit[57]
  ProdInv$IdlePCtotal[58]<- ProdInv$Qty[58] *  ProdInv$IdlePCunit[58]
  ProdInv$IdlePCtotal[59]<- ProdInv$Qty[59] *  ProdInv$IdlePCunit[59]
  ProdInv$IdlePCtotal[60]<- ProdInv$Qty[60] *  ProdInv$IdlePCunit[60]
  ProdInv$IdlePCtotal[61]<- ProdInv$Qty[61] *  ProdInv$IdlePCunit[61]
  ProdInv$IdlePCtotal[62]<- ProdInv$Qty[62] *  ProdInv$IdlePCunit[62]
  ProdInv$IdlePCtotal[63]<- ProdInv$Qty[63] *  ProdInv$IdlePCunit[63]
  ProdInv$IdlePCtotal[64]<- ProdInv$Qty[64] *  ProdInv$IdlePCunit[64]
  ProdInv$IdlePCtotal[65]<- ProdInv$Qty[65] *  ProdInv$IdlePCunit[65]
  ProdInv$IdlePCtotal[66]<- ProdInv$Qty[66] *  ProdInv$IdlePCunit[66]
  ProdInv$IdlePCtotal[67]<- ProdInv$Qty[67] *  ProdInv$IdlePCunit[67]
  ProdInv$IdlePCtotal[68]<- ProdInv$Qty[68] *  ProdInv$IdlePCunit[68]
  ProdInv$IdlePCtotal[69]<- ProdInv$Qty[69] *  ProdInv$IdlePCunit[69]
  ProdInv$IdlePCtotal[70]<- ProdInv$Qty[70] *  ProdInv$IdlePCunit[70]
  ProdInv$IdlePCtotal[71]<- ProdInv$Qty[71] *  ProdInv$IdlePCunit[71]
  ProdInv$IdlePCtotal[72]<- ProdInv$Qty[72] *  ProdInv$IdlePCunit[72]
  ProdInv$IdlePCtotal[73]<- ProdInv$Qty[73] *  ProdInv$IdlePCunit[73]
  ProdInv$IdlePCtotal[74]<- ProdInv$Qty[74] *  ProdInv$IdlePCunit[74]
  ProdInv$IdlePCtotal[75]<- ProdInv$Qty[75] *  ProdInv$IdlePCunit[75]
  ProdInv$IdlePCtotal[76]<- ProdInv$Qty[76] *  ProdInv$IdlePCunit[76]
  ProdInv$IdlePCtotal[77]<- ProdInv$Qty[77] *  ProdInv$IdlePCunit[77]
  ProdInv$IdlePCtotal[78]<- ProdInv$Qty[78] *  ProdInv$IdlePCunit[78]
  ProdInv$IdlePCtotal[79]<- ProdInv$Qty[79] *  ProdInv$IdlePCunit[79]
  ProdInv$IdlePCtotal[80]<- ProdInv$Qty[80] *  ProdInv$IdlePCunit[80]
  ProdInv$IdlePCtotal[81]<- ProdInv$Qty[81] *  ProdInv$IdlePCunit[81]
  ProdInv$IdlePCtotal[82]<- ProdInv$Qty[82] *  ProdInv$IdlePCunit[82]
  ProdInv$IdlePCtotal[83]<- ProdInv$Qty[83] *  ProdInv$IdlePCunit[83]
  ProdInv$IdlePCtotal[84]<- ProdInv$Qty[84] *  ProdInv$IdlePCunit[84]
  ProdInv$IdlePCtotal[85]<- ProdInv$Qty[85] *  ProdInv$IdlePCunit[85]
  ProdInv$IdlePCtotal[86]<- ProdInv$Qty[86] *  ProdInv$IdlePCunit[86]
  ProdInv$IdlePCtotal[87]<- ProdInv$Qty[87] *  ProdInv$IdlePCunit[87]
  ProdInv$IdlePCtotal[88]<- ProdInv$Qty[88] *  ProdInv$IdlePCunit[88]
  ProdInv$IdlePCtotal[89]<- ProdInv$Qty[89] *  ProdInv$IdlePCunit[89]
  ProdInv$IdlePCtotal[90]<- ProdInv$Qty[90] *  ProdInv$IdlePCunit[90]
  ProdInv$IdlePCtotal[91]<- ProdInv$Qty[91] *  ProdInv$IdlePCunit[91]
  ProdInv$IdlePCtotal[92]<- ProdInv$Qty[92] *  ProdInv$IdlePCunit[92]
  ProdInv$IdlePCtotal[93]<- ProdInv$Qty[93] *  ProdInv$IdlePCunit[93]
  ProdInv$IdlePCtotal[94]<- ProdInv$Qty[94] *  ProdInv$IdlePCunit[94]
  ProdInv$IdlePCtotal[95]<- ProdInv$Qty[95] *  ProdInv$IdlePCunit[95]
  ProdInv$IdlePCtotal[96]<- ProdInv$Qty[96] *  ProdInv$IdlePCunit[96]
  ProdInv$IdlePCtotal[97]<- ProdInv$Qty[97] *  ProdInv$IdlePCunit[97]
  ProdInv$IdlePCtotal[98]<- ProdInv$Qty[98] *  ProdInv$IdlePCunit[98]
  ProdInv$IdlePCtotal[99]<- ProdInv$Qty[99] *  ProdInv$IdlePCunit[99]
  ProdInv$IdlePCtotal[100]<- ProdInv$Qty[100] *  ProdInv$IdlePCunit[100]
  ProdInv$IdlePCtotal[101]<- ProdInv$Qty[101] *  ProdInv$IdlePCunit[101]
  ProdInv$IdlePCtotal[102]<- ProdInv$Qty[102] *  ProdInv$IdlePCunit[102]
  ProdInv$IdlePCtotal[103]<- ProdInv$Qty[103] *  ProdInv$IdlePCunit[103]
  ProdInv$IdlePCtotal[104]<- ProdInv$Qty[104] *  ProdInv$IdlePCunit[104]
  ProdInv$IdlePCtotal[105]<- ProdInv$Qty[105] *  ProdInv$IdlePCunit[105]
  ProdInv$IdlePCtotal[106]<- ProdInv$Qty[106] *  ProdInv$IdlePCunit[106]
  ProdInv$IdlePCtotal[107]<- ProdInv$Qty[107] *  ProdInv$IdlePCunit[107]
  ProdInv$IdlePCtotal[108]<- ProdInv$Qty[108] *  ProdInv$IdlePCunit[108]
  ProdInv$IdlePCtotal[109]<- ProdInv$Qty[109] *  ProdInv$IdlePCunit[109]
  ProdInv$IdlePCtotal[110]<- ProdInv$Qty[110] *  ProdInv$IdlePCunit[110]
  ProdInv$IdlePCtotal[111]<- ProdInv$Qty[111] *  ProdInv$IdlePCunit[111]
  ProdInv$IdlePCtotal[112]<- ProdInv$Qty[112] *  ProdInv$IdlePCunit[112]
  ProdInv$IdlePCtotal[113]<- ProdInv$Qty[113] *  ProdInv$IdlePCunit[113]
  ProdInv$IdlePCtotal[114]<- ProdInv$Qty[114] *  ProdInv$IdlePCunit[114]
  ProdInv$IdlePCtotal[115]<- ProdInv$Qty[115] *  ProdInv$IdlePCunit[115]
  ProdInv$IdlePCtotal[116]<- ProdInv$Qty[116] *  ProdInv$IdlePCunit[116]
  ProdInv$IdlePCtotal[117]<- ProdInv$Qty[117] *  ProdInv$IdlePCunit[117]
  ProdInv$IdlePCtotal[118]<- ProdInv$Qty[118] *  ProdInv$IdlePCunit[118]
  ProdInv$IdlePCtotal[119]<- ProdInv$Qty[119] *  ProdInv$IdlePCunit[119]
  ProdInv$IdlePCtotal[120]<- ProdInv$Qty[120] *  ProdInv$IdlePCunit[120]
  ProdInv$IdlePCtotal[121]<- ProdInv$Qty[121] *  ProdInv$IdlePCunit[121]
  ProdInv$IdlePCtotal[122]<- ProdInv$Qty[122] *  ProdInv$IdlePCunit[122]
  ProdInv$IdlePCtotal[123]<- ProdInv$Qty[123] *  ProdInv$IdlePCunit[123]
  ProdInv$IdlePCtotal[124]<- ProdInv$Qty[124] *  ProdInv$IdlePCunit[124]
  ProdInv$IdlePCtotal[125]<- ProdInv$Qty[125] *  ProdInv$IdlePCunit[125]
  ProdInv$IdlePCtotal[126]<- ProdInv$Qty[126] *  ProdInv$IdlePCunit[126]
  ProdInv$IdlePCtotal[127]<- ProdInv$Qty[127] *  ProdInv$IdlePCunit[127]
  ProdInv$IdlePCtotal[128]<- ProdInv$Qty[128] *  ProdInv$IdlePCunit[128]
  ProdInv$IdlePCtotal[129]<- ProdInv$Qty[129] *  ProdInv$IdlePCunit[129]
  ProdInv$IdlePCtotal[130]<- ProdInv$Qty[130] *  ProdInv$IdlePCunit[130]
  ProdInv$IdlePCtotal[131]<- ProdInv$Qty[131] *  ProdInv$IdlePCunit[131]
  ProdInv$IdlePCtotal[132]<- ProdInv$Qty[132] *  ProdInv$IdlePCunit[132]
  ProdInv$IdlePCtotal[133]<- ProdInv$Qty[133] *  ProdInv$IdlePCunit[133]
  ProdInv$IdlePCtotal[134]<- ProdInv$Qty[134] *  ProdInv$IdlePCunit[134]
  
  ProdInv$IdleOPtotal[1]<- ProdInv$Qty[1] *  ProdInv$IdleOPunit[1]
  ProdInv$IdleOPtotal[2]<- ProdInv$Qty[2] *  ProdInv$IdleOPunit[2]
  ProdInv$IdleOPtotal[3]<- ProdInv$Qty[3] *  ProdInv$IdleOPunit[3]
  ProdInv$IdleOPtotal[4]<- ProdInv$Qty[4] *  ProdInv$IdleOPunit[4]
  ProdInv$IdleOPtotal[5]<- ProdInv$Qty[5] *  ProdInv$IdleOPunit[5]
  ProdInv$IdleOPtotal[6]<- ProdInv$Qty[6] *  ProdInv$IdleOPunit[6]
  ProdInv$IdleOPtotal[7]<- ProdInv$Qty[7] *  ProdInv$IdleOPunit[7]
  ProdInv$IdleOPtotal[8]<- ProdInv$Qty[8] *  ProdInv$IdleOPunit[8]
  ProdInv$IdleOPtotal[9]<- ProdInv$Qty[9] *  ProdInv$IdleOPunit[9]
  ProdInv$IdleOPtotal[10]<- ProdInv$Qty[10] *  ProdInv$IdleOPunit[10]
  ProdInv$IdleOPtotal[11]<- ProdInv$Qty[11] *  ProdInv$IdleOPunit[11]
  ProdInv$IdleOPtotal[12]<- ProdInv$Qty[12] *  ProdInv$IdleOPunit[12]
  ProdInv$IdleOPtotal[13]<- ProdInv$Qty[13] *  ProdInv$IdleOPunit[13]
  ProdInv$IdleOPtotal[14]<- ProdInv$Qty[14] *  ProdInv$IdleOPunit[14]
  ProdInv$IdleOPtotal[15]<- ProdInv$Qty[15] *  ProdInv$IdleOPunit[15]
  ProdInv$IdleOPtotal[16]<- ProdInv$Qty[16] *  ProdInv$IdleOPunit[16]
  ProdInv$IdleOPtotal[17]<- ProdInv$Qty[17] *  ProdInv$IdleOPunit[17]
  ProdInv$IdleOPtotal[18]<- ProdInv$Qty[18] *  ProdInv$IdleOPunit[18]
  ProdInv$IdleOPtotal[19]<- ProdInv$Qty[19] *  ProdInv$IdleOPunit[19]
  ProdInv$IdleOPtotal[20]<- ProdInv$Qty[20] *  ProdInv$IdleOPunit[20]
  ProdInv$IdleOPtotal[21]<- ProdInv$Qty[21] *  ProdInv$IdleOPunit[21]
  ProdInv$IdleOPtotal[22]<- ProdInv$Qty[22] *  ProdInv$IdleOPunit[22]
  ProdInv$IdleOPtotal[23]<- ProdInv$Qty[23] *  ProdInv$IdleOPunit[23]
  ProdInv$IdleOPtotal[24]<- ProdInv$Qty[24] *  ProdInv$IdleOPunit[24]
  ProdInv$IdleOPtotal[25]<- ProdInv$Qty[25] *  ProdInv$IdleOPunit[25]
  ProdInv$IdleOPtotal[26]<- ProdInv$Qty[26] *  ProdInv$IdleOPunit[26]
  ProdInv$IdleOPtotal[27]<- ProdInv$Qty[27] *  ProdInv$IdleOPunit[27]
  ProdInv$IdleOPtotal[28]<- ProdInv$Qty[28] *  ProdInv$IdleOPunit[28]
  ProdInv$IdleOPtotal[29]<- ProdInv$Qty[29] *  ProdInv$IdleOPunit[29]
  ProdInv$IdleOPtotal[30]<- ProdInv$Qty[30] *  ProdInv$IdleOPunit[30]
  ProdInv$IdleOPtotal[31]<- ProdInv$Qty[31] *  ProdInv$IdleOPunit[31]
  ProdInv$IdleOPtotal[32]<- ProdInv$Qty[32] *  ProdInv$IdleOPunit[32]
  ProdInv$IdleOPtotal[33]<- ProdInv$Qty[33] *  ProdInv$IdleOPunit[33]
  ProdInv$IdleOPtotal[34]<- ProdInv$Qty[34] *  ProdInv$IdleOPunit[34]
  ProdInv$IdleOPtotal[35]<- ProdInv$Qty[35] *  ProdInv$IdleOPunit[35]
  ProdInv$IdleOPtotal[36]<- ProdInv$Qty[36] *  ProdInv$IdleOPunit[36]
  ProdInv$IdleOPtotal[37]<- ProdInv$Qty[37] *  ProdInv$IdleOPunit[37]
  ProdInv$IdleOPtotal[38]<- ProdInv$Qty[38] *  ProdInv$IdleOPunit[38]
  ProdInv$IdleOPtotal[39]<- ProdInv$Qty[39] *  ProdInv$IdleOPunit[39]
  ProdInv$IdleOPtotal[40]<- ProdInv$Qty[40] *  ProdInv$IdleOPunit[40]
  ProdInv$IdleOPtotal[41]<- ProdInv$Qty[41] *  ProdInv$IdleOPunit[41]
  ProdInv$IdleOPtotal[42]<- ProdInv$Qty[42] *  ProdInv$IdleOPunit[42]
  ProdInv$IdleOPtotal[43]<- ProdInv$Qty[43] *  ProdInv$IdleOPunit[43]
  ProdInv$IdleOPtotal[44]<- ProdInv$Qty[44] *  ProdInv$IdleOPunit[44]
  ProdInv$IdleOPtotal[45]<- ProdInv$Qty[45] *  ProdInv$IdleOPunit[45]
  ProdInv$IdleOPtotal[46]<- ProdInv$Qty[46] *  ProdInv$IdleOPunit[46]
  ProdInv$IdleOPtotal[47]<- ProdInv$Qty[47] *  ProdInv$IdleOPunit[47]
  ProdInv$IdleOPtotal[48]<- ProdInv$Qty[48] *  ProdInv$IdleOPunit[48]
  ProdInv$IdleOPtotal[49]<- ProdInv$Qty[49] *  ProdInv$IdleOPunit[49]
  ProdInv$IdleOPtotal[50]<- ProdInv$Qty[50] *  ProdInv$IdleOPunit[50]
  ProdInv$IdleOPtotal[51]<- ProdInv$Qty[51] *  ProdInv$IdleOPunit[51]
  ProdInv$IdleOPtotal[52]<- ProdInv$Qty[52] *  ProdInv$IdleOPunit[52]
  ProdInv$IdleOPtotal[53]<- ProdInv$Qty[53] *  ProdInv$IdleOPunit[53]
  ProdInv$IdleOPtotal[54]<- ProdInv$Qty[54] *  ProdInv$IdleOPunit[54]
  ProdInv$IdleOPtotal[55]<- ProdInv$Qty[55] *  ProdInv$IdleOPunit[55]
  ProdInv$IdleOPtotal[56]<- ProdInv$Qty[56] *  ProdInv$IdleOPunit[56]
  ProdInv$IdleOPtotal[57]<- ProdInv$Qty[57] *  ProdInv$IdleOPunit[57]
  ProdInv$IdleOPtotal[58]<- ProdInv$Qty[58] *  ProdInv$IdleOPunit[58]
  ProdInv$IdleOPtotal[59]<- ProdInv$Qty[59] *  ProdInv$IdleOPunit[59]
  ProdInv$IdleOPtotal[60]<- ProdInv$Qty[60] *  ProdInv$IdleOPunit[60]
  ProdInv$IdleOPtotal[61]<- ProdInv$Qty[61] *  ProdInv$IdleOPunit[61]
  ProdInv$IdleOPtotal[62]<- ProdInv$Qty[62] *  ProdInv$IdleOPunit[62]
  ProdInv$IdleOPtotal[63]<- ProdInv$Qty[63] *  ProdInv$IdleOPunit[63]
  ProdInv$IdleOPtotal[64]<- ProdInv$Qty[64] *  ProdInv$IdleOPunit[64]
  ProdInv$IdleOPtotal[65]<- ProdInv$Qty[65] *  ProdInv$IdleOPunit[65]
  ProdInv$IdleOPtotal[66]<- ProdInv$Qty[66] *  ProdInv$IdleOPunit[66]
  ProdInv$IdleOPtotal[67]<- ProdInv$Qty[67] *  ProdInv$IdleOPunit[67]
  ProdInv$IdleOPtotal[68]<- ProdInv$Qty[68] *  ProdInv$IdleOPunit[68]
  ProdInv$IdleOPtotal[69]<- ProdInv$Qty[69] *  ProdInv$IdleOPunit[69]
  ProdInv$IdleOPtotal[70]<- ProdInv$Qty[70] *  ProdInv$IdleOPunit[70]
  ProdInv$IdleOPtotal[71]<- ProdInv$Qty[71] *  ProdInv$IdleOPunit[71]
  ProdInv$IdleOPtotal[72]<- ProdInv$Qty[72] *  ProdInv$IdleOPunit[72]
  ProdInv$IdleOPtotal[73]<- ProdInv$Qty[73] *  ProdInv$IdleOPunit[73]
  ProdInv$IdleOPtotal[74]<- ProdInv$Qty[74] *  ProdInv$IdleOPunit[74]
  ProdInv$IdleOPtotal[75]<- ProdInv$Qty[75] *  ProdInv$IdleOPunit[75]
  ProdInv$IdleOPtotal[76]<- ProdInv$Qty[76] *  ProdInv$IdleOPunit[76]
  ProdInv$IdleOPtotal[77]<- ProdInv$Qty[77] *  ProdInv$IdleOPunit[77]
  ProdInv$IdleOPtotal[78]<- ProdInv$Qty[78] *  ProdInv$IdleOPunit[78]
  ProdInv$IdleOPtotal[79]<- ProdInv$Qty[79] *  ProdInv$IdleOPunit[79]
  ProdInv$IdleOPtotal[80]<- ProdInv$Qty[80] *  ProdInv$IdleOPunit[80]
  ProdInv$IdleOPtotal[81]<- ProdInv$Qty[81] *  ProdInv$IdleOPunit[81]
  ProdInv$IdleOPtotal[82]<- ProdInv$Qty[82] *  ProdInv$IdleOPunit[82]
  ProdInv$IdleOPtotal[83]<- ProdInv$Qty[83] *  ProdInv$IdleOPunit[83]
  ProdInv$IdleOPtotal[84]<- ProdInv$Qty[84] *  ProdInv$IdleOPunit[84]
  ProdInv$IdleOPtotal[85]<- ProdInv$Qty[85] *  ProdInv$IdleOPunit[85]
  ProdInv$IdleOPtotal[86]<- ProdInv$Qty[86] *  ProdInv$IdleOPunit[86]
  ProdInv$IdleOPtotal[87]<- ProdInv$Qty[87] *  ProdInv$IdleOPunit[87]
  ProdInv$IdleOPtotal[88]<- ProdInv$Qty[88] *  ProdInv$IdleOPunit[88]
  ProdInv$IdleOPtotal[89]<- ProdInv$Qty[89] *  ProdInv$IdleOPunit[89]
  ProdInv$IdleOPtotal[90]<- ProdInv$Qty[90] *  ProdInv$IdleOPunit[90]
  ProdInv$IdleOPtotal[91]<- ProdInv$Qty[91] *  ProdInv$IdleOPunit[91]
  ProdInv$IdleOPtotal[92]<- ProdInv$Qty[92] *  ProdInv$IdleOPunit[92]
  ProdInv$IdleOPtotal[93]<- ProdInv$Qty[93] *  ProdInv$IdleOPunit[93]
  ProdInv$IdleOPtotal[94]<- ProdInv$Qty[94] *  ProdInv$IdleOPunit[94]
  ProdInv$IdleOPtotal[95]<- ProdInv$Qty[95] *  ProdInv$IdleOPunit[95]
  ProdInv$IdleOPtotal[96]<- ProdInv$Qty[96] *  ProdInv$IdleOPunit[96]
  ProdInv$IdleOPtotal[97]<- ProdInv$Qty[97] *  ProdInv$IdleOPunit[97]
  ProdInv$IdleOPtotal[98]<- ProdInv$Qty[98] *  ProdInv$IdleOPunit[98]
  ProdInv$IdleOPtotal[99]<- ProdInv$Qty[99] *  ProdInv$IdleOPunit[99]
  ProdInv$IdleOPtotal[100]<- ProdInv$Qty[100] *  ProdInv$IdleOPunit[100]
  ProdInv$IdleOPtotal[101]<- ProdInv$Qty[101] *  ProdInv$IdleOPunit[101]
  ProdInv$IdleOPtotal[102]<- ProdInv$Qty[102] *  ProdInv$IdleOPunit[102]
  ProdInv$IdleOPtotal[103]<- ProdInv$Qty[103] *  ProdInv$IdleOPunit[103]
  ProdInv$IdleOPtotal[104]<- ProdInv$Qty[104] *  ProdInv$IdleOPunit[104]
  ProdInv$IdleOPtotal[105]<- ProdInv$Qty[105] *  ProdInv$IdleOPunit[105]
  ProdInv$IdleOPtotal[106]<- ProdInv$Qty[106] *  ProdInv$IdleOPunit[106]
  ProdInv$IdleOPtotal[107]<- ProdInv$Qty[107] *  ProdInv$IdleOPunit[107]
  ProdInv$IdleOPtotal[108]<- ProdInv$Qty[108] *  ProdInv$IdleOPunit[108]
  ProdInv$IdleOPtotal[109]<- ProdInv$Qty[109] *  ProdInv$IdleOPunit[109]
  ProdInv$IdleOPtotal[110]<- ProdInv$Qty[110] *  ProdInv$IdleOPunit[110]
  ProdInv$IdleOPtotal[111]<- ProdInv$Qty[111] *  ProdInv$IdleOPunit[111]
  ProdInv$IdleOPtotal[112]<- ProdInv$Qty[112] *  ProdInv$IdleOPunit[112]
  ProdInv$IdleOPtotal[113]<- ProdInv$Qty[113] *  ProdInv$IdleOPunit[113]
  ProdInv$IdleOPtotal[114]<- ProdInv$Qty[114] *  ProdInv$IdleOPunit[114]
  ProdInv$IdleOPtotal[115]<- ProdInv$Qty[115] *  ProdInv$IdleOPunit[115]
  ProdInv$IdleOPtotal[116]<- ProdInv$Qty[116] *  ProdInv$IdleOPunit[116]
  ProdInv$IdleOPtotal[117]<- ProdInv$Qty[117] *  ProdInv$IdleOPunit[117]
  ProdInv$IdleOPtotal[118]<- ProdInv$Qty[118] *  ProdInv$IdleOPunit[118]
  ProdInv$IdleOPtotal[119]<- ProdInv$Qty[119] *  ProdInv$IdleOPunit[119]
  ProdInv$IdleOPtotal[120]<- ProdInv$Qty[120] *  ProdInv$IdleOPunit[120]
  ProdInv$IdleOPtotal[121]<- ProdInv$Qty[121] *  ProdInv$IdleOPunit[121]
  ProdInv$IdleOPtotal[122]<- ProdInv$Qty[122] *  ProdInv$IdleOPunit[122]
  ProdInv$IdleOPtotal[123]<- ProdInv$Qty[123] *  ProdInv$IdleOPunit[123]
  ProdInv$IdleOPtotal[124]<- ProdInv$Qty[124] *  ProdInv$IdleOPunit[124]
  ProdInv$IdleOPtotal[125]<- ProdInv$Qty[125] *  ProdInv$IdleOPunit[125]
  ProdInv$IdleOPtotal[126]<- ProdInv$Qty[126] *  ProdInv$IdleOPunit[126]
  ProdInv$IdleOPtotal[127]<- ProdInv$Qty[127] *  ProdInv$IdleOPunit[127]
  ProdInv$IdleOPtotal[128]<- ProdInv$Qty[128] *  ProdInv$IdleOPunit[128]
  ProdInv$IdleOPtotal[129]<- ProdInv$Qty[129] *  ProdInv$IdleOPunit[129]
  ProdInv$IdleOPtotal[130]<- ProdInv$Qty[130] *  ProdInv$IdleOPunit[130]
  ProdInv$IdleOPtotal[131]<- ProdInv$Qty[131] *  ProdInv$IdleOPunit[131]
  ProdInv$IdleOPtotal[132]<- ProdInv$Qty[132] *  ProdInv$IdleOPunit[132]
  ProdInv$IdleOPtotal[133]<- ProdInv$Qty[133] *  ProdInv$IdleOPunit[133]
  ProdInv$IdleOPtotal[134]<- ProdInv$Qty[134] *  ProdInv$IdleOPunit[134]
  
  
  ProdInv$IdleHDtotal[1]<- ProdInv$Qty[1] *  ProdInv$IdleHDunit[1]
  ProdInv$IdleHDtotal[2]<- ProdInv$Qty[2] *  ProdInv$IdleHDunit[2]
  ProdInv$IdleHDtotal[3]<- ProdInv$Qty[3] *  ProdInv$IdleHDunit[3]
  ProdInv$IdleHDtotal[4]<- ProdInv$Qty[4] *  ProdInv$IdleHDunit[4]
  ProdInv$IdleHDtotal[5]<- ProdInv$Qty[5] *  ProdInv$IdleHDunit[5]
  ProdInv$IdleHDtotal[6]<- ProdInv$Qty[6] *  ProdInv$IdleHDunit[6]
  ProdInv$IdleHDtotal[7]<- ProdInv$Qty[7] *  ProdInv$IdleHDunit[7]
  ProdInv$IdleHDtotal[8]<- ProdInv$Qty[8] *  ProdInv$IdleHDunit[8]
  ProdInv$IdleHDtotal[9]<- ProdInv$Qty[9] *  ProdInv$IdleHDunit[9]
  ProdInv$IdleHDtotal[10]<- ProdInv$Qty[10] *  ProdInv$IdleHDunit[10]
  ProdInv$IdleHDtotal[11]<- ProdInv$Qty[11] *  ProdInv$IdleHDunit[11]
  ProdInv$IdleHDtotal[12]<- ProdInv$Qty[12] *  ProdInv$IdleHDunit[12]
  ProdInv$IdleHDtotal[13]<- ProdInv$Qty[13] *  ProdInv$IdleHDunit[13]
  ProdInv$IdleHDtotal[14]<- ProdInv$Qty[14] *  ProdInv$IdleHDunit[14]
  ProdInv$IdleHDtotal[15]<- ProdInv$Qty[15] *  ProdInv$IdleHDunit[15]
  ProdInv$IdleHDtotal[16]<- ProdInv$Qty[16] *  ProdInv$IdleHDunit[16]
  ProdInv$IdleHDtotal[17]<- ProdInv$Qty[17] *  ProdInv$IdleHDunit[17]
  ProdInv$IdleHDtotal[18]<- ProdInv$Qty[18] *  ProdInv$IdleHDunit[18]
  ProdInv$IdleHDtotal[19]<- ProdInv$Qty[19] *  ProdInv$IdleHDunit[19]
  ProdInv$IdleHDtotal[20]<- ProdInv$Qty[20] *  ProdInv$IdleHDunit[20]
  ProdInv$IdleHDtotal[21]<- ProdInv$Qty[21] *  ProdInv$IdleHDunit[21]
  ProdInv$IdleHDtotal[22]<- ProdInv$Qty[22] *  ProdInv$IdleHDunit[22]
  ProdInv$IdleHDtotal[23]<- ProdInv$Qty[23] *  ProdInv$IdleHDunit[23]
  ProdInv$IdleHDtotal[24]<- ProdInv$Qty[24] *  ProdInv$IdleHDunit[24]
  ProdInv$IdleHDtotal[25]<- ProdInv$Qty[25] *  ProdInv$IdleHDunit[25]
  ProdInv$IdleHDtotal[26]<- ProdInv$Qty[26] *  ProdInv$IdleHDunit[26]
  ProdInv$IdleHDtotal[27]<- ProdInv$Qty[27] *  ProdInv$IdleHDunit[27]
  ProdInv$IdleHDtotal[28]<- ProdInv$Qty[28] *  ProdInv$IdleHDunit[28]
  ProdInv$IdleHDtotal[29]<- ProdInv$Qty[29] *  ProdInv$IdleHDunit[29]
  ProdInv$IdleHDtotal[30]<- ProdInv$Qty[30] *  ProdInv$IdleHDunit[30]
  ProdInv$IdleHDtotal[31]<- ProdInv$Qty[31] *  ProdInv$IdleHDunit[31]
  ProdInv$IdleHDtotal[32]<- ProdInv$Qty[32] *  ProdInv$IdleHDunit[32]
  ProdInv$IdleHDtotal[33]<- ProdInv$Qty[33] *  ProdInv$IdleHDunit[33]
  ProdInv$IdleHDtotal[34]<- ProdInv$Qty[34] *  ProdInv$IdleHDunit[34]
  ProdInv$IdleHDtotal[35]<- ProdInv$Qty[35] *  ProdInv$IdleHDunit[35]
  ProdInv$IdleHDtotal[36]<- ProdInv$Qty[36] *  ProdInv$IdleHDunit[36]
  ProdInv$IdleHDtotal[37]<- ProdInv$Qty[37] *  ProdInv$IdleHDunit[37]
  ProdInv$IdleHDtotal[38]<- ProdInv$Qty[38] *  ProdInv$IdleHDunit[38]
  ProdInv$IdleHDtotal[39]<- ProdInv$Qty[39] *  ProdInv$IdleHDunit[39]
  ProdInv$IdleHDtotal[40]<- ProdInv$Qty[40] *  ProdInv$IdleHDunit[40]
  ProdInv$IdleHDtotal[41]<- ProdInv$Qty[41] *  ProdInv$IdleHDunit[41]
  ProdInv$IdleHDtotal[42]<- ProdInv$Qty[42] *  ProdInv$IdleHDunit[42]
  ProdInv$IdleHDtotal[43]<- ProdInv$Qty[43] *  ProdInv$IdleHDunit[43]
  ProdInv$IdleHDtotal[44]<- ProdInv$Qty[44] *  ProdInv$IdleHDunit[44]
  ProdInv$IdleHDtotal[45]<- ProdInv$Qty[45] *  ProdInv$IdleHDunit[45]
  ProdInv$IdleHDtotal[46]<- ProdInv$Qty[46] *  ProdInv$IdleHDunit[46]
  ProdInv$IdleHDtotal[47]<- ProdInv$Qty[47] *  ProdInv$IdleHDunit[47]
  ProdInv$IdleHDtotal[48]<- ProdInv$Qty[48] *  ProdInv$IdleHDunit[48]
  ProdInv$IdleHDtotal[49]<- ProdInv$Qty[49] *  ProdInv$IdleHDunit[49]
  ProdInv$IdleHDtotal[50]<- ProdInv$Qty[50] *  ProdInv$IdleHDunit[50]
  ProdInv$IdleHDtotal[51]<- ProdInv$Qty[51] *  ProdInv$IdleHDunit[51]
  ProdInv$IdleHDtotal[52]<- ProdInv$Qty[52] *  ProdInv$IdleHDunit[52]
  ProdInv$IdleHDtotal[53]<- ProdInv$Qty[53] *  ProdInv$IdleHDunit[53]
  ProdInv$IdleHDtotal[54]<- ProdInv$Qty[54] *  ProdInv$IdleHDunit[54]
  ProdInv$IdleHDtotal[55]<- ProdInv$Qty[55] *  ProdInv$IdleHDunit[55]
  ProdInv$IdleHDtotal[56]<- ProdInv$Qty[56] *  ProdInv$IdleHDunit[56]
  ProdInv$IdleHDtotal[57]<- ProdInv$Qty[57] *  ProdInv$IdleHDunit[57]
  ProdInv$IdleHDtotal[58]<- ProdInv$Qty[58] *  ProdInv$IdleHDunit[58]
  ProdInv$IdleHDtotal[59]<- ProdInv$Qty[59] *  ProdInv$IdleHDunit[59]
  ProdInv$IdleHDtotal[60]<- ProdInv$Qty[60] *  ProdInv$IdleHDunit[60]
  ProdInv$IdleHDtotal[61]<- ProdInv$Qty[61] *  ProdInv$IdleHDunit[61]
  ProdInv$IdleHDtotal[62]<- ProdInv$Qty[62] *  ProdInv$IdleHDunit[62]
  ProdInv$IdleHDtotal[63]<- ProdInv$Qty[63] *  ProdInv$IdleHDunit[63]
  ProdInv$IdleHDtotal[64]<- ProdInv$Qty[64] *  ProdInv$IdleHDunit[64]
  ProdInv$IdleHDtotal[65]<- ProdInv$Qty[65] *  ProdInv$IdleHDunit[65]
  ProdInv$IdleHDtotal[66]<- ProdInv$Qty[66] *  ProdInv$IdleHDunit[66]
  ProdInv$IdleHDtotal[67]<- ProdInv$Qty[67] *  ProdInv$IdleHDunit[67]
  ProdInv$IdleHDtotal[68]<- ProdInv$Qty[68] *  ProdInv$IdleHDunit[68]
  ProdInv$IdleHDtotal[69]<- ProdInv$Qty[69] *  ProdInv$IdleHDunit[69]
  ProdInv$IdleHDtotal[70]<- ProdInv$Qty[70] *  ProdInv$IdleHDunit[70]
  ProdInv$IdleHDtotal[71]<- ProdInv$Qty[71] *  ProdInv$IdleHDunit[71]
  ProdInv$IdleHDtotal[72]<- ProdInv$Qty[72] *  ProdInv$IdleHDunit[72]
  ProdInv$IdleHDtotal[73]<- ProdInv$Qty[73] *  ProdInv$IdleHDunit[73]
  ProdInv$IdleHDtotal[74]<- ProdInv$Qty[74] *  ProdInv$IdleHDunit[74]
  ProdInv$IdleHDtotal[75]<- ProdInv$Qty[75] *  ProdInv$IdleHDunit[75]
  ProdInv$IdleHDtotal[76]<- ProdInv$Qty[76] *  ProdInv$IdleHDunit[76]
  ProdInv$IdleHDtotal[77]<- ProdInv$Qty[77] *  ProdInv$IdleHDunit[77]
  ProdInv$IdleHDtotal[78]<- ProdInv$Qty[78] *  ProdInv$IdleHDunit[78]
  ProdInv$IdleHDtotal[79]<- ProdInv$Qty[79] *  ProdInv$IdleHDunit[79]
  ProdInv$IdleHDtotal[80]<- ProdInv$Qty[80] *  ProdInv$IdleHDunit[80]
  ProdInv$IdleHDtotal[81]<- ProdInv$Qty[81] *  ProdInv$IdleHDunit[81]
  ProdInv$IdleHDtotal[82]<- ProdInv$Qty[82] *  ProdInv$IdleHDunit[82]
  ProdInv$IdleHDtotal[83]<- ProdInv$Qty[83] *  ProdInv$IdleHDunit[83]
  ProdInv$IdleHDtotal[84]<- ProdInv$Qty[84] *  ProdInv$IdleHDunit[84]
  ProdInv$IdleHDtotal[85]<- ProdInv$Qty[85] *  ProdInv$IdleHDunit[85]
  ProdInv$IdleHDtotal[86]<- ProdInv$Qty[86] *  ProdInv$IdleHDunit[86]
  ProdInv$IdleHDtotal[87]<- ProdInv$Qty[87] *  ProdInv$IdleHDunit[87]
  ProdInv$IdleHDtotal[88]<- ProdInv$Qty[88] *  ProdInv$IdleHDunit[88]
  ProdInv$IdleHDtotal[89]<- ProdInv$Qty[89] *  ProdInv$IdleHDunit[89]
  ProdInv$IdleHDtotal[90]<- ProdInv$Qty[90] *  ProdInv$IdleHDunit[90]
  ProdInv$IdleHDtotal[91]<- ProdInv$Qty[91] *  ProdInv$IdleHDunit[91]
  ProdInv$IdleHDtotal[92]<- ProdInv$Qty[92] *  ProdInv$IdleHDunit[92]
  ProdInv$IdleHDtotal[93]<- ProdInv$Qty[93] *  ProdInv$IdleHDunit[93]
  ProdInv$IdleHDtotal[94]<- ProdInv$Qty[94] *  ProdInv$IdleHDunit[94]
  ProdInv$IdleHDtotal[95]<- ProdInv$Qty[95] *  ProdInv$IdleHDunit[95]
  ProdInv$IdleHDtotal[96]<- ProdInv$Qty[96] *  ProdInv$IdleHDunit[96]
  ProdInv$IdleHDtotal[97]<- ProdInv$Qty[97] *  ProdInv$IdleHDunit[97]
  ProdInv$IdleHDtotal[98]<- ProdInv$Qty[98] *  ProdInv$IdleHDunit[98]
  ProdInv$IdleHDtotal[99]<- ProdInv$Qty[99] *  ProdInv$IdleHDunit[99]
  ProdInv$IdleHDtotal[100]<- ProdInv$Qty[100] *  ProdInv$IdleHDunit[100]
  ProdInv$IdleHDtotal[101]<- ProdInv$Qty[101] *  ProdInv$IdleHDunit[101]
  ProdInv$IdleHDtotal[102]<- ProdInv$Qty[102] *  ProdInv$IdleHDunit[102]
  ProdInv$IdleHDtotal[103]<- ProdInv$Qty[103] *  ProdInv$IdleHDunit[103]
  ProdInv$IdleHDtotal[104]<- ProdInv$Qty[104] *  ProdInv$IdleHDunit[104]
  ProdInv$IdleHDtotal[105]<- ProdInv$Qty[105] *  ProdInv$IdleHDunit[105]
  ProdInv$IdleHDtotal[106]<- ProdInv$Qty[106] *  ProdInv$IdleHDunit[106]
  ProdInv$IdleHDtotal[107]<- ProdInv$Qty[107] *  ProdInv$IdleHDunit[107]
  ProdInv$IdleHDtotal[108]<- ProdInv$Qty[108] *  ProdInv$IdleHDunit[108]
  ProdInv$IdleHDtotal[109]<- ProdInv$Qty[109] *  ProdInv$IdleHDunit[109]
  ProdInv$IdleHDtotal[110]<- ProdInv$Qty[110] *  ProdInv$IdleHDunit[110]
  ProdInv$IdleHDtotal[111]<- ProdInv$Qty[111] *  ProdInv$IdleHDunit[111]
  ProdInv$IdleHDtotal[112]<- ProdInv$Qty[112] *  ProdInv$IdleHDunit[112]
  ProdInv$IdleHDtotal[113]<- ProdInv$Qty[113] *  ProdInv$IdleHDunit[113]
  ProdInv$IdleHDtotal[114]<- ProdInv$Qty[114] *  ProdInv$IdleHDunit[114]
  ProdInv$IdleHDtotal[115]<- ProdInv$Qty[115] *  ProdInv$IdleHDunit[115]
  ProdInv$IdleHDtotal[116]<- ProdInv$Qty[116] *  ProdInv$IdleHDunit[116]
  ProdInv$IdleHDtotal[117]<- ProdInv$Qty[117] *  ProdInv$IdleHDunit[117]
  ProdInv$IdleHDtotal[118]<- ProdInv$Qty[118] *  ProdInv$IdleHDunit[118]
  ProdInv$IdleHDtotal[119]<- ProdInv$Qty[119] *  ProdInv$IdleHDunit[119]
  ProdInv$IdleHDtotal[120]<- ProdInv$Qty[120] *  ProdInv$IdleHDunit[120]
  ProdInv$IdleHDtotal[121]<- ProdInv$Qty[121] *  ProdInv$IdleHDunit[121]
  ProdInv$IdleHDtotal[122]<- ProdInv$Qty[122] *  ProdInv$IdleHDunit[122]
  ProdInv$IdleHDtotal[123]<- ProdInv$Qty[123] *  ProdInv$IdleHDunit[123]
  ProdInv$IdleHDtotal[124]<- ProdInv$Qty[124] *  ProdInv$IdleHDunit[124]
  ProdInv$IdleHDtotal[125]<- ProdInv$Qty[125] *  ProdInv$IdleHDunit[125]
  ProdInv$IdleHDtotal[126]<- ProdInv$Qty[126] *  ProdInv$IdleHDunit[126]
  ProdInv$IdleHDtotal[127]<- ProdInv$Qty[127] *  ProdInv$IdleHDunit[127]
  ProdInv$IdleHDtotal[128]<- ProdInv$Qty[128] *  ProdInv$IdleHDunit[128]
  ProdInv$IdleHDtotal[129]<- ProdInv$Qty[129] *  ProdInv$IdleHDunit[129]
  ProdInv$IdleHDtotal[130]<- ProdInv$Qty[130] *  ProdInv$IdleHDunit[130]
  ProdInv$IdleHDtotal[131]<- ProdInv$Qty[131] *  ProdInv$IdleHDunit[131]
  ProdInv$IdleHDtotal[132]<- ProdInv$Qty[132] *  ProdInv$IdleHDunit[132]
  ProdInv$IdleHDtotal[133]<- ProdInv$Qty[133] *  ProdInv$IdleHDunit[133]
  ProdInv$IdleHDtotal[134]<- ProdInv$Qty[134] *  ProdInv$IdleHDunit[134]
  
  # Typical #
  
  ProdInv$TypPCtotal[1]<- ProdInv$Qty[1] *  ProdInv$TypPCunit[1]
  ProdInv$TypPCtotal[2]<- ProdInv$Qty[2] *  ProdInv$TypPCunit[2]
  ProdInv$TypPCtotal[3]<- ProdInv$Qty[3] *  ProdInv$TypPCunit[3]
  ProdInv$TypPCtotal[4]<- ProdInv$Qty[4] *  ProdInv$TypPCunit[4]
  ProdInv$TypPCtotal[5]<- ProdInv$Qty[5] *  ProdInv$TypPCunit[5]
  ProdInv$TypPCtotal[6]<- ProdInv$Qty[6] *  ProdInv$TypPCunit[6]
  ProdInv$TypPCtotal[7]<- ProdInv$Qty[7] *  ProdInv$TypPCunit[7]
  ProdInv$TypPCtotal[8]<- ProdInv$Qty[8] *  ProdInv$TypPCunit[8]
  ProdInv$TypPCtotal[9]<- ProdInv$Qty[9] *  ProdInv$TypPCunit[9]
  ProdInv$TypPCtotal[10]<- ProdInv$Qty[10] *  ProdInv$TypPCunit[10]
  ProdInv$TypPCtotal[11]<- ProdInv$Qty[11] *  ProdInv$TypPCunit[11]
  ProdInv$TypPCtotal[12]<- ProdInv$Qty[12] *  ProdInv$TypPCunit[12]
  ProdInv$TypPCtotal[13]<- ProdInv$Qty[13] *  ProdInv$TypPCunit[13]
  ProdInv$TypPCtotal[14]<- ProdInv$Qty[14] *  ProdInv$TypPCunit[14]
  ProdInv$TypPCtotal[15]<- ProdInv$Qty[15] *  ProdInv$TypPCunit[15]
  ProdInv$TypPCtotal[16]<- ProdInv$Qty[16] *  ProdInv$TypPCunit[16]
  ProdInv$TypPCtotal[17]<- ProdInv$Qty[17] *  ProdInv$TypPCunit[17]
  ProdInv$TypPCtotal[18]<- ProdInv$Qty[18] *  ProdInv$TypPCunit[18]
  ProdInv$TypPCtotal[19]<- ProdInv$Qty[19] *  ProdInv$TypPCunit[19]
  ProdInv$TypPCtotal[20]<- ProdInv$Qty[20] *  ProdInv$TypPCunit[20]
  ProdInv$TypPCtotal[21]<- ProdInv$Qty[21] *  ProdInv$TypPCunit[21]
  ProdInv$TypPCtotal[22]<- ProdInv$Qty[22] *  ProdInv$TypPCunit[22]
  ProdInv$TypPCtotal[23]<- ProdInv$Qty[23] *  ProdInv$TypPCunit[23]
  ProdInv$TypPCtotal[24]<- ProdInv$Qty[24] *  ProdInv$TypPCunit[24]
  ProdInv$TypPCtotal[25]<- ProdInv$Qty[25] *  ProdInv$TypPCunit[25]
  ProdInv$TypPCtotal[26]<- ProdInv$Qty[26] *  ProdInv$TypPCunit[26]
  ProdInv$TypPCtotal[27]<- ProdInv$Qty[27] *  ProdInv$TypPCunit[27]
  ProdInv$TypPCtotal[28]<- ProdInv$Qty[28] *  ProdInv$TypPCunit[28]
  ProdInv$TypPCtotal[29]<- ProdInv$Qty[29] *  ProdInv$TypPCunit[29]
  ProdInv$TypPCtotal[30]<- ProdInv$Qty[30] *  ProdInv$TypPCunit[30]
  ProdInv$TypPCtotal[31]<- ProdInv$Qty[31] *  ProdInv$TypPCunit[31]
  ProdInv$TypPCtotal[32]<- ProdInv$Qty[32] *  ProdInv$TypPCunit[32]
  ProdInv$TypPCtotal[33]<- ProdInv$Qty[33] *  ProdInv$TypPCunit[33]
  ProdInv$TypPCtotal[34]<- ProdInv$Qty[34] *  ProdInv$TypPCunit[34]
  ProdInv$TypPCtotal[35]<- ProdInv$Qty[35] *  ProdInv$TypPCunit[35]
  ProdInv$TypPCtotal[36]<- ProdInv$Qty[36] *  ProdInv$TypPCunit[36]
  ProdInv$TypPCtotal[37]<- ProdInv$Qty[37] *  ProdInv$TypPCunit[37]
  ProdInv$TypPCtotal[38]<- ProdInv$Qty[38] *  ProdInv$TypPCunit[38]
  ProdInv$TypPCtotal[39]<- ProdInv$Qty[39] *  ProdInv$TypPCunit[39]
  ProdInv$TypPCtotal[40]<- ProdInv$Qty[40] *  ProdInv$TypPCunit[40]
  ProdInv$TypPCtotal[41]<- ProdInv$Qty[41] *  ProdInv$TypPCunit[41]
  ProdInv$TypPCtotal[42]<- ProdInv$Qty[42] *  ProdInv$TypPCunit[42]
  ProdInv$TypPCtotal[43]<- ProdInv$Qty[43] *  ProdInv$TypPCunit[43]
  ProdInv$TypPCtotal[44]<- ProdInv$Qty[44] *  ProdInv$TypPCunit[44]
  ProdInv$TypPCtotal[45]<- ProdInv$Qty[45] *  ProdInv$TypPCunit[45]
  ProdInv$TypPCtotal[46]<- ProdInv$Qty[46] *  ProdInv$TypPCunit[46]
  ProdInv$TypPCtotal[47]<- ProdInv$Qty[47] *  ProdInv$TypPCunit[47]
  ProdInv$TypPCtotal[48]<- ProdInv$Qty[48] *  ProdInv$TypPCunit[48]
  ProdInv$TypPCtotal[49]<- ProdInv$Qty[49] *  ProdInv$TypPCunit[49]
  ProdInv$TypPCtotal[50]<- ProdInv$Qty[50] *  ProdInv$TypPCunit[50]
  ProdInv$TypPCtotal[51]<- ProdInv$Qty[51] *  ProdInv$TypPCunit[51]
  ProdInv$TypPCtotal[52]<- ProdInv$Qty[52] *  ProdInv$TypPCunit[52]
  ProdInv$TypPCtotal[53]<- ProdInv$Qty[53] *  ProdInv$TypPCunit[53]
  ProdInv$TypPCtotal[54]<- ProdInv$Qty[54] *  ProdInv$TypPCunit[54]
  ProdInv$TypPCtotal[55]<- ProdInv$Qty[55] *  ProdInv$TypPCunit[55]
  ProdInv$TypPCtotal[56]<- ProdInv$Qty[56] *  ProdInv$TypPCunit[56]
  ProdInv$TypPCtotal[57]<- ProdInv$Qty[57] *  ProdInv$TypPCunit[57]
  ProdInv$TypPCtotal[58]<- ProdInv$Qty[58] *  ProdInv$TypPCunit[58]
  ProdInv$TypPCtotal[59]<- ProdInv$Qty[59] *  ProdInv$TypPCunit[59]
  ProdInv$TypPCtotal[60]<- ProdInv$Qty[60] *  ProdInv$TypPCunit[60]
  ProdInv$TypPCtotal[61]<- ProdInv$Qty[61] *  ProdInv$TypPCunit[61]
  ProdInv$TypPCtotal[62]<- ProdInv$Qty[62] *  ProdInv$TypPCunit[62]
  ProdInv$TypPCtotal[63]<- ProdInv$Qty[63] *  ProdInv$TypPCunit[63]
  ProdInv$TypPCtotal[64]<- ProdInv$Qty[64] *  ProdInv$TypPCunit[64]
  ProdInv$TypPCtotal[65]<- ProdInv$Qty[65] *  ProdInv$TypPCunit[65]
  ProdInv$TypPCtotal[66]<- ProdInv$Qty[66] *  ProdInv$TypPCunit[66]
  ProdInv$TypPCtotal[67]<- ProdInv$Qty[67] *  ProdInv$TypPCunit[67]
  ProdInv$TypPCtotal[68]<- ProdInv$Qty[68] *  ProdInv$TypPCunit[68]
  ProdInv$TypPCtotal[69]<- ProdInv$Qty[69] *  ProdInv$TypPCunit[69]
  ProdInv$TypPCtotal[70]<- ProdInv$Qty[70] *  ProdInv$TypPCunit[70]
  ProdInv$TypPCtotal[71]<- ProdInv$Qty[71] *  ProdInv$TypPCunit[71]
  ProdInv$TypPCtotal[72]<- ProdInv$Qty[72] *  ProdInv$TypPCunit[72]
  ProdInv$TypPCtotal[73]<- ProdInv$Qty[73] *  ProdInv$TypPCunit[73]
  ProdInv$TypPCtotal[74]<- ProdInv$Qty[74] *  ProdInv$TypPCunit[74]
  ProdInv$TypPCtotal[75]<- ProdInv$Qty[75] *  ProdInv$TypPCunit[75]
  ProdInv$TypPCtotal[76]<- ProdInv$Qty[76] *  ProdInv$TypPCunit[76]
  ProdInv$TypPCtotal[77]<- ProdInv$Qty[77] *  ProdInv$TypPCunit[77]
  ProdInv$TypPCtotal[78]<- ProdInv$Qty[78] *  ProdInv$TypPCunit[78]
  ProdInv$TypPCtotal[79]<- ProdInv$Qty[79] *  ProdInv$TypPCunit[79]
  ProdInv$TypPCtotal[80]<- ProdInv$Qty[80] *  ProdInv$TypPCunit[80]
  ProdInv$TypPCtotal[81]<- ProdInv$Qty[81] *  ProdInv$TypPCunit[81]
  ProdInv$TypPCtotal[82]<- ProdInv$Qty[82] *  ProdInv$TypPCunit[82]
  ProdInv$TypPCtotal[83]<- ProdInv$Qty[83] *  ProdInv$TypPCunit[83]
  ProdInv$TypPCtotal[84]<- ProdInv$Qty[84] *  ProdInv$TypPCunit[84]
  ProdInv$TypPCtotal[85]<- ProdInv$Qty[85] *  ProdInv$TypPCunit[85]
  ProdInv$TypPCtotal[86]<- ProdInv$Qty[86] *  ProdInv$TypPCunit[86]
  ProdInv$TypPCtotal[87]<- ProdInv$Qty[87] *  ProdInv$TypPCunit[87]
  ProdInv$TypPCtotal[88]<- ProdInv$Qty[88] *  ProdInv$TypPCunit[88]
  ProdInv$TypPCtotal[89]<- ProdInv$Qty[89] *  ProdInv$TypPCunit[89]
  ProdInv$TypPCtotal[90]<- ProdInv$Qty[90] *  ProdInv$TypPCunit[90]
  ProdInv$TypPCtotal[91]<- ProdInv$Qty[91] *  ProdInv$TypPCunit[91]
  ProdInv$TypPCtotal[92]<- ProdInv$Qty[92] *  ProdInv$TypPCunit[92]
  ProdInv$TypPCtotal[93]<- ProdInv$Qty[93] *  ProdInv$TypPCunit[93]
  ProdInv$TypPCtotal[94]<- ProdInv$Qty[94] *  ProdInv$TypPCunit[94]
  ProdInv$TypPCtotal[95]<- ProdInv$Qty[95] *  ProdInv$TypPCunit[95]
  ProdInv$TypPCtotal[96]<- ProdInv$Qty[96] *  ProdInv$TypPCunit[96]
  ProdInv$TypPCtotal[97]<- ProdInv$Qty[97] *  ProdInv$TypPCunit[97]
  ProdInv$TypPCtotal[98]<- ProdInv$Qty[98] *  ProdInv$TypPCunit[98]
  ProdInv$TypPCtotal[99]<- ProdInv$Qty[99] *  ProdInv$TypPCunit[99]
  ProdInv$TypPCtotal[100]<- ProdInv$Qty[100] *  ProdInv$TypPCunit[100]
  ProdInv$TypPCtotal[101]<- ProdInv$Qty[101] *  ProdInv$TypPCunit[101]
  ProdInv$TypPCtotal[102]<- ProdInv$Qty[102] *  ProdInv$TypPCunit[102]
  ProdInv$TypPCtotal[103]<- ProdInv$Qty[103] *  ProdInv$TypPCunit[103]
  ProdInv$TypPCtotal[104]<- ProdInv$Qty[104] *  ProdInv$TypPCunit[104]
  ProdInv$TypPCtotal[105]<- ProdInv$Qty[105] *  ProdInv$TypPCunit[105]
  ProdInv$TypPCtotal[106]<- ProdInv$Qty[106] *  ProdInv$TypPCunit[106]
  ProdInv$TypPCtotal[107]<- ProdInv$Qty[107] *  ProdInv$TypPCunit[107]
  ProdInv$TypPCtotal[108]<- ProdInv$Qty[108] *  ProdInv$TypPCunit[108]
  ProdInv$TypPCtotal[109]<- ProdInv$Qty[109] *  ProdInv$TypPCunit[109]
  ProdInv$TypPCtotal[110]<- ProdInv$Qty[110] *  ProdInv$TypPCunit[110]
  ProdInv$TypPCtotal[111]<- ProdInv$Qty[111] *  ProdInv$TypPCunit[111]
  ProdInv$TypPCtotal[112]<- ProdInv$Qty[112] *  ProdInv$TypPCunit[112]
  ProdInv$TypPCtotal[113]<- ProdInv$Qty[113] *  ProdInv$TypPCunit[113]
  ProdInv$TypPCtotal[114]<- ProdInv$Qty[114] *  ProdInv$TypPCunit[114]
  ProdInv$TypPCtotal[115]<- ProdInv$Qty[115] *  ProdInv$TypPCunit[115]
  ProdInv$TypPCtotal[116]<- ProdInv$Qty[116] *  ProdInv$TypPCunit[116]
  ProdInv$TypPCtotal[117]<- ProdInv$Qty[117] *  ProdInv$TypPCunit[117]
  ProdInv$TypPCtotal[118]<- ProdInv$Qty[118] *  ProdInv$TypPCunit[118]
  ProdInv$TypPCtotal[119]<- ProdInv$Qty[119] *  ProdInv$TypPCunit[119]
  ProdInv$TypPCtotal[120]<- ProdInv$Qty[120] *  ProdInv$TypPCunit[120]
  ProdInv$TypPCtotal[121]<- ProdInv$Qty[121] *  ProdInv$TypPCunit[121]
  ProdInv$TypPCtotal[122]<- ProdInv$Qty[122] *  ProdInv$TypPCunit[122]
  ProdInv$TypPCtotal[123]<- ProdInv$Qty[123] *  ProdInv$TypPCunit[123]
  ProdInv$TypPCtotal[124]<- ProdInv$Qty[124] *  ProdInv$TypPCunit[124]
  ProdInv$TypPCtotal[125]<- ProdInv$Qty[125] *  ProdInv$TypPCunit[125]
  ProdInv$TypPCtotal[126]<- ProdInv$Qty[126] *  ProdInv$TypPCunit[126]
  ProdInv$TypPCtotal[127]<- ProdInv$Qty[127] *  ProdInv$TypPCunit[127]
  ProdInv$TypPCtotal[128]<- ProdInv$Qty[128] *  ProdInv$TypPCunit[128]
  ProdInv$TypPCtotal[129]<- ProdInv$Qty[129] *  ProdInv$TypPCunit[129]
  ProdInv$TypPCtotal[130]<- ProdInv$Qty[130] *  ProdInv$TypPCunit[130]
  ProdInv$TypPCtotal[131]<- ProdInv$Qty[131] *  ProdInv$TypPCunit[131]
  ProdInv$TypPCtotal[132]<- ProdInv$Qty[132] *  ProdInv$TypPCunit[132]
  ProdInv$TypPCtotal[133]<- ProdInv$Qty[133] *  ProdInv$TypPCunit[133]
  ProdInv$TypPCtotal[134]<- ProdInv$Qty[134] *  ProdInv$TypPCunit[134]
  
  ProdInv$TypOPtotal[1]<- ProdInv$Qty[1] *  ProdInv$TypOPunit[1]
  ProdInv$TypOPtotal[2]<- ProdInv$Qty[2] *  ProdInv$TypOPunit[2]
  ProdInv$TypOPtotal[3]<- ProdInv$Qty[3] *  ProdInv$TypOPunit[3]
  ProdInv$TypOPtotal[4]<- ProdInv$Qty[4] *  ProdInv$TypOPunit[4]
  ProdInv$TypOPtotal[5]<- ProdInv$Qty[5] *  ProdInv$TypOPunit[5]
  ProdInv$TypOPtotal[6]<- ProdInv$Qty[6] *  ProdInv$TypOPunit[6]
  ProdInv$TypOPtotal[7]<- ProdInv$Qty[7] *  ProdInv$TypOPunit[7]
  ProdInv$TypOPtotal[8]<- ProdInv$Qty[8] *  ProdInv$TypOPunit[8]
  ProdInv$TypOPtotal[9]<- ProdInv$Qty[9] *  ProdInv$TypOPunit[9]
  ProdInv$TypOPtotal[10]<- ProdInv$Qty[10] *  ProdInv$TypOPunit[10]
  ProdInv$TypOPtotal[11]<- ProdInv$Qty[11] *  ProdInv$TypOPunit[11]
  ProdInv$TypOPtotal[12]<- ProdInv$Qty[12] *  ProdInv$TypOPunit[12]
  ProdInv$TypOPtotal[13]<- ProdInv$Qty[13] *  ProdInv$TypOPunit[13]
  ProdInv$TypOPtotal[14]<- ProdInv$Qty[14] *  ProdInv$TypOPunit[14]
  ProdInv$TypOPtotal[15]<- ProdInv$Qty[15] *  ProdInv$TypOPunit[15]
  ProdInv$TypOPtotal[16]<- ProdInv$Qty[16] *  ProdInv$TypOPunit[16]
  ProdInv$TypOPtotal[17]<- ProdInv$Qty[17] *  ProdInv$TypOPunit[17]
  ProdInv$TypOPtotal[18]<- ProdInv$Qty[18] *  ProdInv$TypOPunit[18]
  ProdInv$TypOPtotal[19]<- ProdInv$Qty[19] *  ProdInv$TypOPunit[19]
  ProdInv$TypOPtotal[20]<- ProdInv$Qty[20] *  ProdInv$TypOPunit[20]
  ProdInv$TypOPtotal[21]<- ProdInv$Qty[21] *  ProdInv$TypOPunit[21]
  ProdInv$TypOPtotal[22]<- ProdInv$Qty[22] *  ProdInv$TypOPunit[22]
  ProdInv$TypOPtotal[23]<- ProdInv$Qty[23] *  ProdInv$TypOPunit[23]
  ProdInv$TypOPtotal[24]<- ProdInv$Qty[24] *  ProdInv$TypOPunit[24]
  ProdInv$TypOPtotal[25]<- ProdInv$Qty[25] *  ProdInv$TypOPunit[25]
  ProdInv$TypOPtotal[26]<- ProdInv$Qty[26] *  ProdInv$TypOPunit[26]
  ProdInv$TypOPtotal[27]<- ProdInv$Qty[27] *  ProdInv$TypOPunit[27]
  ProdInv$TypOPtotal[28]<- ProdInv$Qty[28] *  ProdInv$TypOPunit[28]
  ProdInv$TypOPtotal[29]<- ProdInv$Qty[29] *  ProdInv$TypOPunit[29]
  ProdInv$TypOPtotal[30]<- ProdInv$Qty[30] *  ProdInv$TypOPunit[30]
  ProdInv$TypOPtotal[31]<- ProdInv$Qty[31] *  ProdInv$TypOPunit[31]
  ProdInv$TypOPtotal[32]<- ProdInv$Qty[32] *  ProdInv$TypOPunit[32]
  ProdInv$TypOPtotal[33]<- ProdInv$Qty[33] *  ProdInv$TypOPunit[33]
  ProdInv$TypOPtotal[34]<- ProdInv$Qty[34] *  ProdInv$TypOPunit[34]
  ProdInv$TypOPtotal[35]<- ProdInv$Qty[35] *  ProdInv$TypOPunit[35]
  ProdInv$TypOPtotal[36]<- ProdInv$Qty[36] *  ProdInv$TypOPunit[36]
  ProdInv$TypOPtotal[37]<- ProdInv$Qty[37] *  ProdInv$TypOPunit[37]
  ProdInv$TypOPtotal[38]<- ProdInv$Qty[38] *  ProdInv$TypOPunit[38]
  ProdInv$TypOPtotal[39]<- ProdInv$Qty[39] *  ProdInv$TypOPunit[39]
  ProdInv$TypOPtotal[40]<- ProdInv$Qty[40] *  ProdInv$TypOPunit[40]
  ProdInv$TypOPtotal[41]<- ProdInv$Qty[41] *  ProdInv$TypOPunit[41]
  ProdInv$TypOPtotal[42]<- ProdInv$Qty[42] *  ProdInv$TypOPunit[42]
  ProdInv$TypOPtotal[43]<- ProdInv$Qty[43] *  ProdInv$TypOPunit[43]
  ProdInv$TypOPtotal[44]<- ProdInv$Qty[44] *  ProdInv$TypOPunit[44]
  ProdInv$TypOPtotal[45]<- ProdInv$Qty[45] *  ProdInv$TypOPunit[45]
  ProdInv$TypOPtotal[46]<- ProdInv$Qty[46] *  ProdInv$TypOPunit[46]
  ProdInv$TypOPtotal[47]<- ProdInv$Qty[47] *  ProdInv$TypOPunit[47]
  ProdInv$TypOPtotal[48]<- ProdInv$Qty[48] *  ProdInv$TypOPunit[48]
  ProdInv$TypOPtotal[49]<- ProdInv$Qty[49] *  ProdInv$TypOPunit[49]
  ProdInv$TypOPtotal[50]<- ProdInv$Qty[50] *  ProdInv$TypOPunit[50]
  ProdInv$TypOPtotal[51]<- ProdInv$Qty[51] *  ProdInv$TypOPunit[51]
  ProdInv$TypOPtotal[52]<- ProdInv$Qty[52] *  ProdInv$TypOPunit[52]
  ProdInv$TypOPtotal[53]<- ProdInv$Qty[53] *  ProdInv$TypOPunit[53]
  ProdInv$TypOPtotal[54]<- ProdInv$Qty[54] *  ProdInv$TypOPunit[54]
  ProdInv$TypOPtotal[55]<- ProdInv$Qty[55] *  ProdInv$TypOPunit[55]
  ProdInv$TypOPtotal[56]<- ProdInv$Qty[56] *  ProdInv$TypOPunit[56]
  ProdInv$TypOPtotal[57]<- ProdInv$Qty[57] *  ProdInv$TypOPunit[57]
  ProdInv$TypOPtotal[58]<- ProdInv$Qty[58] *  ProdInv$TypOPunit[58]
  ProdInv$TypOPtotal[59]<- ProdInv$Qty[59] *  ProdInv$TypOPunit[59]
  ProdInv$TypOPtotal[60]<- ProdInv$Qty[60] *  ProdInv$TypOPunit[60]
  ProdInv$TypOPtotal[61]<- ProdInv$Qty[61] *  ProdInv$TypOPunit[61]
  ProdInv$TypOPtotal[62]<- ProdInv$Qty[62] *  ProdInv$TypOPunit[62]
  ProdInv$TypOPtotal[63]<- ProdInv$Qty[63] *  ProdInv$TypOPunit[63]
  ProdInv$TypOPtotal[64]<- ProdInv$Qty[64] *  ProdInv$TypOPunit[64]
  ProdInv$TypOPtotal[65]<- ProdInv$Qty[65] *  ProdInv$TypOPunit[65]
  ProdInv$TypOPtotal[66]<- ProdInv$Qty[66] *  ProdInv$TypOPunit[66]
  ProdInv$TypOPtotal[67]<- ProdInv$Qty[67] *  ProdInv$TypOPunit[67]
  ProdInv$TypOPtotal[68]<- ProdInv$Qty[68] *  ProdInv$TypOPunit[68]
  ProdInv$TypOPtotal[69]<- ProdInv$Qty[69] *  ProdInv$TypOPunit[69]
  ProdInv$TypOPtotal[70]<- ProdInv$Qty[70] *  ProdInv$TypOPunit[70]
  ProdInv$TypOPtotal[71]<- ProdInv$Qty[71] *  ProdInv$TypOPunit[71]
  ProdInv$TypOPtotal[72]<- ProdInv$Qty[72] *  ProdInv$TypOPunit[72]
  ProdInv$TypOPtotal[73]<- ProdInv$Qty[73] *  ProdInv$TypOPunit[73]
  ProdInv$TypOPtotal[74]<- ProdInv$Qty[74] *  ProdInv$TypOPunit[74]
  ProdInv$TypOPtotal[75]<- ProdInv$Qty[75] *  ProdInv$TypOPunit[75]
  ProdInv$TypOPtotal[76]<- ProdInv$Qty[76] *  ProdInv$TypOPunit[76]
  ProdInv$TypOPtotal[77]<- ProdInv$Qty[77] *  ProdInv$TypOPunit[77]
  ProdInv$TypOPtotal[78]<- ProdInv$Qty[78] *  ProdInv$TypOPunit[78]
  ProdInv$TypOPtotal[79]<- ProdInv$Qty[79] *  ProdInv$TypOPunit[79]
  ProdInv$TypOPtotal[80]<- ProdInv$Qty[80] *  ProdInv$TypOPunit[80]
  ProdInv$TypOPtotal[81]<- ProdInv$Qty[81] *  ProdInv$TypOPunit[81]
  ProdInv$TypOPtotal[82]<- ProdInv$Qty[82] *  ProdInv$TypOPunit[82]
  ProdInv$TypOPtotal[83]<- ProdInv$Qty[83] *  ProdInv$TypOPunit[83]
  ProdInv$TypOPtotal[84]<- ProdInv$Qty[84] *  ProdInv$TypOPunit[84]
  ProdInv$TypOPtotal[85]<- ProdInv$Qty[85] *  ProdInv$TypOPunit[85]
  ProdInv$TypOPtotal[86]<- ProdInv$Qty[86] *  ProdInv$TypOPunit[86]
  ProdInv$TypOPtotal[87]<- ProdInv$Qty[87] *  ProdInv$TypOPunit[87]
  ProdInv$TypOPtotal[88]<- ProdInv$Qty[88] *  ProdInv$TypOPunit[88]
  ProdInv$TypOPtotal[89]<- ProdInv$Qty[89] *  ProdInv$TypOPunit[89]
  ProdInv$TypOPtotal[90]<- ProdInv$Qty[90] *  ProdInv$TypOPunit[90]
  ProdInv$TypOPtotal[91]<- ProdInv$Qty[91] *  ProdInv$TypOPunit[91]
  ProdInv$TypOPtotal[92]<- ProdInv$Qty[92] *  ProdInv$TypOPunit[92]
  ProdInv$TypOPtotal[93]<- ProdInv$Qty[93] *  ProdInv$TypOPunit[93]
  ProdInv$TypOPtotal[94]<- ProdInv$Qty[94] *  ProdInv$TypOPunit[94]
  ProdInv$TypOPtotal[95]<- ProdInv$Qty[95] *  ProdInv$TypOPunit[95]
  ProdInv$TypOPtotal[96]<- ProdInv$Qty[96] *  ProdInv$TypOPunit[96]
  ProdInv$TypOPtotal[97]<- ProdInv$Qty[97] *  ProdInv$TypOPunit[97]
  ProdInv$TypOPtotal[98]<- ProdInv$Qty[98] *  ProdInv$TypOPunit[98]
  ProdInv$TypOPtotal[99]<- ProdInv$Qty[99] *  ProdInv$TypOPunit[99]
  ProdInv$TypOPtotal[100]<- ProdInv$Qty[100] *  ProdInv$TypOPunit[100]
  ProdInv$TypOPtotal[101]<- ProdInv$Qty[101] *  ProdInv$TypOPunit[101]
  ProdInv$TypOPtotal[102]<- ProdInv$Qty[102] *  ProdInv$TypOPunit[102]
  ProdInv$TypOPtotal[103]<- ProdInv$Qty[103] *  ProdInv$TypOPunit[103]
  ProdInv$TypOPtotal[104]<- ProdInv$Qty[104] *  ProdInv$TypOPunit[104]
  ProdInv$TypOPtotal[105]<- ProdInv$Qty[105] *  ProdInv$TypOPunit[105]
  ProdInv$TypOPtotal[106]<- ProdInv$Qty[106] *  ProdInv$TypOPunit[106]
  ProdInv$TypOPtotal[107]<- ProdInv$Qty[107] *  ProdInv$TypOPunit[107]
  ProdInv$TypOPtotal[108]<- ProdInv$Qty[108] *  ProdInv$TypOPunit[108]
  ProdInv$TypOPtotal[109]<- ProdInv$Qty[109] *  ProdInv$TypOPunit[109]
  ProdInv$TypOPtotal[110]<- ProdInv$Qty[110] *  ProdInv$TypOPunit[110]
  ProdInv$TypOPtotal[111]<- ProdInv$Qty[111] *  ProdInv$TypOPunit[111]
  ProdInv$TypOPtotal[112]<- ProdInv$Qty[112] *  ProdInv$TypOPunit[112]
  ProdInv$TypOPtotal[113]<- ProdInv$Qty[113] *  ProdInv$TypOPunit[113]
  ProdInv$TypOPtotal[114]<- ProdInv$Qty[114] *  ProdInv$TypOPunit[114]
  ProdInv$TypOPtotal[115]<- ProdInv$Qty[115] *  ProdInv$TypOPunit[115]
  ProdInv$TypOPtotal[116]<- ProdInv$Qty[116] *  ProdInv$TypOPunit[116]
  ProdInv$TypOPtotal[117]<- ProdInv$Qty[117] *  ProdInv$TypOPunit[117]
  ProdInv$TypOPtotal[118]<- ProdInv$Qty[118] *  ProdInv$TypOPunit[118]
  ProdInv$TypOPtotal[119]<- ProdInv$Qty[119] *  ProdInv$TypOPunit[119]
  ProdInv$TypOPtotal[120]<- ProdInv$Qty[120] *  ProdInv$TypOPunit[120]
  ProdInv$TypOPtotal[121]<- ProdInv$Qty[121] *  ProdInv$TypOPunit[121]
  ProdInv$TypOPtotal[122]<- ProdInv$Qty[122] *  ProdInv$TypOPunit[122]
  ProdInv$TypOPtotal[123]<- ProdInv$Qty[123] *  ProdInv$TypOPunit[123]
  ProdInv$TypOPtotal[124]<- ProdInv$Qty[124] *  ProdInv$TypOPunit[124]
  ProdInv$TypOPtotal[125]<- ProdInv$Qty[125] *  ProdInv$TypOPunit[125]
  ProdInv$TypOPtotal[126]<- ProdInv$Qty[126] *  ProdInv$TypOPunit[126]
  ProdInv$TypOPtotal[127]<- ProdInv$Qty[127] *  ProdInv$TypOPunit[127]
  ProdInv$TypOPtotal[128]<- ProdInv$Qty[128] *  ProdInv$TypOPunit[128]
  ProdInv$TypOPtotal[129]<- ProdInv$Qty[129] *  ProdInv$TypOPunit[129]
  ProdInv$TypOPtotal[130]<- ProdInv$Qty[130] *  ProdInv$TypOPunit[130]
  ProdInv$TypOPtotal[131]<- ProdInv$Qty[131] *  ProdInv$TypOPunit[131]
  ProdInv$TypOPtotal[132]<- ProdInv$Qty[132] *  ProdInv$TypOPunit[132]
  ProdInv$TypOPtotal[133]<- ProdInv$Qty[133] *  ProdInv$TypOPunit[133]
  ProdInv$TypOPtotal[134]<- ProdInv$Qty[134] *  ProdInv$TypOPunit[134]

  
  ProdInv$TypHDtotal[1]<- ProdInv$Qty[1] *  ProdInv$TypHDunit[1]
  ProdInv$TypHDtotal[2]<- ProdInv$Qty[2] *  ProdInv$TypHDunit[2]
  ProdInv$TypHDtotal[3]<- ProdInv$Qty[3] *  ProdInv$TypHDunit[3]
  ProdInv$TypHDtotal[4]<- ProdInv$Qty[4] *  ProdInv$TypHDunit[4]
  ProdInv$TypHDtotal[5]<- ProdInv$Qty[5] *  ProdInv$TypHDunit[5]
  ProdInv$TypHDtotal[6]<- ProdInv$Qty[6] *  ProdInv$TypHDunit[6]
  ProdInv$TypHDtotal[7]<- ProdInv$Qty[7] *  ProdInv$TypHDunit[7]
  ProdInv$TypHDtotal[8]<- ProdInv$Qty[8] *  ProdInv$TypHDunit[8]
  ProdInv$TypHDtotal[9]<- ProdInv$Qty[9] *  ProdInv$TypHDunit[9]
  ProdInv$TypHDtotal[10]<- ProdInv$Qty[10] *  ProdInv$TypHDunit[10]
  ProdInv$TypHDtotal[11]<- ProdInv$Qty[11] *  ProdInv$TypHDunit[11]
  ProdInv$TypHDtotal[12]<- ProdInv$Qty[12] *  ProdInv$TypHDunit[12]
  ProdInv$TypHDtotal[13]<- ProdInv$Qty[13] *  ProdInv$TypHDunit[13]
  ProdInv$TypHDtotal[14]<- ProdInv$Qty[14] *  ProdInv$TypHDunit[14]
  ProdInv$TypHDtotal[15]<- ProdInv$Qty[15] *  ProdInv$TypHDunit[15]
  ProdInv$TypHDtotal[16]<- ProdInv$Qty[16] *  ProdInv$TypHDunit[16]
  ProdInv$TypHDtotal[17]<- ProdInv$Qty[17] *  ProdInv$TypHDunit[17]
  ProdInv$TypHDtotal[18]<- ProdInv$Qty[18] *  ProdInv$TypHDunit[18]
  ProdInv$TypHDtotal[19]<- ProdInv$Qty[19] *  ProdInv$TypHDunit[19]
  ProdInv$TypHDtotal[20]<- ProdInv$Qty[20] *  ProdInv$TypHDunit[20]
  ProdInv$TypHDtotal[21]<- ProdInv$Qty[21] *  ProdInv$TypHDunit[21]
  ProdInv$TypHDtotal[22]<- ProdInv$Qty[22] *  ProdInv$TypHDunit[22]
  ProdInv$TypHDtotal[23]<- ProdInv$Qty[23] *  ProdInv$TypHDunit[23]
  ProdInv$TypHDtotal[24]<- ProdInv$Qty[24] *  ProdInv$TypHDunit[24]
  ProdInv$TypHDtotal[25]<- ProdInv$Qty[25] *  ProdInv$TypHDunit[25]
  ProdInv$TypHDtotal[26]<- ProdInv$Qty[26] *  ProdInv$TypHDunit[26]
  ProdInv$TypHDtotal[27]<- ProdInv$Qty[27] *  ProdInv$TypHDunit[27]
  ProdInv$TypHDtotal[28]<- ProdInv$Qty[28] *  ProdInv$TypHDunit[28]
  ProdInv$TypHDtotal[29]<- ProdInv$Qty[29] *  ProdInv$TypHDunit[29]
  ProdInv$TypHDtotal[30]<- ProdInv$Qty[30] *  ProdInv$TypHDunit[30]
  ProdInv$TypHDtotal[31]<- ProdInv$Qty[31] *  ProdInv$TypHDunit[31]
  ProdInv$TypHDtotal[32]<- ProdInv$Qty[32] *  ProdInv$TypHDunit[32]
  ProdInv$TypHDtotal[33]<- ProdInv$Qty[33] *  ProdInv$TypHDunit[33]
  ProdInv$TypHDtotal[34]<- ProdInv$Qty[34] *  ProdInv$TypHDunit[34]
  ProdInv$TypHDtotal[35]<- ProdInv$Qty[35] *  ProdInv$TypHDunit[35]
  ProdInv$TypHDtotal[36]<- ProdInv$Qty[36] *  ProdInv$TypHDunit[36]
  ProdInv$TypHDtotal[37]<- ProdInv$Qty[37] *  ProdInv$TypHDunit[37]
  ProdInv$TypHDtotal[38]<- ProdInv$Qty[38] *  ProdInv$TypHDunit[38]
  ProdInv$TypHDtotal[39]<- ProdInv$Qty[39] *  ProdInv$TypHDunit[39]
  ProdInv$TypHDtotal[40]<- ProdInv$Qty[40] *  ProdInv$TypHDunit[40]
  ProdInv$TypHDtotal[41]<- ProdInv$Qty[41] *  ProdInv$TypHDunit[41]
  ProdInv$TypHDtotal[42]<- ProdInv$Qty[42] *  ProdInv$TypHDunit[42]
  ProdInv$TypHDtotal[43]<- ProdInv$Qty[43] *  ProdInv$TypHDunit[43]
  ProdInv$TypHDtotal[44]<- ProdInv$Qty[44] *  ProdInv$TypHDunit[44]
  ProdInv$TypHDtotal[45]<- ProdInv$Qty[45] *  ProdInv$TypHDunit[45]
  ProdInv$TypHDtotal[46]<- ProdInv$Qty[46] *  ProdInv$TypHDunit[46]
  ProdInv$TypHDtotal[47]<- ProdInv$Qty[47] *  ProdInv$TypHDunit[47]
  ProdInv$TypHDtotal[48]<- ProdInv$Qty[48] *  ProdInv$TypHDunit[48]
  ProdInv$TypHDtotal[49]<- ProdInv$Qty[49] *  ProdInv$TypHDunit[49]
  ProdInv$TypHDtotal[50]<- ProdInv$Qty[50] *  ProdInv$TypHDunit[50]
  ProdInv$TypHDtotal[51]<- ProdInv$Qty[51] *  ProdInv$TypHDunit[51]
  ProdInv$TypHDtotal[52]<- ProdInv$Qty[52] *  ProdInv$TypHDunit[52]
  ProdInv$TypHDtotal[53]<- ProdInv$Qty[53] *  ProdInv$TypHDunit[53]
  ProdInv$TypHDtotal[54]<- ProdInv$Qty[54] *  ProdInv$TypHDunit[54]
  ProdInv$TypHDtotal[55]<- ProdInv$Qty[55] *  ProdInv$TypHDunit[55]
  ProdInv$TypHDtotal[56]<- ProdInv$Qty[56] *  ProdInv$TypHDunit[56]
  ProdInv$TypHDtotal[57]<- ProdInv$Qty[57] *  ProdInv$TypHDunit[57]
  ProdInv$TypHDtotal[58]<- ProdInv$Qty[58] *  ProdInv$TypHDunit[58]
  ProdInv$TypHDtotal[59]<- ProdInv$Qty[59] *  ProdInv$TypHDunit[59]
  ProdInv$TypHDtotal[60]<- ProdInv$Qty[60] *  ProdInv$TypHDunit[60]
  ProdInv$TypHDtotal[61]<- ProdInv$Qty[61] *  ProdInv$TypHDunit[61]
  ProdInv$TypHDtotal[62]<- ProdInv$Qty[62] *  ProdInv$TypHDunit[62]
  ProdInv$TypHDtotal[63]<- ProdInv$Qty[63] *  ProdInv$TypHDunit[63]
  ProdInv$TypHDtotal[64]<- ProdInv$Qty[64] *  ProdInv$TypHDunit[64]
  ProdInv$TypHDtotal[65]<- ProdInv$Qty[65] *  ProdInv$TypHDunit[65]
  ProdInv$TypHDtotal[66]<- ProdInv$Qty[66] *  ProdInv$TypHDunit[66]
  ProdInv$TypHDtotal[67]<- ProdInv$Qty[67] *  ProdInv$TypHDunit[67]
  ProdInv$TypHDtotal[68]<- ProdInv$Qty[68] *  ProdInv$TypHDunit[68]
  ProdInv$TypHDtotal[69]<- ProdInv$Qty[69] *  ProdInv$TypHDunit[69]
  ProdInv$TypHDtotal[70]<- ProdInv$Qty[70] *  ProdInv$TypHDunit[70]
  ProdInv$TypHDtotal[71]<- ProdInv$Qty[71] *  ProdInv$TypHDunit[71]
  ProdInv$TypHDtotal[72]<- ProdInv$Qty[72] *  ProdInv$TypHDunit[72]
  ProdInv$TypHDtotal[73]<- ProdInv$Qty[73] *  ProdInv$TypHDunit[73]
  ProdInv$TypHDtotal[74]<- ProdInv$Qty[74] *  ProdInv$TypHDunit[74]
  ProdInv$TypHDtotal[75]<- ProdInv$Qty[75] *  ProdInv$TypHDunit[75]
  ProdInv$TypHDtotal[76]<- ProdInv$Qty[76] *  ProdInv$TypHDunit[76]
  ProdInv$TypHDtotal[77]<- ProdInv$Qty[77] *  ProdInv$TypHDunit[77]
  ProdInv$TypHDtotal[78]<- ProdInv$Qty[78] *  ProdInv$TypHDunit[78]
  ProdInv$TypHDtotal[79]<- ProdInv$Qty[79] *  ProdInv$TypHDunit[79]
  ProdInv$TypHDtotal[80]<- ProdInv$Qty[80] *  ProdInv$TypHDunit[80]
  ProdInv$TypHDtotal[81]<- ProdInv$Qty[81] *  ProdInv$TypHDunit[81]
  ProdInv$TypHDtotal[82]<- ProdInv$Qty[82] *  ProdInv$TypHDunit[82]
  ProdInv$TypHDtotal[83]<- ProdInv$Qty[83] *  ProdInv$TypHDunit[83]
  ProdInv$TypHDtotal[84]<- ProdInv$Qty[84] *  ProdInv$TypHDunit[84]
  ProdInv$TypHDtotal[85]<- ProdInv$Qty[85] *  ProdInv$TypHDunit[85]
  ProdInv$TypHDtotal[86]<- ProdInv$Qty[86] *  ProdInv$TypHDunit[86]
  ProdInv$TypHDtotal[87]<- ProdInv$Qty[87] *  ProdInv$TypHDunit[87]
  ProdInv$TypHDtotal[88]<- ProdInv$Qty[88] *  ProdInv$TypHDunit[88]
  ProdInv$TypHDtotal[89]<- ProdInv$Qty[89] *  ProdInv$TypHDunit[89]
  ProdInv$TypHDtotal[90]<- ProdInv$Qty[90] *  ProdInv$TypHDunit[90]
  ProdInv$TypHDtotal[91]<- ProdInv$Qty[91] *  ProdInv$TypHDunit[91]
  ProdInv$TypHDtotal[92]<- ProdInv$Qty[92] *  ProdInv$TypHDunit[92]
  ProdInv$TypHDtotal[93]<- ProdInv$Qty[93] *  ProdInv$TypHDunit[93]
  ProdInv$TypHDtotal[94]<- ProdInv$Qty[94] *  ProdInv$TypHDunit[94]
  ProdInv$TypHDtotal[95]<- ProdInv$Qty[95] *  ProdInv$TypHDunit[95]
  ProdInv$TypHDtotal[96]<- ProdInv$Qty[96] *  ProdInv$TypHDunit[96]
  ProdInv$TypHDtotal[97]<- ProdInv$Qty[97] *  ProdInv$TypHDunit[97]
  ProdInv$TypHDtotal[98]<- ProdInv$Qty[98] *  ProdInv$TypHDunit[98]
  ProdInv$TypHDtotal[99]<- ProdInv$Qty[99] *  ProdInv$TypHDunit[99]
  ProdInv$TypHDtotal[100]<- ProdInv$Qty[100] *  ProdInv$TypHDunit[100]
  ProdInv$TypHDtotal[101]<- ProdInv$Qty[101] *  ProdInv$TypHDunit[101]
  ProdInv$TypHDtotal[102]<- ProdInv$Qty[102] *  ProdInv$TypHDunit[102]
  ProdInv$TypHDtotal[103]<- ProdInv$Qty[103] *  ProdInv$TypHDunit[103]
  ProdInv$TypHDtotal[104]<- ProdInv$Qty[104] *  ProdInv$TypHDunit[104]
  ProdInv$TypHDtotal[105]<- ProdInv$Qty[105] *  ProdInv$TypHDunit[105]
  ProdInv$TypHDtotal[106]<- ProdInv$Qty[106] *  ProdInv$TypHDunit[106]
  ProdInv$TypHDtotal[107]<- ProdInv$Qty[107] *  ProdInv$TypHDunit[107]
  ProdInv$TypHDtotal[108]<- ProdInv$Qty[108] *  ProdInv$TypHDunit[108]
  ProdInv$TypHDtotal[109]<- ProdInv$Qty[109] *  ProdInv$TypHDunit[109]
  ProdInv$TypHDtotal[110]<- ProdInv$Qty[110] *  ProdInv$TypHDunit[110]
  ProdInv$TypHDtotal[111]<- ProdInv$Qty[111] *  ProdInv$TypHDunit[111]
  ProdInv$TypHDtotal[112]<- ProdInv$Qty[112] *  ProdInv$TypHDunit[112]
  ProdInv$TypHDtotal[113]<- ProdInv$Qty[113] *  ProdInv$TypHDunit[113]
  ProdInv$TypHDtotal[114]<- ProdInv$Qty[114] *  ProdInv$TypHDunit[114]
  ProdInv$TypHDtotal[115]<- ProdInv$Qty[115] *  ProdInv$TypHDunit[115]
  ProdInv$TypHDtotal[116]<- ProdInv$Qty[116] *  ProdInv$TypHDunit[116]
  ProdInv$TypHDtotal[117]<- ProdInv$Qty[117] *  ProdInv$TypHDunit[117]
  ProdInv$TypHDtotal[118]<- ProdInv$Qty[118] *  ProdInv$TypHDunit[118]
  ProdInv$TypHDtotal[119]<- ProdInv$Qty[119] *  ProdInv$TypHDunit[119]
  ProdInv$TypHDtotal[120]<- ProdInv$Qty[120] *  ProdInv$TypHDunit[120]
  ProdInv$TypHDtotal[121]<- ProdInv$Qty[121] *  ProdInv$TypHDunit[121]
  ProdInv$TypHDtotal[122]<- ProdInv$Qty[122] *  ProdInv$TypHDunit[122]
  ProdInv$TypHDtotal[123]<- ProdInv$Qty[123] *  ProdInv$TypHDunit[123]
  ProdInv$TypHDtotal[124]<- ProdInv$Qty[124] *  ProdInv$TypHDunit[124]
  ProdInv$TypHDtotal[125]<- ProdInv$Qty[125] *  ProdInv$TypHDunit[125]
  ProdInv$TypHDtotal[126]<- ProdInv$Qty[126] *  ProdInv$TypHDunit[126]
  ProdInv$TypHDtotal[127]<- ProdInv$Qty[127] *  ProdInv$TypHDunit[127]
  ProdInv$TypHDtotal[128]<- ProdInv$Qty[128] *  ProdInv$TypHDunit[128]
  ProdInv$TypHDtotal[129]<- ProdInv$Qty[129] *  ProdInv$TypHDunit[129]
  ProdInv$TypHDtotal[130]<- ProdInv$Qty[130] *  ProdInv$TypHDunit[130]
  ProdInv$TypHDtotal[131]<- ProdInv$Qty[131] *  ProdInv$TypHDunit[131]
  ProdInv$TypHDtotal[132]<- ProdInv$Qty[132] *  ProdInv$TypHDunit[132]
  ProdInv$TypHDtotal[133]<- ProdInv$Qty[133] *  ProdInv$TypHDunit[133]
  ProdInv$TypHDtotal[134]<- ProdInv$Qty[134] *  ProdInv$TypHDunit[134]
  
  # High Load #
  
  ProdInv$HighPCtotal[1]<- ProdInv$Qty[1] *  ProdInv$HighPCunit[1]
  ProdInv$HighPCtotal[2]<- ProdInv$Qty[2] *  ProdInv$HighPCunit[2]
  ProdInv$HighPCtotal[3]<- ProdInv$Qty[3] *  ProdInv$HighPCunit[3]
  ProdInv$HighPCtotal[4]<- ProdInv$Qty[4] *  ProdInv$HighPCunit[4]
  ProdInv$HighPCtotal[5]<- ProdInv$Qty[5] *  ProdInv$HighPCunit[5]
  ProdInv$HighPCtotal[6]<- ProdInv$Qty[6] *  ProdInv$HighPCunit[6]
  ProdInv$HighPCtotal[7]<- ProdInv$Qty[7] *  ProdInv$HighPCunit[7]
  ProdInv$HighPCtotal[8]<- ProdInv$Qty[8] *  ProdInv$HighPCunit[8]
  ProdInv$HighPCtotal[9]<- ProdInv$Qty[9] *  ProdInv$HighPCunit[9]
  ProdInv$HighPCtotal[10]<- ProdInv$Qty[10] *  ProdInv$HighPCunit[10]
  ProdInv$HighPCtotal[11]<- ProdInv$Qty[11] *  ProdInv$HighPCunit[11]
  ProdInv$HighPCtotal[12]<- ProdInv$Qty[12] *  ProdInv$HighPCunit[12]
  ProdInv$HighPCtotal[13]<- ProdInv$Qty[13] *  ProdInv$HighPCunit[13]
  ProdInv$HighPCtotal[14]<- ProdInv$Qty[14] *  ProdInv$HighPCunit[14]
  ProdInv$HighPCtotal[15]<- ProdInv$Qty[15] *  ProdInv$HighPCunit[15]
  ProdInv$HighPCtotal[16]<- ProdInv$Qty[16] *  ProdInv$HighPCunit[16]
  ProdInv$HighPCtotal[17]<- ProdInv$Qty[17] *  ProdInv$HighPCunit[17]
  ProdInv$HighPCtotal[18]<- ProdInv$Qty[18] *  ProdInv$HighPCunit[18]
  ProdInv$HighPCtotal[19]<- ProdInv$Qty[19] *  ProdInv$HighPCunit[19]
  ProdInv$HighPCtotal[20]<- ProdInv$Qty[20] *  ProdInv$HighPCunit[20]
  ProdInv$HighPCtotal[21]<- ProdInv$Qty[21] *  ProdInv$HighPCunit[21]
  ProdInv$HighPCtotal[22]<- ProdInv$Qty[22] *  ProdInv$HighPCunit[22]
  ProdInv$HighPCtotal[23]<- ProdInv$Qty[23] *  ProdInv$HighPCunit[23]
  ProdInv$HighPCtotal[24]<- ProdInv$Qty[24] *  ProdInv$HighPCunit[24]
  ProdInv$HighPCtotal[25]<- ProdInv$Qty[25] *  ProdInv$HighPCunit[25]
  ProdInv$HighPCtotal[26]<- ProdInv$Qty[26] *  ProdInv$HighPCunit[26]
  ProdInv$HighPCtotal[27]<- ProdInv$Qty[27] *  ProdInv$HighPCunit[27]
  ProdInv$HighPCtotal[28]<- ProdInv$Qty[28] *  ProdInv$HighPCunit[28]
  ProdInv$HighPCtotal[29]<- ProdInv$Qty[29] *  ProdInv$HighPCunit[29]
  ProdInv$HighPCtotal[30]<- ProdInv$Qty[30] *  ProdInv$HighPCunit[30]
  ProdInv$HighPCtotal[31]<- ProdInv$Qty[31] *  ProdInv$HighPCunit[31]
  ProdInv$HighPCtotal[32]<- ProdInv$Qty[32] *  ProdInv$HighPCunit[32]
  ProdInv$HighPCtotal[33]<- ProdInv$Qty[33] *  ProdInv$HighPCunit[33]
  ProdInv$HighPCtotal[34]<- ProdInv$Qty[34] *  ProdInv$HighPCunit[34]
  ProdInv$HighPCtotal[35]<- ProdInv$Qty[35] *  ProdInv$HighPCunit[35]
  ProdInv$HighPCtotal[36]<- ProdInv$Qty[36] *  ProdInv$HighPCunit[36]
  ProdInv$HighPCtotal[37]<- ProdInv$Qty[37] *  ProdInv$HighPCunit[37]
  ProdInv$HighPCtotal[38]<- ProdInv$Qty[38] *  ProdInv$HighPCunit[38]
  ProdInv$HighPCtotal[39]<- ProdInv$Qty[39] *  ProdInv$HighPCunit[39]
  ProdInv$HighPCtotal[40]<- ProdInv$Qty[40] *  ProdInv$HighPCunit[40]
  ProdInv$HighPCtotal[41]<- ProdInv$Qty[41] *  ProdInv$HighPCunit[41]
  ProdInv$HighPCtotal[42]<- ProdInv$Qty[42] *  ProdInv$HighPCunit[42]
  ProdInv$HighPCtotal[43]<- ProdInv$Qty[43] *  ProdInv$HighPCunit[43]
  ProdInv$HighPCtotal[44]<- ProdInv$Qty[44] *  ProdInv$HighPCunit[44]
  ProdInv$HighPCtotal[45]<- ProdInv$Qty[45] *  ProdInv$HighPCunit[45]
  ProdInv$HighPCtotal[46]<- ProdInv$Qty[46] *  ProdInv$HighPCunit[46]
  ProdInv$HighPCtotal[47]<- ProdInv$Qty[47] *  ProdInv$HighPCunit[47]
  ProdInv$HighPCtotal[48]<- ProdInv$Qty[48] *  ProdInv$HighPCunit[48]
  ProdInv$HighPCtotal[49]<- ProdInv$Qty[49] *  ProdInv$HighPCunit[49]
  ProdInv$HighPCtotal[50]<- ProdInv$Qty[50] *  ProdInv$HighPCunit[50]
  ProdInv$HighPCtotal[51]<- ProdInv$Qty[51] *  ProdInv$HighPCunit[51]
  ProdInv$HighPCtotal[52]<- ProdInv$Qty[52] *  ProdInv$HighPCunit[52]
  ProdInv$HighPCtotal[53]<- ProdInv$Qty[53] *  ProdInv$HighPCunit[53]
  ProdInv$HighPCtotal[54]<- ProdInv$Qty[54] *  ProdInv$HighPCunit[54]
  ProdInv$HighPCtotal[55]<- ProdInv$Qty[55] *  ProdInv$HighPCunit[55]
  ProdInv$HighPCtotal[56]<- ProdInv$Qty[56] *  ProdInv$HighPCunit[56]
  ProdInv$HighPCtotal[57]<- ProdInv$Qty[57] *  ProdInv$HighPCunit[57]
  ProdInv$HighPCtotal[58]<- ProdInv$Qty[58] *  ProdInv$HighPCunit[58]
  ProdInv$HighPCtotal[59]<- ProdInv$Qty[59] *  ProdInv$HighPCunit[59]
  ProdInv$HighPCtotal[60]<- ProdInv$Qty[60] *  ProdInv$HighPCunit[60]
  ProdInv$HighPCtotal[61]<- ProdInv$Qty[61] *  ProdInv$HighPCunit[61]
  ProdInv$HighPCtotal[62]<- ProdInv$Qty[62] *  ProdInv$HighPCunit[62]
  ProdInv$HighPCtotal[63]<- ProdInv$Qty[63] *  ProdInv$HighPCunit[63]
  ProdInv$HighPCtotal[64]<- ProdInv$Qty[64] *  ProdInv$HighPCunit[64]
  ProdInv$HighPCtotal[65]<- ProdInv$Qty[65] *  ProdInv$HighPCunit[65]
  ProdInv$HighPCtotal[66]<- ProdInv$Qty[66] *  ProdInv$HighPCunit[66]
  ProdInv$HighPCtotal[67]<- ProdInv$Qty[67] *  ProdInv$HighPCunit[67]
  ProdInv$HighPCtotal[68]<- ProdInv$Qty[68] *  ProdInv$HighPCunit[68]
  ProdInv$HighPCtotal[69]<- ProdInv$Qty[69] *  ProdInv$HighPCunit[69]
  ProdInv$HighPCtotal[70]<- ProdInv$Qty[70] *  ProdInv$HighPCunit[70]
  ProdInv$HighPCtotal[71]<- ProdInv$Qty[71] *  ProdInv$HighPCunit[71]
  ProdInv$HighPCtotal[72]<- ProdInv$Qty[72] *  ProdInv$HighPCunit[72]
  ProdInv$HighPCtotal[73]<- ProdInv$Qty[73] *  ProdInv$HighPCunit[73]
  ProdInv$HighPCtotal[74]<- ProdInv$Qty[74] *  ProdInv$HighPCunit[74]
  ProdInv$HighPCtotal[75]<- ProdInv$Qty[75] *  ProdInv$HighPCunit[75]
  ProdInv$HighPCtotal[76]<- ProdInv$Qty[76] *  ProdInv$HighPCunit[76]
  ProdInv$HighPCtotal[77]<- ProdInv$Qty[77] *  ProdInv$HighPCunit[77]
  ProdInv$HighPCtotal[78]<- ProdInv$Qty[78] *  ProdInv$HighPCunit[78]
  ProdInv$HighPCtotal[79]<- ProdInv$Qty[79] *  ProdInv$HighPCunit[79]
  ProdInv$HighPCtotal[80]<- ProdInv$Qty[80] *  ProdInv$HighPCunit[80]
  ProdInv$HighPCtotal[81]<- ProdInv$Qty[81] *  ProdInv$HighPCunit[81]
  ProdInv$HighPCtotal[82]<- ProdInv$Qty[82] *  ProdInv$HighPCunit[82]
  ProdInv$HighPCtotal[83]<- ProdInv$Qty[83] *  ProdInv$HighPCunit[83]
  ProdInv$HighPCtotal[84]<- ProdInv$Qty[84] *  ProdInv$HighPCunit[84]
  ProdInv$HighPCtotal[85]<- ProdInv$Qty[85] *  ProdInv$HighPCunit[85]
  ProdInv$HighPCtotal[86]<- ProdInv$Qty[86] *  ProdInv$HighPCunit[86]
  ProdInv$HighPCtotal[87]<- ProdInv$Qty[87] *  ProdInv$HighPCunit[87]
  ProdInv$HighPCtotal[88]<- ProdInv$Qty[88] *  ProdInv$HighPCunit[88]
  ProdInv$HighPCtotal[89]<- ProdInv$Qty[89] *  ProdInv$HighPCunit[89]
  ProdInv$HighPCtotal[90]<- ProdInv$Qty[90] *  ProdInv$HighPCunit[90]
  ProdInv$HighPCtotal[91]<- ProdInv$Qty[91] *  ProdInv$HighPCunit[91]
  ProdInv$HighPCtotal[92]<- ProdInv$Qty[92] *  ProdInv$HighPCunit[92]
  ProdInv$HighPCtotal[93]<- ProdInv$Qty[93] *  ProdInv$HighPCunit[93]
  ProdInv$HighPCtotal[94]<- ProdInv$Qty[94] *  ProdInv$HighPCunit[94]
  ProdInv$HighPCtotal[95]<- ProdInv$Qty[95] *  ProdInv$HighPCunit[95]
  ProdInv$HighPCtotal[96]<- ProdInv$Qty[96] *  ProdInv$HighPCunit[96]
  ProdInv$HighPCtotal[97]<- ProdInv$Qty[97] *  ProdInv$HighPCunit[97]
  ProdInv$HighPCtotal[98]<- ProdInv$Qty[98] *  ProdInv$HighPCunit[98]
  ProdInv$HighPCtotal[99]<- ProdInv$Qty[99] *  ProdInv$HighPCunit[99]
  ProdInv$HighPCtotal[100]<- ProdInv$Qty[100] *  ProdInv$HighPCunit[100]
  ProdInv$HighPCtotal[101]<- ProdInv$Qty[101] *  ProdInv$HighPCunit[101]
  ProdInv$HighPCtotal[102]<- ProdInv$Qty[102] *  ProdInv$HighPCunit[102]
  ProdInv$HighPCtotal[103]<- ProdInv$Qty[103] *  ProdInv$HighPCunit[103]
  ProdInv$HighPCtotal[104]<- ProdInv$Qty[104] *  ProdInv$HighPCunit[104]
  ProdInv$HighPCtotal[105]<- ProdInv$Qty[105] *  ProdInv$HighPCunit[105]
  ProdInv$HighPCtotal[106]<- ProdInv$Qty[106] *  ProdInv$HighPCunit[106]
  ProdInv$HighPCtotal[107]<- ProdInv$Qty[107] *  ProdInv$HighPCunit[107]
  ProdInv$HighPCtotal[108]<- ProdInv$Qty[108] *  ProdInv$HighPCunit[108]
  ProdInv$HighPCtotal[109]<- ProdInv$Qty[109] *  ProdInv$HighPCunit[109]
  ProdInv$HighPCtotal[110]<- ProdInv$Qty[110] *  ProdInv$HighPCunit[110]
  ProdInv$HighPCtotal[111]<- ProdInv$Qty[111] *  ProdInv$HighPCunit[111]
  ProdInv$HighPCtotal[112]<- ProdInv$Qty[112] *  ProdInv$HighPCunit[112]
  ProdInv$HighPCtotal[113]<- ProdInv$Qty[113] *  ProdInv$HighPCunit[113]
  ProdInv$HighPCtotal[114]<- ProdInv$Qty[114] *  ProdInv$HighPCunit[114]
  ProdInv$HighPCtotal[115]<- ProdInv$Qty[115] *  ProdInv$HighPCunit[115]
  ProdInv$HighPCtotal[116]<- ProdInv$Qty[116] *  ProdInv$HighPCunit[116]
  ProdInv$HighPCtotal[117]<- ProdInv$Qty[117] *  ProdInv$HighPCunit[117]
  ProdInv$HighPCtotal[118]<- ProdInv$Qty[118] *  ProdInv$HighPCunit[118]
  ProdInv$HighPCtotal[119]<- ProdInv$Qty[119] *  ProdInv$HighPCunit[119]
  ProdInv$HighPCtotal[120]<- ProdInv$Qty[120] *  ProdInv$HighPCunit[120]
  ProdInv$HighPCtotal[121]<- ProdInv$Qty[121] *  ProdInv$HighPCunit[121]
  ProdInv$HighPCtotal[122]<- ProdInv$Qty[122] *  ProdInv$HighPCunit[122]
  ProdInv$HighPCtotal[123]<- ProdInv$Qty[123] *  ProdInv$HighPCunit[123]
  ProdInv$HighPCtotal[124]<- ProdInv$Qty[124] *  ProdInv$HighPCunit[124]
  ProdInv$HighPCtotal[125]<- ProdInv$Qty[125] *  ProdInv$HighPCunit[125]
  ProdInv$HighPCtotal[126]<- ProdInv$Qty[126] *  ProdInv$HighPCunit[126]
  ProdInv$HighPCtotal[127]<- ProdInv$Qty[127] *  ProdInv$HighPCunit[127]
  ProdInv$HighPCtotal[128]<- ProdInv$Qty[128] *  ProdInv$HighPCunit[128]
  ProdInv$HighPCtotal[129]<- ProdInv$Qty[129] *  ProdInv$HighPCunit[129]
  ProdInv$HighPCtotal[130]<- ProdInv$Qty[130] *  ProdInv$HighPCunit[130]
  ProdInv$HighPCtotal[131]<- ProdInv$Qty[131] *  ProdInv$HighPCunit[131]
  ProdInv$HighPCtotal[132]<- ProdInv$Qty[132] *  ProdInv$HighPCunit[132]
  ProdInv$HighPCtotal[133]<- ProdInv$Qty[133] *  ProdInv$HighPCunit[133]
  ProdInv$HighPCtotal[134]<- ProdInv$Qty[134] *  ProdInv$HighPCunit[134]
  
  ProdInv$HighOPtotal[1]<- ProdInv$Qty[1] *  ProdInv$HighOPunit[1]
  ProdInv$HighOPtotal[2]<- ProdInv$Qty[2] *  ProdInv$HighOPunit[2]
  ProdInv$HighOPtotal[3]<- ProdInv$Qty[3] *  ProdInv$HighOPunit[3]
  ProdInv$HighOPtotal[4]<- ProdInv$Qty[4] *  ProdInv$HighOPunit[4]
  ProdInv$HighOPtotal[5]<- ProdInv$Qty[5] *  ProdInv$HighOPunit[5]
  ProdInv$HighOPtotal[6]<- ProdInv$Qty[6] *  ProdInv$HighOPunit[6]
  ProdInv$HighOPtotal[7]<- ProdInv$Qty[7] *  ProdInv$HighOPunit[7]
  ProdInv$HighOPtotal[8]<- ProdInv$Qty[8] *  ProdInv$HighOPunit[8]
  ProdInv$HighOPtotal[9]<- ProdInv$Qty[9] *  ProdInv$HighOPunit[9]
  ProdInv$HighOPtotal[10]<- ProdInv$Qty[10] *  ProdInv$HighOPunit[10]
  ProdInv$HighOPtotal[11]<- ProdInv$Qty[11] *  ProdInv$HighOPunit[11]
  ProdInv$HighOPtotal[12]<- ProdInv$Qty[12] *  ProdInv$HighOPunit[12]
  ProdInv$HighOPtotal[13]<- ProdInv$Qty[13] *  ProdInv$HighOPunit[13]
  ProdInv$HighOPtotal[14]<- ProdInv$Qty[14] *  ProdInv$HighOPunit[14]
  ProdInv$HighOPtotal[15]<- ProdInv$Qty[15] *  ProdInv$HighOPunit[15]
  ProdInv$HighOPtotal[16]<- ProdInv$Qty[16] *  ProdInv$HighOPunit[16]
  ProdInv$HighOPtotal[17]<- ProdInv$Qty[17] *  ProdInv$HighOPunit[17]
  ProdInv$HighOPtotal[18]<- ProdInv$Qty[18] *  ProdInv$HighOPunit[18]
  ProdInv$HighOPtotal[19]<- ProdInv$Qty[19] *  ProdInv$HighOPunit[19]
  ProdInv$HighOPtotal[20]<- ProdInv$Qty[20] *  ProdInv$HighOPunit[20]
  ProdInv$HighOPtotal[21]<- ProdInv$Qty[21] *  ProdInv$HighOPunit[21]
  ProdInv$HighOPtotal[22]<- ProdInv$Qty[22] *  ProdInv$HighOPunit[22]
  ProdInv$HighOPtotal[23]<- ProdInv$Qty[23] *  ProdInv$HighOPunit[23]
  ProdInv$HighOPtotal[24]<- ProdInv$Qty[24] *  ProdInv$HighOPunit[24]
  ProdInv$HighOPtotal[25]<- ProdInv$Qty[25] *  ProdInv$HighOPunit[25]
  ProdInv$HighOPtotal[26]<- ProdInv$Qty[26] *  ProdInv$HighOPunit[26]
  ProdInv$HighOPtotal[27]<- ProdInv$Qty[27] *  ProdInv$HighOPunit[27]
  ProdInv$HighOPtotal[28]<- ProdInv$Qty[28] *  ProdInv$HighOPunit[28]
  ProdInv$HighOPtotal[29]<- ProdInv$Qty[29] *  ProdInv$HighOPunit[29]
  ProdInv$HighOPtotal[30]<- ProdInv$Qty[30] *  ProdInv$HighOPunit[30]
  ProdInv$HighOPtotal[31]<- ProdInv$Qty[31] *  ProdInv$HighOPunit[31]
  ProdInv$HighOPtotal[32]<- ProdInv$Qty[32] *  ProdInv$HighOPunit[32]
  ProdInv$HighOPtotal[33]<- ProdInv$Qty[33] *  ProdInv$HighOPunit[33]
  ProdInv$HighOPtotal[34]<- ProdInv$Qty[34] *  ProdInv$HighOPunit[34]
  ProdInv$HighOPtotal[35]<- ProdInv$Qty[35] *  ProdInv$HighOPunit[35]
  ProdInv$HighOPtotal[36]<- ProdInv$Qty[36] *  ProdInv$HighOPunit[36]
  ProdInv$HighOPtotal[37]<- ProdInv$Qty[37] *  ProdInv$HighOPunit[37]
  ProdInv$HighOPtotal[38]<- ProdInv$Qty[38] *  ProdInv$HighOPunit[38]
  ProdInv$HighOPtotal[39]<- ProdInv$Qty[39] *  ProdInv$HighOPunit[39]
  ProdInv$HighOPtotal[40]<- ProdInv$Qty[40] *  ProdInv$HighOPunit[40]
  ProdInv$HighOPtotal[41]<- ProdInv$Qty[41] *  ProdInv$HighOPunit[41]
  ProdInv$HighOPtotal[42]<- ProdInv$Qty[42] *  ProdInv$HighOPunit[42]
  ProdInv$HighOPtotal[43]<- ProdInv$Qty[43] *  ProdInv$HighOPunit[43]
  ProdInv$HighOPtotal[44]<- ProdInv$Qty[44] *  ProdInv$HighOPunit[44]
  ProdInv$HighOPtotal[45]<- ProdInv$Qty[45] *  ProdInv$HighOPunit[45]
  ProdInv$HighOPtotal[46]<- ProdInv$Qty[46] *  ProdInv$HighOPunit[46]
  ProdInv$HighOPtotal[47]<- ProdInv$Qty[47] *  ProdInv$HighOPunit[47]
  ProdInv$HighOPtotal[48]<- ProdInv$Qty[48] *  ProdInv$HighOPunit[48]
  ProdInv$HighOPtotal[49]<- ProdInv$Qty[49] *  ProdInv$HighOPunit[49]
  ProdInv$HighOPtotal[50]<- ProdInv$Qty[50] *  ProdInv$HighOPunit[50]
  ProdInv$HighOPtotal[51]<- ProdInv$Qty[51] *  ProdInv$HighOPunit[51]
  ProdInv$HighOPtotal[52]<- ProdInv$Qty[52] *  ProdInv$HighOPunit[52]
  ProdInv$HighOPtotal[53]<- ProdInv$Qty[53] *  ProdInv$HighOPunit[53]
  ProdInv$HighOPtotal[54]<- ProdInv$Qty[54] *  ProdInv$HighOPunit[54]
  ProdInv$HighOPtotal[55]<- ProdInv$Qty[55] *  ProdInv$HighOPunit[55]
  ProdInv$HighOPtotal[56]<- ProdInv$Qty[56] *  ProdInv$HighOPunit[56]
  ProdInv$HighOPtotal[57]<- ProdInv$Qty[57] *  ProdInv$HighOPunit[57]
  ProdInv$HighOPtotal[58]<- ProdInv$Qty[58] *  ProdInv$HighOPunit[58]
  ProdInv$HighOPtotal[59]<- ProdInv$Qty[59] *  ProdInv$HighOPunit[59]
  ProdInv$HighOPtotal[60]<- ProdInv$Qty[60] *  ProdInv$HighOPunit[60]
  ProdInv$HighOPtotal[61]<- ProdInv$Qty[61] *  ProdInv$HighOPunit[61]
  ProdInv$HighOPtotal[62]<- ProdInv$Qty[62] *  ProdInv$HighOPunit[62]
  ProdInv$HighOPtotal[63]<- ProdInv$Qty[63] *  ProdInv$HighOPunit[63]
  ProdInv$HighOPtotal[64]<- ProdInv$Qty[64] *  ProdInv$HighOPunit[64]
  ProdInv$HighOPtotal[65]<- ProdInv$Qty[65] *  ProdInv$HighOPunit[65]
  ProdInv$HighOPtotal[66]<- ProdInv$Qty[66] *  ProdInv$HighOPunit[66]
  ProdInv$HighOPtotal[67]<- ProdInv$Qty[67] *  ProdInv$HighOPunit[67]
  ProdInv$HighOPtotal[68]<- ProdInv$Qty[68] *  ProdInv$HighOPunit[68]
  ProdInv$HighOPtotal[69]<- ProdInv$Qty[69] *  ProdInv$HighOPunit[69]
  ProdInv$HighOPtotal[70]<- ProdInv$Qty[70] *  ProdInv$HighOPunit[70]
  ProdInv$HighOPtotal[71]<- ProdInv$Qty[71] *  ProdInv$HighOPunit[71]
  ProdInv$HighOPtotal[72]<- ProdInv$Qty[72] *  ProdInv$HighOPunit[72]
  ProdInv$HighOPtotal[73]<- ProdInv$Qty[73] *  ProdInv$HighOPunit[73]
  ProdInv$HighOPtotal[74]<- ProdInv$Qty[74] *  ProdInv$HighOPunit[74]
  ProdInv$HighOPtotal[75]<- ProdInv$Qty[75] *  ProdInv$HighOPunit[75]
  ProdInv$HighOPtotal[76]<- ProdInv$Qty[76] *  ProdInv$HighOPunit[76]
  ProdInv$HighOPtotal[77]<- ProdInv$Qty[77] *  ProdInv$HighOPunit[77]
  ProdInv$HighOPtotal[78]<- ProdInv$Qty[78] *  ProdInv$HighOPunit[78]
  ProdInv$HighOPtotal[79]<- ProdInv$Qty[79] *  ProdInv$HighOPunit[79]
  ProdInv$HighOPtotal[80]<- ProdInv$Qty[80] *  ProdInv$HighOPunit[80]
  ProdInv$HighOPtotal[81]<- ProdInv$Qty[81] *  ProdInv$HighOPunit[81]
  ProdInv$HighOPtotal[82]<- ProdInv$Qty[82] *  ProdInv$HighOPunit[82]
  ProdInv$HighOPtotal[83]<- ProdInv$Qty[83] *  ProdInv$HighOPunit[83]
  ProdInv$HighOPtotal[84]<- ProdInv$Qty[84] *  ProdInv$HighOPunit[84]
  ProdInv$HighOPtotal[85]<- ProdInv$Qty[85] *  ProdInv$HighOPunit[85]
  ProdInv$HighOPtotal[86]<- ProdInv$Qty[86] *  ProdInv$HighOPunit[86]
  ProdInv$HighOPtotal[87]<- ProdInv$Qty[87] *  ProdInv$HighOPunit[87]
  ProdInv$HighOPtotal[88]<- ProdInv$Qty[88] *  ProdInv$HighOPunit[88]
  ProdInv$HighOPtotal[89]<- ProdInv$Qty[89] *  ProdInv$HighOPunit[89]
  ProdInv$HighOPtotal[90]<- ProdInv$Qty[90] *  ProdInv$HighOPunit[90]
  ProdInv$HighOPtotal[91]<- ProdInv$Qty[91] *  ProdInv$HighOPunit[91]
  ProdInv$HighOPtotal[92]<- ProdInv$Qty[92] *  ProdInv$HighOPunit[92]
  ProdInv$HighOPtotal[93]<- ProdInv$Qty[93] *  ProdInv$HighOPunit[93]
  ProdInv$HighOPtotal[94]<- ProdInv$Qty[94] *  ProdInv$HighOPunit[94]
  ProdInv$HighOPtotal[95]<- ProdInv$Qty[95] *  ProdInv$HighOPunit[95]
  ProdInv$HighOPtotal[96]<- ProdInv$Qty[96] *  ProdInv$HighOPunit[96]
  ProdInv$HighOPtotal[97]<- ProdInv$Qty[97] *  ProdInv$HighOPunit[97]
  ProdInv$HighOPtotal[98]<- ProdInv$Qty[98] *  ProdInv$HighOPunit[98]
  ProdInv$HighOPtotal[99]<- ProdInv$Qty[99] *  ProdInv$HighOPunit[99]
  ProdInv$HighOPtotal[100]<- ProdInv$Qty[100] *  ProdInv$HighOPunit[100]
  ProdInv$HighOPtotal[101]<- ProdInv$Qty[101] *  ProdInv$HighOPunit[101]
  ProdInv$HighOPtotal[102]<- ProdInv$Qty[102] *  ProdInv$HighOPunit[102]
  ProdInv$HighOPtotal[103]<- ProdInv$Qty[103] *  ProdInv$HighOPunit[103]
  ProdInv$HighOPtotal[104]<- ProdInv$Qty[104] *  ProdInv$HighOPunit[104]
  ProdInv$HighOPtotal[105]<- ProdInv$Qty[105] *  ProdInv$HighOPunit[105]
  ProdInv$HighOPtotal[106]<- ProdInv$Qty[106] *  ProdInv$HighOPunit[106]
  ProdInv$HighOPtotal[107]<- ProdInv$Qty[107] *  ProdInv$HighOPunit[107]
  ProdInv$HighOPtotal[108]<- ProdInv$Qty[108] *  ProdInv$HighOPunit[108]
  ProdInv$HighOPtotal[109]<- ProdInv$Qty[109] *  ProdInv$HighOPunit[109]
  ProdInv$HighOPtotal[110]<- ProdInv$Qty[110] *  ProdInv$HighOPunit[110]
  ProdInv$HighOPtotal[111]<- ProdInv$Qty[111] *  ProdInv$HighOPunit[111]
  ProdInv$HighOPtotal[112]<- ProdInv$Qty[112] *  ProdInv$HighOPunit[112]
  ProdInv$HighOPtotal[113]<- ProdInv$Qty[113] *  ProdInv$HighOPunit[113]
  ProdInv$HighOPtotal[114]<- ProdInv$Qty[114] *  ProdInv$HighOPunit[114]
  ProdInv$HighOPtotal[115]<- ProdInv$Qty[115] *  ProdInv$HighOPunit[115]
  ProdInv$HighOPtotal[116]<- ProdInv$Qty[116] *  ProdInv$HighOPunit[116]
  ProdInv$HighOPtotal[117]<- ProdInv$Qty[117] *  ProdInv$HighOPunit[117]
  ProdInv$HighOPtotal[118]<- ProdInv$Qty[118] *  ProdInv$HighOPunit[118]
  ProdInv$HighOPtotal[119]<- ProdInv$Qty[119] *  ProdInv$HighOPunit[119]
  ProdInv$HighOPtotal[120]<- ProdInv$Qty[120] *  ProdInv$HighOPunit[120]
  ProdInv$HighOPtotal[121]<- ProdInv$Qty[121] *  ProdInv$HighOPunit[121]
  ProdInv$HighOPtotal[122]<- ProdInv$Qty[122] *  ProdInv$HighOPunit[122]
  ProdInv$HighOPtotal[123]<- ProdInv$Qty[123] *  ProdInv$HighOPunit[123]
  ProdInv$HighOPtotal[124]<- ProdInv$Qty[124] *  ProdInv$HighOPunit[124]
  ProdInv$HighOPtotal[125]<- ProdInv$Qty[125] *  ProdInv$HighOPunit[125]
  ProdInv$HighOPtotal[126]<- ProdInv$Qty[126] *  ProdInv$HighOPunit[126]
  ProdInv$HighOPtotal[127]<- ProdInv$Qty[127] *  ProdInv$HighOPunit[127]
  ProdInv$HighOPtotal[128]<- ProdInv$Qty[128] *  ProdInv$HighOPunit[128]
  ProdInv$HighOPtotal[129]<- ProdInv$Qty[129] *  ProdInv$HighOPunit[129]
  ProdInv$HighOPtotal[130]<- ProdInv$Qty[130] *  ProdInv$HighOPunit[130]
  ProdInv$HighOPtotal[131]<- ProdInv$Qty[131] *  ProdInv$HighOPunit[131]
  ProdInv$HighOPtotal[132]<- ProdInv$Qty[132] *  ProdInv$HighOPunit[132]
  ProdInv$HighOPtotal[133]<- ProdInv$Qty[133] *  ProdInv$HighOPunit[133]
  ProdInv$HighOPtotal[134]<- ProdInv$Qty[134] *  ProdInv$HighOPunit[134]
  
  
  ProdInv$HighHDtotal[1]<- ProdInv$Qty[1] *  ProdInv$HighHDunit[1]
  ProdInv$HighHDtotal[2]<- ProdInv$Qty[2] *  ProdInv$HighHDunit[2]
  ProdInv$HighHDtotal[3]<- ProdInv$Qty[3] *  ProdInv$HighHDunit[3]
  ProdInv$HighHDtotal[4]<- ProdInv$Qty[4] *  ProdInv$HighHDunit[4]
  ProdInv$HighHDtotal[5]<- ProdInv$Qty[5] *  ProdInv$HighHDunit[5]
  ProdInv$HighHDtotal[6]<- ProdInv$Qty[6] *  ProdInv$HighHDunit[6]
  ProdInv$HighHDtotal[7]<- ProdInv$Qty[7] *  ProdInv$HighHDunit[7]
  ProdInv$HighHDtotal[8]<- ProdInv$Qty[8] *  ProdInv$HighHDunit[8]
  ProdInv$HighHDtotal[9]<- ProdInv$Qty[9] *  ProdInv$HighHDunit[9]
  ProdInv$HighHDtotal[10]<- ProdInv$Qty[10] *  ProdInv$HighHDunit[10]
  ProdInv$HighHDtotal[11]<- ProdInv$Qty[11] *  ProdInv$HighHDunit[11]
  ProdInv$HighHDtotal[12]<- ProdInv$Qty[12] *  ProdInv$HighHDunit[12]
  ProdInv$HighHDtotal[13]<- ProdInv$Qty[13] *  ProdInv$HighHDunit[13]
  ProdInv$HighHDtotal[14]<- ProdInv$Qty[14] *  ProdInv$HighHDunit[14]
  ProdInv$HighHDtotal[15]<- ProdInv$Qty[15] *  ProdInv$HighHDunit[15]
  ProdInv$HighHDtotal[16]<- ProdInv$Qty[16] *  ProdInv$HighHDunit[16]
  ProdInv$HighHDtotal[17]<- ProdInv$Qty[17] *  ProdInv$HighHDunit[17]
  ProdInv$HighHDtotal[18]<- ProdInv$Qty[18] *  ProdInv$HighHDunit[18]
  ProdInv$HighHDtotal[19]<- ProdInv$Qty[19] *  ProdInv$HighHDunit[19]
  ProdInv$HighHDtotal[20]<- ProdInv$Qty[20] *  ProdInv$HighHDunit[20]
  ProdInv$HighHDtotal[21]<- ProdInv$Qty[21] *  ProdInv$HighHDunit[21]
  ProdInv$HighHDtotal[22]<- ProdInv$Qty[22] *  ProdInv$HighHDunit[22]
  ProdInv$HighHDtotal[23]<- ProdInv$Qty[23] *  ProdInv$HighHDunit[23]
  ProdInv$HighHDtotal[24]<- ProdInv$Qty[24] *  ProdInv$HighHDunit[24]
  ProdInv$HighHDtotal[25]<- ProdInv$Qty[25] *  ProdInv$HighHDunit[25]
  ProdInv$HighHDtotal[26]<- ProdInv$Qty[26] *  ProdInv$HighHDunit[26]
  ProdInv$HighHDtotal[27]<- ProdInv$Qty[27] *  ProdInv$HighHDunit[27]
  ProdInv$HighHDtotal[28]<- ProdInv$Qty[28] *  ProdInv$HighHDunit[28]
  ProdInv$HighHDtotal[29]<- ProdInv$Qty[29] *  ProdInv$HighHDunit[29]
  ProdInv$HighHDtotal[30]<- ProdInv$Qty[30] *  ProdInv$HighHDunit[30]
  ProdInv$HighHDtotal[31]<- ProdInv$Qty[31] *  ProdInv$HighHDunit[31]
  ProdInv$HighHDtotal[32]<- ProdInv$Qty[32] *  ProdInv$HighHDunit[32]
  ProdInv$HighHDtotal[33]<- ProdInv$Qty[33] *  ProdInv$HighHDunit[33]
  ProdInv$HighHDtotal[34]<- ProdInv$Qty[34] *  ProdInv$HighHDunit[34]
  ProdInv$HighHDtotal[35]<- ProdInv$Qty[35] *  ProdInv$HighHDunit[35]
  ProdInv$HighHDtotal[36]<- ProdInv$Qty[36] *  ProdInv$HighHDunit[36]
  ProdInv$HighHDtotal[37]<- ProdInv$Qty[37] *  ProdInv$HighHDunit[37]
  ProdInv$HighHDtotal[38]<- ProdInv$Qty[38] *  ProdInv$HighHDunit[38]
  ProdInv$HighHDtotal[39]<- ProdInv$Qty[39] *  ProdInv$HighHDunit[39]
  ProdInv$HighHDtotal[40]<- ProdInv$Qty[40] *  ProdInv$HighHDunit[40]
  ProdInv$HighHDtotal[41]<- ProdInv$Qty[41] *  ProdInv$HighHDunit[41]
  ProdInv$HighHDtotal[42]<- ProdInv$Qty[42] *  ProdInv$HighHDunit[42]
  ProdInv$HighHDtotal[43]<- ProdInv$Qty[43] *  ProdInv$HighHDunit[43]
  ProdInv$HighHDtotal[44]<- ProdInv$Qty[44] *  ProdInv$HighHDunit[44]
  ProdInv$HighHDtotal[45]<- ProdInv$Qty[45] *  ProdInv$HighHDunit[45]
  ProdInv$HighHDtotal[46]<- ProdInv$Qty[46] *  ProdInv$HighHDunit[46]
  ProdInv$HighHDtotal[47]<- ProdInv$Qty[47] *  ProdInv$HighHDunit[47]
  ProdInv$HighHDtotal[48]<- ProdInv$Qty[48] *  ProdInv$HighHDunit[48]
  ProdInv$HighHDtotal[49]<- ProdInv$Qty[49] *  ProdInv$HighHDunit[49]
  ProdInv$HighHDtotal[50]<- ProdInv$Qty[50] *  ProdInv$HighHDunit[50]
  ProdInv$HighHDtotal[51]<- ProdInv$Qty[51] *  ProdInv$HighHDunit[51]
  ProdInv$HighHDtotal[52]<- ProdInv$Qty[52] *  ProdInv$HighHDunit[52]
  ProdInv$HighHDtotal[53]<- ProdInv$Qty[53] *  ProdInv$HighHDunit[53]
  ProdInv$HighHDtotal[54]<- ProdInv$Qty[54] *  ProdInv$HighHDunit[54]
  ProdInv$HighHDtotal[55]<- ProdInv$Qty[55] *  ProdInv$HighHDunit[55]
  ProdInv$HighHDtotal[56]<- ProdInv$Qty[56] *  ProdInv$HighHDunit[56]
  ProdInv$HighHDtotal[57]<- ProdInv$Qty[57] *  ProdInv$HighHDunit[57]
  ProdInv$HighHDtotal[58]<- ProdInv$Qty[58] *  ProdInv$HighHDunit[58]
  ProdInv$HighHDtotal[59]<- ProdInv$Qty[59] *  ProdInv$HighHDunit[59]
  ProdInv$HighHDtotal[60]<- ProdInv$Qty[60] *  ProdInv$HighHDunit[60]
  ProdInv$HighHDtotal[61]<- ProdInv$Qty[61] *  ProdInv$HighHDunit[61]
  ProdInv$HighHDtotal[62]<- ProdInv$Qty[62] *  ProdInv$HighHDunit[62]
  ProdInv$HighHDtotal[63]<- ProdInv$Qty[63] *  ProdInv$HighHDunit[63]
  ProdInv$HighHDtotal[64]<- ProdInv$Qty[64] *  ProdInv$HighHDunit[64]
  ProdInv$HighHDtotal[65]<- ProdInv$Qty[65] *  ProdInv$HighHDunit[65]
  ProdInv$HighHDtotal[66]<- ProdInv$Qty[66] *  ProdInv$HighHDunit[66]
  ProdInv$HighHDtotal[67]<- ProdInv$Qty[67] *  ProdInv$HighHDunit[67]
  ProdInv$HighHDtotal[68]<- ProdInv$Qty[68] *  ProdInv$HighHDunit[68]
  ProdInv$HighHDtotal[69]<- ProdInv$Qty[69] *  ProdInv$HighHDunit[69]
  ProdInv$HighHDtotal[70]<- ProdInv$Qty[70] *  ProdInv$HighHDunit[70]
  ProdInv$HighHDtotal[71]<- ProdInv$Qty[71] *  ProdInv$HighHDunit[71]
  ProdInv$HighHDtotal[72]<- ProdInv$Qty[72] *  ProdInv$HighHDunit[72]
  ProdInv$HighHDtotal[73]<- ProdInv$Qty[73] *  ProdInv$HighHDunit[73]
  ProdInv$HighHDtotal[74]<- ProdInv$Qty[74] *  ProdInv$HighHDunit[74]
  ProdInv$HighHDtotal[75]<- ProdInv$Qty[75] *  ProdInv$HighHDunit[75]
  ProdInv$HighHDtotal[76]<- ProdInv$Qty[76] *  ProdInv$HighHDunit[76]
  ProdInv$HighHDtotal[77]<- ProdInv$Qty[77] *  ProdInv$HighHDunit[77]
  ProdInv$HighHDtotal[78]<- ProdInv$Qty[78] *  ProdInv$HighHDunit[78]
  ProdInv$HighHDtotal[79]<- ProdInv$Qty[79] *  ProdInv$HighHDunit[79]
  ProdInv$HighHDtotal[80]<- ProdInv$Qty[80] *  ProdInv$HighHDunit[80]
  ProdInv$HighHDtotal[81]<- ProdInv$Qty[81] *  ProdInv$HighHDunit[81]
  ProdInv$HighHDtotal[82]<- ProdInv$Qty[82] *  ProdInv$HighHDunit[82]
  ProdInv$HighHDtotal[83]<- ProdInv$Qty[83] *  ProdInv$HighHDunit[83]
  ProdInv$HighHDtotal[84]<- ProdInv$Qty[84] *  ProdInv$HighHDunit[84]
  ProdInv$HighHDtotal[85]<- ProdInv$Qty[85] *  ProdInv$HighHDunit[85]
  ProdInv$HighHDtotal[86]<- ProdInv$Qty[86] *  ProdInv$HighHDunit[86]
  ProdInv$HighHDtotal[87]<- ProdInv$Qty[87] *  ProdInv$HighHDunit[87]
  ProdInv$HighHDtotal[88]<- ProdInv$Qty[88] *  ProdInv$HighHDunit[88]
  ProdInv$HighHDtotal[89]<- ProdInv$Qty[89] *  ProdInv$HighHDunit[89]
  ProdInv$HighHDtotal[90]<- ProdInv$Qty[90] *  ProdInv$HighHDunit[90]
  ProdInv$HighHDtotal[91]<- ProdInv$Qty[91] *  ProdInv$HighHDunit[91]
  ProdInv$HighHDtotal[92]<- ProdInv$Qty[92] *  ProdInv$HighHDunit[92]
  ProdInv$HighHDtotal[93]<- ProdInv$Qty[93] *  ProdInv$HighHDunit[93]
  ProdInv$HighHDtotal[94]<- ProdInv$Qty[94] *  ProdInv$HighHDunit[94]
  ProdInv$HighHDtotal[95]<- ProdInv$Qty[95] *  ProdInv$HighHDunit[95]
  ProdInv$HighHDtotal[96]<- ProdInv$Qty[96] *  ProdInv$HighHDunit[96]
  ProdInv$HighHDtotal[97]<- ProdInv$Qty[97] *  ProdInv$HighHDunit[97]
  ProdInv$HighHDtotal[98]<- ProdInv$Qty[98] *  ProdInv$HighHDunit[98]
  ProdInv$HighHDtotal[99]<- ProdInv$Qty[99] *  ProdInv$HighHDunit[99]
  ProdInv$HighHDtotal[100]<- ProdInv$Qty[100] *  ProdInv$HighHDunit[100]
  ProdInv$HighHDtotal[101]<- ProdInv$Qty[101] *  ProdInv$HighHDunit[101]
  ProdInv$HighHDtotal[102]<- ProdInv$Qty[102] *  ProdInv$HighHDunit[102]
  ProdInv$HighHDtotal[103]<- ProdInv$Qty[103] *  ProdInv$HighHDunit[103]
  ProdInv$HighHDtotal[104]<- ProdInv$Qty[104] *  ProdInv$HighHDunit[104]
  ProdInv$HighHDtotal[105]<- ProdInv$Qty[105] *  ProdInv$HighHDunit[105]
  ProdInv$HighHDtotal[106]<- ProdInv$Qty[106] *  ProdInv$HighHDunit[106]
  ProdInv$HighHDtotal[107]<- ProdInv$Qty[107] *  ProdInv$HighHDunit[107]
  ProdInv$HighHDtotal[108]<- ProdInv$Qty[108] *  ProdInv$HighHDunit[108]
  ProdInv$HighHDtotal[109]<- ProdInv$Qty[109] *  ProdInv$HighHDunit[109]
  ProdInv$HighHDtotal[110]<- ProdInv$Qty[110] *  ProdInv$HighHDunit[110]
  ProdInv$HighHDtotal[111]<- ProdInv$Qty[111] *  ProdInv$HighHDunit[111]
  ProdInv$HighHDtotal[112]<- ProdInv$Qty[112] *  ProdInv$HighHDunit[112]
  ProdInv$HighHDtotal[113]<- ProdInv$Qty[113] *  ProdInv$HighHDunit[113]
  ProdInv$HighHDtotal[114]<- ProdInv$Qty[114] *  ProdInv$HighHDunit[114]
  ProdInv$HighHDtotal[115]<- ProdInv$Qty[115] *  ProdInv$HighHDunit[115]
  ProdInv$HighHDtotal[116]<- ProdInv$Qty[116] *  ProdInv$HighHDunit[116]
  ProdInv$HighHDtotal[117]<- ProdInv$Qty[117] *  ProdInv$HighHDunit[117]
  ProdInv$HighHDtotal[118]<- ProdInv$Qty[118] *  ProdInv$HighHDunit[118]
  ProdInv$HighHDtotal[119]<- ProdInv$Qty[119] *  ProdInv$HighHDunit[119]
  ProdInv$HighHDtotal[120]<- ProdInv$Qty[120] *  ProdInv$HighHDunit[120]
  ProdInv$HighHDtotal[121]<- ProdInv$Qty[121] *  ProdInv$HighHDunit[121]
  ProdInv$HighHDtotal[122]<- ProdInv$Qty[122] *  ProdInv$HighHDunit[122]
  ProdInv$HighHDtotal[123]<- ProdInv$Qty[123] *  ProdInv$HighHDunit[123]
  ProdInv$HighHDtotal[124]<- ProdInv$Qty[124] *  ProdInv$HighHDunit[124]
  ProdInv$HighHDtotal[125]<- ProdInv$Qty[125] *  ProdInv$HighHDunit[125]
  ProdInv$HighHDtotal[126]<- ProdInv$Qty[126] *  ProdInv$HighHDunit[126]
  ProdInv$HighHDtotal[127]<- ProdInv$Qty[127] *  ProdInv$HighHDunit[127]
  ProdInv$HighHDtotal[128]<- ProdInv$Qty[128] *  ProdInv$HighHDunit[128]
  ProdInv$HighHDtotal[129]<- ProdInv$Qty[129] *  ProdInv$HighHDunit[129]
  ProdInv$HighHDtotal[130]<- ProdInv$Qty[130] *  ProdInv$HighHDunit[130]
  ProdInv$HighHDtotal[131]<- ProdInv$Qty[131] *  ProdInv$HighHDunit[131]
  ProdInv$HighHDtotal[132]<- ProdInv$Qty[132] *  ProdInv$HighHDunit[132]
  ProdInv$HighHDtotal[133]<- ProdInv$Qty[133] *  ProdInv$HighHDunit[133]
  ProdInv$HighHDtotal[134]<- ProdInv$Qty[134] *  ProdInv$HighHDunit[134]
  
  # Momentary Max #
  
  ProdInv$MaxPCtotal[1]<- ProdInv$Qty[1] *  ProdInv$MaxPCunit[1]
  ProdInv$MaxPCtotal[2]<- ProdInv$Qty[2] *  ProdInv$MaxPCunit[2]
  ProdInv$MaxPCtotal[3]<- ProdInv$Qty[3] *  ProdInv$MaxPCunit[3]
  ProdInv$MaxPCtotal[4]<- ProdInv$Qty[4] *  ProdInv$MaxPCunit[4]
  ProdInv$MaxPCtotal[5]<- ProdInv$Qty[5] *  ProdInv$MaxPCunit[5]
  ProdInv$MaxPCtotal[6]<- ProdInv$Qty[6] *  ProdInv$MaxPCunit[6]
  ProdInv$MaxPCtotal[7]<- ProdInv$Qty[7] *  ProdInv$MaxPCunit[7]
  ProdInv$MaxPCtotal[8]<- ProdInv$Qty[8] *  ProdInv$MaxPCunit[8]
  ProdInv$MaxPCtotal[9]<- ProdInv$Qty[9] *  ProdInv$MaxPCunit[9]
  ProdInv$MaxPCtotal[10]<- ProdInv$Qty[10] *  ProdInv$MaxPCunit[10]
  ProdInv$MaxPCtotal[11]<- ProdInv$Qty[11] *  ProdInv$MaxPCunit[11]
  ProdInv$MaxPCtotal[12]<- ProdInv$Qty[12] *  ProdInv$MaxPCunit[12]
  ProdInv$MaxPCtotal[13]<- ProdInv$Qty[13] *  ProdInv$MaxPCunit[13]
  ProdInv$MaxPCtotal[14]<- ProdInv$Qty[14] *  ProdInv$MaxPCunit[14]
  ProdInv$MaxPCtotal[15]<- ProdInv$Qty[15] *  ProdInv$MaxPCunit[15]
  ProdInv$MaxPCtotal[16]<- ProdInv$Qty[16] *  ProdInv$MaxPCunit[16]
  ProdInv$MaxPCtotal[17]<- ProdInv$Qty[17] *  ProdInv$MaxPCunit[17]
  ProdInv$MaxPCtotal[18]<- ProdInv$Qty[18] *  ProdInv$MaxPCunit[18]
  ProdInv$MaxPCtotal[19]<- ProdInv$Qty[19] *  ProdInv$MaxPCunit[19]
  ProdInv$MaxPCtotal[20]<- ProdInv$Qty[20] *  ProdInv$MaxPCunit[20]
  ProdInv$MaxPCtotal[21]<- ProdInv$Qty[21] *  ProdInv$MaxPCunit[21]
  ProdInv$MaxPCtotal[22]<- ProdInv$Qty[22] *  ProdInv$MaxPCunit[22]
  ProdInv$MaxPCtotal[23]<- ProdInv$Qty[23] *  ProdInv$MaxPCunit[23]
  ProdInv$MaxPCtotal[24]<- ProdInv$Qty[24] *  ProdInv$MaxPCunit[24]
  ProdInv$MaxPCtotal[25]<- ProdInv$Qty[25] *  ProdInv$MaxPCunit[25]
  ProdInv$MaxPCtotal[26]<- ProdInv$Qty[26] *  ProdInv$MaxPCunit[26]
  ProdInv$MaxPCtotal[27]<- ProdInv$Qty[27] *  ProdInv$MaxPCunit[27]
  ProdInv$MaxPCtotal[28]<- ProdInv$Qty[28] *  ProdInv$MaxPCunit[28]
  ProdInv$MaxPCtotal[29]<- ProdInv$Qty[29] *  ProdInv$MaxPCunit[29]
  ProdInv$MaxPCtotal[30]<- ProdInv$Qty[30] *  ProdInv$MaxPCunit[30]
  ProdInv$MaxPCtotal[31]<- ProdInv$Qty[31] *  ProdInv$MaxPCunit[31]
  ProdInv$MaxPCtotal[32]<- ProdInv$Qty[32] *  ProdInv$MaxPCunit[32]
  ProdInv$MaxPCtotal[33]<- ProdInv$Qty[33] *  ProdInv$MaxPCunit[33]
  ProdInv$MaxPCtotal[34]<- ProdInv$Qty[34] *  ProdInv$MaxPCunit[34]
  ProdInv$MaxPCtotal[35]<- ProdInv$Qty[35] *  ProdInv$MaxPCunit[35]
  ProdInv$MaxPCtotal[36]<- ProdInv$Qty[36] *  ProdInv$MaxPCunit[36]
  ProdInv$MaxPCtotal[37]<- ProdInv$Qty[37] *  ProdInv$MaxPCunit[37]
  ProdInv$MaxPCtotal[38]<- ProdInv$Qty[38] *  ProdInv$MaxPCunit[38]
  ProdInv$MaxPCtotal[39]<- ProdInv$Qty[39] *  ProdInv$MaxPCunit[39]
  ProdInv$MaxPCtotal[40]<- ProdInv$Qty[40] *  ProdInv$MaxPCunit[40]
  ProdInv$MaxPCtotal[41]<- ProdInv$Qty[41] *  ProdInv$MaxPCunit[41]
  ProdInv$MaxPCtotal[42]<- ProdInv$Qty[42] *  ProdInv$MaxPCunit[42]
  ProdInv$MaxPCtotal[43]<- ProdInv$Qty[43] *  ProdInv$MaxPCunit[43]
  ProdInv$MaxPCtotal[44]<- ProdInv$Qty[44] *  ProdInv$MaxPCunit[44]
  ProdInv$MaxPCtotal[45]<- ProdInv$Qty[45] *  ProdInv$MaxPCunit[45]
  ProdInv$MaxPCtotal[46]<- ProdInv$Qty[46] *  ProdInv$MaxPCunit[46]
  ProdInv$MaxPCtotal[47]<- ProdInv$Qty[47] *  ProdInv$MaxPCunit[47]
  ProdInv$MaxPCtotal[48]<- ProdInv$Qty[48] *  ProdInv$MaxPCunit[48]
  ProdInv$MaxPCtotal[49]<- ProdInv$Qty[49] *  ProdInv$MaxPCunit[49]
  ProdInv$MaxPCtotal[50]<- ProdInv$Qty[50] *  ProdInv$MaxPCunit[50]
  ProdInv$MaxPCtotal[51]<- ProdInv$Qty[51] *  ProdInv$MaxPCunit[51]
  ProdInv$MaxPCtotal[52]<- ProdInv$Qty[52] *  ProdInv$MaxPCunit[52]
  ProdInv$MaxPCtotal[53]<- ProdInv$Qty[53] *  ProdInv$MaxPCunit[53]
  ProdInv$MaxPCtotal[54]<- ProdInv$Qty[54] *  ProdInv$MaxPCunit[54]
  ProdInv$MaxPCtotal[55]<- ProdInv$Qty[55] *  ProdInv$MaxPCunit[55]
  ProdInv$MaxPCtotal[56]<- ProdInv$Qty[56] *  ProdInv$MaxPCunit[56]
  ProdInv$MaxPCtotal[57]<- ProdInv$Qty[57] *  ProdInv$MaxPCunit[57]
  ProdInv$MaxPCtotal[58]<- ProdInv$Qty[58] *  ProdInv$MaxPCunit[58]
  ProdInv$MaxPCtotal[59]<- ProdInv$Qty[59] *  ProdInv$MaxPCunit[59]
  ProdInv$MaxPCtotal[60]<- ProdInv$Qty[60] *  ProdInv$MaxPCunit[60]
  ProdInv$MaxPCtotal[61]<- ProdInv$Qty[61] *  ProdInv$MaxPCunit[61]
  ProdInv$MaxPCtotal[62]<- ProdInv$Qty[62] *  ProdInv$MaxPCunit[62]
  ProdInv$MaxPCtotal[63]<- ProdInv$Qty[63] *  ProdInv$MaxPCunit[63]
  ProdInv$MaxPCtotal[64]<- ProdInv$Qty[64] *  ProdInv$MaxPCunit[64]
  ProdInv$MaxPCtotal[65]<- ProdInv$Qty[65] *  ProdInv$MaxPCunit[65]
  ProdInv$MaxPCtotal[66]<- ProdInv$Qty[66] *  ProdInv$MaxPCunit[66]
  ProdInv$MaxPCtotal[67]<- ProdInv$Qty[67] *  ProdInv$MaxPCunit[67]
  ProdInv$MaxPCtotal[68]<- ProdInv$Qty[68] *  ProdInv$MaxPCunit[68]
  ProdInv$MaxPCtotal[69]<- ProdInv$Qty[69] *  ProdInv$MaxPCunit[69]
  ProdInv$MaxPCtotal[70]<- ProdInv$Qty[70] *  ProdInv$MaxPCunit[70]
  ProdInv$MaxPCtotal[71]<- ProdInv$Qty[71] *  ProdInv$MaxPCunit[71]
  ProdInv$MaxPCtotal[72]<- ProdInv$Qty[72] *  ProdInv$MaxPCunit[72]
  ProdInv$MaxPCtotal[73]<- ProdInv$Qty[73] *  ProdInv$MaxPCunit[73]
  ProdInv$MaxPCtotal[74]<- ProdInv$Qty[74] *  ProdInv$MaxPCunit[74]
  ProdInv$MaxPCtotal[75]<- ProdInv$Qty[75] *  ProdInv$MaxPCunit[75]
  ProdInv$MaxPCtotal[76]<- ProdInv$Qty[76] *  ProdInv$MaxPCunit[76]
  ProdInv$MaxPCtotal[77]<- ProdInv$Qty[77] *  ProdInv$MaxPCunit[77]
  ProdInv$MaxPCtotal[78]<- ProdInv$Qty[78] *  ProdInv$MaxPCunit[78]
  ProdInv$MaxPCtotal[79]<- ProdInv$Qty[79] *  ProdInv$MaxPCunit[79]
  ProdInv$MaxPCtotal[80]<- ProdInv$Qty[80] *  ProdInv$MaxPCunit[80]
  ProdInv$MaxPCtotal[81]<- ProdInv$Qty[81] *  ProdInv$MaxPCunit[81]
  ProdInv$MaxPCtotal[82]<- ProdInv$Qty[82] *  ProdInv$MaxPCunit[82]
  ProdInv$MaxPCtotal[83]<- ProdInv$Qty[83] *  ProdInv$MaxPCunit[83]
  ProdInv$MaxPCtotal[84]<- ProdInv$Qty[84] *  ProdInv$MaxPCunit[84]
  ProdInv$MaxPCtotal[85]<- ProdInv$Qty[85] *  ProdInv$MaxPCunit[85]
  ProdInv$MaxPCtotal[86]<- ProdInv$Qty[86] *  ProdInv$MaxPCunit[86]
  ProdInv$MaxPCtotal[87]<- ProdInv$Qty[87] *  ProdInv$MaxPCunit[87]
  ProdInv$MaxPCtotal[88]<- ProdInv$Qty[88] *  ProdInv$MaxPCunit[88]
  ProdInv$MaxPCtotal[89]<- ProdInv$Qty[89] *  ProdInv$MaxPCunit[89]
  ProdInv$MaxPCtotal[90]<- ProdInv$Qty[90] *  ProdInv$MaxPCunit[90]
  ProdInv$MaxPCtotal[91]<- ProdInv$Qty[91] *  ProdInv$MaxPCunit[91]
  ProdInv$MaxPCtotal[92]<- ProdInv$Qty[92] *  ProdInv$MaxPCunit[92]
  ProdInv$MaxPCtotal[93]<- ProdInv$Qty[93] *  ProdInv$MaxPCunit[93]
  ProdInv$MaxPCtotal[94]<- ProdInv$Qty[94] *  ProdInv$MaxPCunit[94]
  ProdInv$MaxPCtotal[95]<- ProdInv$Qty[95] *  ProdInv$MaxPCunit[95]
  ProdInv$MaxPCtotal[96]<- ProdInv$Qty[96] *  ProdInv$MaxPCunit[96]
  ProdInv$MaxPCtotal[97]<- ProdInv$Qty[97] *  ProdInv$MaxPCunit[97]
  ProdInv$MaxPCtotal[98]<- ProdInv$Qty[98] *  ProdInv$MaxPCunit[98]
  ProdInv$MaxPCtotal[99]<- ProdInv$Qty[99] *  ProdInv$MaxPCunit[99]
  ProdInv$MaxPCtotal[100]<- ProdInv$Qty[100] *  ProdInv$MaxPCunit[100]
  ProdInv$MaxPCtotal[101]<- ProdInv$Qty[101] *  ProdInv$MaxPCunit[101]
  ProdInv$MaxPCtotal[102]<- ProdInv$Qty[102] *  ProdInv$MaxPCunit[102]
  ProdInv$MaxPCtotal[103]<- ProdInv$Qty[103] *  ProdInv$MaxPCunit[103]
  ProdInv$MaxPCtotal[104]<- ProdInv$Qty[104] *  ProdInv$MaxPCunit[104]
  ProdInv$MaxPCtotal[105]<- ProdInv$Qty[105] *  ProdInv$MaxPCunit[105]
  ProdInv$MaxPCtotal[106]<- ProdInv$Qty[106] *  ProdInv$MaxPCunit[106]
  ProdInv$MaxPCtotal[107]<- ProdInv$Qty[107] *  ProdInv$MaxPCunit[107]
  ProdInv$MaxPCtotal[108]<- ProdInv$Qty[108] *  ProdInv$MaxPCunit[108]
  ProdInv$MaxPCtotal[109]<- ProdInv$Qty[109] *  ProdInv$MaxPCunit[109]
  ProdInv$MaxPCtotal[110]<- ProdInv$Qty[110] *  ProdInv$MaxPCunit[110]
  ProdInv$MaxPCtotal[111]<- ProdInv$Qty[111] *  ProdInv$MaxPCunit[111]
  ProdInv$MaxPCtotal[112]<- ProdInv$Qty[112] *  ProdInv$MaxPCunit[112]
  ProdInv$MaxPCtotal[113]<- ProdInv$Qty[113] *  ProdInv$MaxPCunit[113]
  ProdInv$MaxPCtotal[114]<- ProdInv$Qty[114] *  ProdInv$MaxPCunit[114]
  ProdInv$MaxPCtotal[115]<- ProdInv$Qty[115] *  ProdInv$MaxPCunit[115]
  ProdInv$MaxPCtotal[116]<- ProdInv$Qty[116] *  ProdInv$MaxPCunit[116]
  ProdInv$MaxPCtotal[117]<- ProdInv$Qty[117] *  ProdInv$MaxPCunit[117]
  ProdInv$MaxPCtotal[118]<- ProdInv$Qty[118] *  ProdInv$MaxPCunit[118]
  ProdInv$MaxPCtotal[119]<- ProdInv$Qty[119] *  ProdInv$MaxPCunit[119]
  ProdInv$MaxPCtotal[120]<- ProdInv$Qty[120] *  ProdInv$MaxPCunit[120]
  ProdInv$MaxPCtotal[121]<- ProdInv$Qty[121] *  ProdInv$MaxPCunit[121]
  ProdInv$MaxPCtotal[122]<- ProdInv$Qty[122] *  ProdInv$MaxPCunit[122]
  ProdInv$MaxPCtotal[123]<- ProdInv$Qty[123] *  ProdInv$MaxPCunit[123]
  ProdInv$MaxPCtotal[124]<- ProdInv$Qty[124] *  ProdInv$MaxPCunit[124]
  ProdInv$MaxPCtotal[125]<- ProdInv$Qty[125] *  ProdInv$MaxPCunit[125]
  ProdInv$MaxPCtotal[126]<- ProdInv$Qty[126] *  ProdInv$MaxPCunit[126]
  ProdInv$MaxPCtotal[127]<- ProdInv$Qty[127] *  ProdInv$MaxPCunit[127]
  ProdInv$MaxPCtotal[128]<- ProdInv$Qty[128] *  ProdInv$MaxPCunit[128]
  ProdInv$MaxPCtotal[129]<- ProdInv$Qty[129] *  ProdInv$MaxPCunit[129]
  ProdInv$MaxPCtotal[130]<- ProdInv$Qty[130] *  ProdInv$MaxPCunit[130]
  ProdInv$MaxPCtotal[131]<- ProdInv$Qty[131] *  ProdInv$MaxPCunit[131]
  ProdInv$MaxPCtotal[132]<- ProdInv$Qty[132] *  ProdInv$MaxPCunit[132]
  ProdInv$MaxPCtotal[133]<- ProdInv$Qty[133] *  ProdInv$MaxPCunit[133]
  ProdInv$MaxPCtotal[134]<- ProdInv$Qty[134] *  ProdInv$MaxPCunit[134]
  
  ProdInv$MaxOPtotal[1]<- ProdInv$Qty[1] *  ProdInv$MaxOPunit[1]
  ProdInv$MaxOPtotal[2]<- ProdInv$Qty[2] *  ProdInv$MaxOPunit[2]
  ProdInv$MaxOPtotal[3]<- ProdInv$Qty[3] *  ProdInv$MaxOPunit[3]
  ProdInv$MaxOPtotal[4]<- ProdInv$Qty[4] *  ProdInv$MaxOPunit[4]
  ProdInv$MaxOPtotal[5]<- ProdInv$Qty[5] *  ProdInv$MaxOPunit[5]
  ProdInv$MaxOPtotal[6]<- ProdInv$Qty[6] *  ProdInv$MaxOPunit[6]
  ProdInv$MaxOPtotal[7]<- ProdInv$Qty[7] *  ProdInv$MaxOPunit[7]
  ProdInv$MaxOPtotal[8]<- ProdInv$Qty[8] *  ProdInv$MaxOPunit[8]
  ProdInv$MaxOPtotal[9]<- ProdInv$Qty[9] *  ProdInv$MaxOPunit[9]
  ProdInv$MaxOPtotal[10]<- ProdInv$Qty[10] *  ProdInv$MaxOPunit[10]
  ProdInv$MaxOPtotal[11]<- ProdInv$Qty[11] *  ProdInv$MaxOPunit[11]
  ProdInv$MaxOPtotal[12]<- ProdInv$Qty[12] *  ProdInv$MaxOPunit[12]
  ProdInv$MaxOPtotal[13]<- ProdInv$Qty[13] *  ProdInv$MaxOPunit[13]
  ProdInv$MaxOPtotal[14]<- ProdInv$Qty[14] *  ProdInv$MaxOPunit[14]
  ProdInv$MaxOPtotal[15]<- ProdInv$Qty[15] *  ProdInv$MaxOPunit[15]
  ProdInv$MaxOPtotal[16]<- ProdInv$Qty[16] *  ProdInv$MaxOPunit[16]
  ProdInv$MaxOPtotal[17]<- ProdInv$Qty[17] *  ProdInv$MaxOPunit[17]
  ProdInv$MaxOPtotal[18]<- ProdInv$Qty[18] *  ProdInv$MaxOPunit[18]
  ProdInv$MaxOPtotal[19]<- ProdInv$Qty[19] *  ProdInv$MaxOPunit[19]
  ProdInv$MaxOPtotal[20]<- ProdInv$Qty[20] *  ProdInv$MaxOPunit[20]
  ProdInv$MaxOPtotal[21]<- ProdInv$Qty[21] *  ProdInv$MaxOPunit[21]
  ProdInv$MaxOPtotal[22]<- ProdInv$Qty[22] *  ProdInv$MaxOPunit[22]
  ProdInv$MaxOPtotal[23]<- ProdInv$Qty[23] *  ProdInv$MaxOPunit[23]
  ProdInv$MaxOPtotal[24]<- ProdInv$Qty[24] *  ProdInv$MaxOPunit[24]
  ProdInv$MaxOPtotal[25]<- ProdInv$Qty[25] *  ProdInv$MaxOPunit[25]
  ProdInv$MaxOPtotal[26]<- ProdInv$Qty[26] *  ProdInv$MaxOPunit[26]
  ProdInv$MaxOPtotal[27]<- ProdInv$Qty[27] *  ProdInv$MaxOPunit[27]
  ProdInv$MaxOPtotal[28]<- ProdInv$Qty[28] *  ProdInv$MaxOPunit[28]
  ProdInv$MaxOPtotal[29]<- ProdInv$Qty[29] *  ProdInv$MaxOPunit[29]
  ProdInv$MaxOPtotal[30]<- ProdInv$Qty[30] *  ProdInv$MaxOPunit[30]
  ProdInv$MaxOPtotal[31]<- ProdInv$Qty[31] *  ProdInv$MaxOPunit[31]
  ProdInv$MaxOPtotal[32]<- ProdInv$Qty[32] *  ProdInv$MaxOPunit[32]
  ProdInv$MaxOPtotal[33]<- ProdInv$Qty[33] *  ProdInv$MaxOPunit[33]
  ProdInv$MaxOPtotal[34]<- ProdInv$Qty[34] *  ProdInv$MaxOPunit[34]
  ProdInv$MaxOPtotal[35]<- ProdInv$Qty[35] *  ProdInv$MaxOPunit[35]
  ProdInv$MaxOPtotal[36]<- ProdInv$Qty[36] *  ProdInv$MaxOPunit[36]
  ProdInv$MaxOPtotal[37]<- ProdInv$Qty[37] *  ProdInv$MaxOPunit[37]
  ProdInv$MaxOPtotal[38]<- ProdInv$Qty[38] *  ProdInv$MaxOPunit[38]
  ProdInv$MaxOPtotal[39]<- ProdInv$Qty[39] *  ProdInv$MaxOPunit[39]
  ProdInv$MaxOPtotal[40]<- ProdInv$Qty[40] *  ProdInv$MaxOPunit[40]
  ProdInv$MaxOPtotal[41]<- ProdInv$Qty[41] *  ProdInv$MaxOPunit[41]
  ProdInv$MaxOPtotal[42]<- ProdInv$Qty[42] *  ProdInv$MaxOPunit[42]
  ProdInv$MaxOPtotal[43]<- ProdInv$Qty[43] *  ProdInv$MaxOPunit[43]
  ProdInv$MaxOPtotal[44]<- ProdInv$Qty[44] *  ProdInv$MaxOPunit[44]
  ProdInv$MaxOPtotal[45]<- ProdInv$Qty[45] *  ProdInv$MaxOPunit[45]
  ProdInv$MaxOPtotal[46]<- ProdInv$Qty[46] *  ProdInv$MaxOPunit[46]
  ProdInv$MaxOPtotal[47]<- ProdInv$Qty[47] *  ProdInv$MaxOPunit[47]
  ProdInv$MaxOPtotal[48]<- ProdInv$Qty[48] *  ProdInv$MaxOPunit[48]
  ProdInv$MaxOPtotal[49]<- ProdInv$Qty[49] *  ProdInv$MaxOPunit[49]
  ProdInv$MaxOPtotal[50]<- ProdInv$Qty[50] *  ProdInv$MaxOPunit[50]
  ProdInv$MaxOPtotal[51]<- ProdInv$Qty[51] *  ProdInv$MaxOPunit[51]
  ProdInv$MaxOPtotal[52]<- ProdInv$Qty[52] *  ProdInv$MaxOPunit[52]
  ProdInv$MaxOPtotal[53]<- ProdInv$Qty[53] *  ProdInv$MaxOPunit[53]
  ProdInv$MaxOPtotal[54]<- ProdInv$Qty[54] *  ProdInv$MaxOPunit[54]
  ProdInv$MaxOPtotal[55]<- ProdInv$Qty[55] *  ProdInv$MaxOPunit[55]
  ProdInv$MaxOPtotal[56]<- ProdInv$Qty[56] *  ProdInv$MaxOPunit[56]
  ProdInv$MaxOPtotal[57]<- ProdInv$Qty[57] *  ProdInv$MaxOPunit[57]
  ProdInv$MaxOPtotal[58]<- ProdInv$Qty[58] *  ProdInv$MaxOPunit[58]
  ProdInv$MaxOPtotal[59]<- ProdInv$Qty[59] *  ProdInv$MaxOPunit[59]
  ProdInv$MaxOPtotal[60]<- ProdInv$Qty[60] *  ProdInv$MaxOPunit[60]
  ProdInv$MaxOPtotal[61]<- ProdInv$Qty[61] *  ProdInv$MaxOPunit[61]
  ProdInv$MaxOPtotal[62]<- ProdInv$Qty[62] *  ProdInv$MaxOPunit[62]
  ProdInv$MaxOPtotal[63]<- ProdInv$Qty[63] *  ProdInv$MaxOPunit[63]
  ProdInv$MaxOPtotal[64]<- ProdInv$Qty[64] *  ProdInv$MaxOPunit[64]
  ProdInv$MaxOPtotal[65]<- ProdInv$Qty[65] *  ProdInv$MaxOPunit[65]
  ProdInv$MaxOPtotal[66]<- ProdInv$Qty[66] *  ProdInv$MaxOPunit[66]
  ProdInv$MaxOPtotal[67]<- ProdInv$Qty[67] *  ProdInv$MaxOPunit[67]
  ProdInv$MaxOPtotal[68]<- ProdInv$Qty[68] *  ProdInv$MaxOPunit[68]
  ProdInv$MaxOPtotal[69]<- ProdInv$Qty[69] *  ProdInv$MaxOPunit[69]
  ProdInv$MaxOPtotal[70]<- ProdInv$Qty[70] *  ProdInv$MaxOPunit[70]
  ProdInv$MaxOPtotal[71]<- ProdInv$Qty[71] *  ProdInv$MaxOPunit[71]
  ProdInv$MaxOPtotal[72]<- ProdInv$Qty[72] *  ProdInv$MaxOPunit[72]
  ProdInv$MaxOPtotal[73]<- ProdInv$Qty[73] *  ProdInv$MaxOPunit[73]
  ProdInv$MaxOPtotal[74]<- ProdInv$Qty[74] *  ProdInv$MaxOPunit[74]
  ProdInv$MaxOPtotal[75]<- ProdInv$Qty[75] *  ProdInv$MaxOPunit[75]
  ProdInv$MaxOPtotal[76]<- ProdInv$Qty[76] *  ProdInv$MaxOPunit[76]
  ProdInv$MaxOPtotal[77]<- ProdInv$Qty[77] *  ProdInv$MaxOPunit[77]
  ProdInv$MaxOPtotal[78]<- ProdInv$Qty[78] *  ProdInv$MaxOPunit[78]
  ProdInv$MaxOPtotal[79]<- ProdInv$Qty[79] *  ProdInv$MaxOPunit[79]
  ProdInv$MaxOPtotal[80]<- ProdInv$Qty[80] *  ProdInv$MaxOPunit[80]
  ProdInv$MaxOPtotal[81]<- ProdInv$Qty[81] *  ProdInv$MaxOPunit[81]
  ProdInv$MaxOPtotal[82]<- ProdInv$Qty[82] *  ProdInv$MaxOPunit[82]
  ProdInv$MaxOPtotal[83]<- ProdInv$Qty[83] *  ProdInv$MaxOPunit[83]
  ProdInv$MaxOPtotal[84]<- ProdInv$Qty[84] *  ProdInv$MaxOPunit[84]
  ProdInv$MaxOPtotal[85]<- ProdInv$Qty[85] *  ProdInv$MaxOPunit[85]
  ProdInv$MaxOPtotal[86]<- ProdInv$Qty[86] *  ProdInv$MaxOPunit[86]
  ProdInv$MaxOPtotal[87]<- ProdInv$Qty[87] *  ProdInv$MaxOPunit[87]
  ProdInv$MaxOPtotal[88]<- ProdInv$Qty[88] *  ProdInv$MaxOPunit[88]
  ProdInv$MaxOPtotal[89]<- ProdInv$Qty[89] *  ProdInv$MaxOPunit[89]
  ProdInv$MaxOPtotal[90]<- ProdInv$Qty[90] *  ProdInv$MaxOPunit[90]
  ProdInv$MaxOPtotal[91]<- ProdInv$Qty[91] *  ProdInv$MaxOPunit[91]
  ProdInv$MaxOPtotal[92]<- ProdInv$Qty[92] *  ProdInv$MaxOPunit[92]
  ProdInv$MaxOPtotal[93]<- ProdInv$Qty[93] *  ProdInv$MaxOPunit[93]
  ProdInv$MaxOPtotal[94]<- ProdInv$Qty[94] *  ProdInv$MaxOPunit[94]
  ProdInv$MaxOPtotal[95]<- ProdInv$Qty[95] *  ProdInv$MaxOPunit[95]
  ProdInv$MaxOPtotal[96]<- ProdInv$Qty[96] *  ProdInv$MaxOPunit[96]
  ProdInv$MaxOPtotal[97]<- ProdInv$Qty[97] *  ProdInv$MaxOPunit[97]
  ProdInv$MaxOPtotal[98]<- ProdInv$Qty[98] *  ProdInv$MaxOPunit[98]
  ProdInv$MaxOPtotal[99]<- ProdInv$Qty[99] *  ProdInv$MaxOPunit[99]
  ProdInv$MaxOPtotal[100]<- ProdInv$Qty[100] *  ProdInv$MaxOPunit[100]
  ProdInv$MaxOPtotal[101]<- ProdInv$Qty[101] *  ProdInv$MaxOPunit[101]
  ProdInv$MaxOPtotal[102]<- ProdInv$Qty[102] *  ProdInv$MaxOPunit[102]
  ProdInv$MaxOPtotal[103]<- ProdInv$Qty[103] *  ProdInv$MaxOPunit[103]
  ProdInv$MaxOPtotal[104]<- ProdInv$Qty[104] *  ProdInv$MaxOPunit[104]
  ProdInv$MaxOPtotal[105]<- ProdInv$Qty[105] *  ProdInv$MaxOPunit[105]
  ProdInv$MaxOPtotal[106]<- ProdInv$Qty[106] *  ProdInv$MaxOPunit[106]
  ProdInv$MaxOPtotal[107]<- ProdInv$Qty[107] *  ProdInv$MaxOPunit[107]
  ProdInv$MaxOPtotal[108]<- ProdInv$Qty[108] *  ProdInv$MaxOPunit[108]
  ProdInv$MaxOPtotal[109]<- ProdInv$Qty[109] *  ProdInv$MaxOPunit[109]
  ProdInv$MaxOPtotal[110]<- ProdInv$Qty[110] *  ProdInv$MaxOPunit[110]
  ProdInv$MaxOPtotal[111]<- ProdInv$Qty[111] *  ProdInv$MaxOPunit[111]
  ProdInv$MaxOPtotal[112]<- ProdInv$Qty[112] *  ProdInv$MaxOPunit[112]
  ProdInv$MaxOPtotal[113]<- ProdInv$Qty[113] *  ProdInv$MaxOPunit[113]
  ProdInv$MaxOPtotal[114]<- ProdInv$Qty[114] *  ProdInv$MaxOPunit[114]
  ProdInv$MaxOPtotal[115]<- ProdInv$Qty[115] *  ProdInv$MaxOPunit[115]
  ProdInv$MaxOPtotal[116]<- ProdInv$Qty[116] *  ProdInv$MaxOPunit[116]
  ProdInv$MaxOPtotal[117]<- ProdInv$Qty[117] *  ProdInv$MaxOPunit[117]
  ProdInv$MaxOPtotal[118]<- ProdInv$Qty[118] *  ProdInv$MaxOPunit[118]
  ProdInv$MaxOPtotal[119]<- ProdInv$Qty[119] *  ProdInv$MaxOPunit[119]
  ProdInv$MaxOPtotal[120]<- ProdInv$Qty[120] *  ProdInv$MaxOPunit[120]
  ProdInv$MaxOPtotal[121]<- ProdInv$Qty[121] *  ProdInv$MaxOPunit[121]
  ProdInv$MaxOPtotal[122]<- ProdInv$Qty[122] *  ProdInv$MaxOPunit[122]
  ProdInv$MaxOPtotal[123]<- ProdInv$Qty[123] *  ProdInv$MaxOPunit[123]
  ProdInv$MaxOPtotal[124]<- ProdInv$Qty[124] *  ProdInv$MaxOPunit[124]
  ProdInv$MaxOPtotal[125]<- ProdInv$Qty[125] *  ProdInv$MaxOPunit[125]
  ProdInv$MaxOPtotal[126]<- ProdInv$Qty[126] *  ProdInv$MaxOPunit[126]
  ProdInv$MaxOPtotal[127]<- ProdInv$Qty[127] *  ProdInv$MaxOPunit[127]
  ProdInv$MaxOPtotal[128]<- ProdInv$Qty[128] *  ProdInv$MaxOPunit[128]
  ProdInv$MaxOPtotal[129]<- ProdInv$Qty[129] *  ProdInv$MaxOPunit[129]
  ProdInv$MaxOPtotal[130]<- ProdInv$Qty[130] *  ProdInv$MaxOPunit[130]
  ProdInv$MaxOPtotal[131]<- ProdInv$Qty[131] *  ProdInv$MaxOPunit[131]
  ProdInv$MaxOPtotal[132]<- ProdInv$Qty[132] *  ProdInv$MaxOPunit[132]
  ProdInv$MaxOPtotal[133]<- ProdInv$Qty[133] *  ProdInv$MaxOPunit[133]
  ProdInv$MaxOPtotal[134]<- ProdInv$Qty[134] *  ProdInv$MaxOPunit[134]
  
  ProdInv$MaxHDtotal[1]<- ProdInv$Qty[1] *  ProdInv$MaxHDunit[1]
  ProdInv$MaxHDtotal[2]<- ProdInv$Qty[2] *  ProdInv$MaxHDunit[2]
  ProdInv$MaxHDtotal[3]<- ProdInv$Qty[3] *  ProdInv$MaxHDunit[3]
  ProdInv$MaxHDtotal[4]<- ProdInv$Qty[4] *  ProdInv$MaxHDunit[4]
  ProdInv$MaxHDtotal[5]<- ProdInv$Qty[5] *  ProdInv$MaxHDunit[5]
  ProdInv$MaxHDtotal[6]<- ProdInv$Qty[6] *  ProdInv$MaxHDunit[6]
  ProdInv$MaxHDtotal[7]<- ProdInv$Qty[7] *  ProdInv$MaxHDunit[7]
  ProdInv$MaxHDtotal[8]<- ProdInv$Qty[8] *  ProdInv$MaxHDunit[8]
  ProdInv$MaxHDtotal[9]<- ProdInv$Qty[9] *  ProdInv$MaxHDunit[9]
  ProdInv$MaxHDtotal[10]<- ProdInv$Qty[10] *  ProdInv$MaxHDunit[10]
  ProdInv$MaxHDtotal[11]<- ProdInv$Qty[11] *  ProdInv$MaxHDunit[11]
  ProdInv$MaxHDtotal[12]<- ProdInv$Qty[12] *  ProdInv$MaxHDunit[12]
  ProdInv$MaxHDtotal[13]<- ProdInv$Qty[13] *  ProdInv$MaxHDunit[13]
  ProdInv$MaxHDtotal[14]<- ProdInv$Qty[14] *  ProdInv$MaxHDunit[14]
  ProdInv$MaxHDtotal[15]<- ProdInv$Qty[15] *  ProdInv$MaxHDunit[15]
  ProdInv$MaxHDtotal[16]<- ProdInv$Qty[16] *  ProdInv$MaxHDunit[16]
  ProdInv$MaxHDtotal[17]<- ProdInv$Qty[17] *  ProdInv$MaxHDunit[17]
  ProdInv$MaxHDtotal[18]<- ProdInv$Qty[18] *  ProdInv$MaxHDunit[18]
  ProdInv$MaxHDtotal[19]<- ProdInv$Qty[19] *  ProdInv$MaxHDunit[19]
  ProdInv$MaxHDtotal[20]<- ProdInv$Qty[20] *  ProdInv$MaxHDunit[20]
  ProdInv$MaxHDtotal[21]<- ProdInv$Qty[21] *  ProdInv$MaxHDunit[21]
  ProdInv$MaxHDtotal[22]<- ProdInv$Qty[22] *  ProdInv$MaxHDunit[22]
  ProdInv$MaxHDtotal[23]<- ProdInv$Qty[23] *  ProdInv$MaxHDunit[23]
  ProdInv$MaxHDtotal[24]<- ProdInv$Qty[24] *  ProdInv$MaxHDunit[24]
  ProdInv$MaxHDtotal[25]<- ProdInv$Qty[25] *  ProdInv$MaxHDunit[25]
  ProdInv$MaxHDtotal[26]<- ProdInv$Qty[26] *  ProdInv$MaxHDunit[26]
  ProdInv$MaxHDtotal[27]<- ProdInv$Qty[27] *  ProdInv$MaxHDunit[27]
  ProdInv$MaxHDtotal[28]<- ProdInv$Qty[28] *  ProdInv$MaxHDunit[28]
  ProdInv$MaxHDtotal[29]<- ProdInv$Qty[29] *  ProdInv$MaxHDunit[29]
  ProdInv$MaxHDtotal[30]<- ProdInv$Qty[30] *  ProdInv$MaxHDunit[30]
  ProdInv$MaxHDtotal[31]<- ProdInv$Qty[31] *  ProdInv$MaxHDunit[31]
  ProdInv$MaxHDtotal[32]<- ProdInv$Qty[32] *  ProdInv$MaxHDunit[32]
  ProdInv$MaxHDtotal[33]<- ProdInv$Qty[33] *  ProdInv$MaxHDunit[33]
  ProdInv$MaxHDtotal[34]<- ProdInv$Qty[34] *  ProdInv$MaxHDunit[34]
  ProdInv$MaxHDtotal[35]<- ProdInv$Qty[35] *  ProdInv$MaxHDunit[35]
  ProdInv$MaxHDtotal[36]<- ProdInv$Qty[36] *  ProdInv$MaxHDunit[36]
  ProdInv$MaxHDtotal[37]<- ProdInv$Qty[37] *  ProdInv$MaxHDunit[37]
  ProdInv$MaxHDtotal[38]<- ProdInv$Qty[38] *  ProdInv$MaxHDunit[38]
  ProdInv$MaxHDtotal[39]<- ProdInv$Qty[39] *  ProdInv$MaxHDunit[39]
  ProdInv$MaxHDtotal[40]<- ProdInv$Qty[40] *  ProdInv$MaxHDunit[40]
  ProdInv$MaxHDtotal[41]<- ProdInv$Qty[41] *  ProdInv$MaxHDunit[41]
  ProdInv$MaxHDtotal[42]<- ProdInv$Qty[42] *  ProdInv$MaxHDunit[42]
  ProdInv$MaxHDtotal[43]<- ProdInv$Qty[43] *  ProdInv$MaxHDunit[43]
  ProdInv$MaxHDtotal[44]<- ProdInv$Qty[44] *  ProdInv$MaxHDunit[44]
  ProdInv$MaxHDtotal[45]<- ProdInv$Qty[45] *  ProdInv$MaxHDunit[45]
  ProdInv$MaxHDtotal[46]<- ProdInv$Qty[46] *  ProdInv$MaxHDunit[46]
  ProdInv$MaxHDtotal[47]<- ProdInv$Qty[47] *  ProdInv$MaxHDunit[47]
  ProdInv$MaxHDtotal[48]<- ProdInv$Qty[48] *  ProdInv$MaxHDunit[48]
  ProdInv$MaxHDtotal[49]<- ProdInv$Qty[49] *  ProdInv$MaxHDunit[49]
  ProdInv$MaxHDtotal[50]<- ProdInv$Qty[50] *  ProdInv$MaxHDunit[50]
  ProdInv$MaxHDtotal[51]<- ProdInv$Qty[51] *  ProdInv$MaxHDunit[51]
  ProdInv$MaxHDtotal[52]<- ProdInv$Qty[52] *  ProdInv$MaxHDunit[52]
  ProdInv$MaxHDtotal[53]<- ProdInv$Qty[53] *  ProdInv$MaxHDunit[53]
  ProdInv$MaxHDtotal[54]<- ProdInv$Qty[54] *  ProdInv$MaxHDunit[54]
  ProdInv$MaxHDtotal[55]<- ProdInv$Qty[55] *  ProdInv$MaxHDunit[55]
  ProdInv$MaxHDtotal[56]<- ProdInv$Qty[56] *  ProdInv$MaxHDunit[56]
  ProdInv$MaxHDtotal[57]<- ProdInv$Qty[57] *  ProdInv$MaxHDunit[57]
  ProdInv$MaxHDtotal[58]<- ProdInv$Qty[58] *  ProdInv$MaxHDunit[58]
  ProdInv$MaxHDtotal[59]<- ProdInv$Qty[59] *  ProdInv$MaxHDunit[59]
  ProdInv$MaxHDtotal[60]<- ProdInv$Qty[60] *  ProdInv$MaxHDunit[60]
  ProdInv$MaxHDtotal[61]<- ProdInv$Qty[61] *  ProdInv$MaxHDunit[61]
  ProdInv$MaxHDtotal[62]<- ProdInv$Qty[62] *  ProdInv$MaxHDunit[62]
  ProdInv$MaxHDtotal[63]<- ProdInv$Qty[63] *  ProdInv$MaxHDunit[63]
  ProdInv$MaxHDtotal[64]<- ProdInv$Qty[64] *  ProdInv$MaxHDunit[64]
  ProdInv$MaxHDtotal[65]<- ProdInv$Qty[65] *  ProdInv$MaxHDunit[65]
  ProdInv$MaxHDtotal[66]<- ProdInv$Qty[66] *  ProdInv$MaxHDunit[66]
  ProdInv$MaxHDtotal[67]<- ProdInv$Qty[67] *  ProdInv$MaxHDunit[67]
  ProdInv$MaxHDtotal[68]<- ProdInv$Qty[68] *  ProdInv$MaxHDunit[68]
  ProdInv$MaxHDtotal[69]<- ProdInv$Qty[69] *  ProdInv$MaxHDunit[69]
  ProdInv$MaxHDtotal[70]<- ProdInv$Qty[70] *  ProdInv$MaxHDunit[70]
  ProdInv$MaxHDtotal[71]<- ProdInv$Qty[71] *  ProdInv$MaxHDunit[71]
  ProdInv$MaxHDtotal[72]<- ProdInv$Qty[72] *  ProdInv$MaxHDunit[72]
  ProdInv$MaxHDtotal[73]<- ProdInv$Qty[73] *  ProdInv$MaxHDunit[73]
  ProdInv$MaxHDtotal[74]<- ProdInv$Qty[74] *  ProdInv$MaxHDunit[74]
  ProdInv$MaxHDtotal[75]<- ProdInv$Qty[75] *  ProdInv$MaxHDunit[75]
  ProdInv$MaxHDtotal[76]<- ProdInv$Qty[76] *  ProdInv$MaxHDunit[76]
  ProdInv$MaxHDtotal[77]<- ProdInv$Qty[77] *  ProdInv$MaxHDunit[77]
  ProdInv$MaxHDtotal[78]<- ProdInv$Qty[78] *  ProdInv$MaxHDunit[78]
  ProdInv$MaxHDtotal[79]<- ProdInv$Qty[79] *  ProdInv$MaxHDunit[79]
  ProdInv$MaxHDtotal[80]<- ProdInv$Qty[80] *  ProdInv$MaxHDunit[80]
  ProdInv$MaxHDtotal[81]<- ProdInv$Qty[81] *  ProdInv$MaxHDunit[81]
  ProdInv$MaxHDtotal[82]<- ProdInv$Qty[82] *  ProdInv$MaxHDunit[82]
  ProdInv$MaxHDtotal[83]<- ProdInv$Qty[83] *  ProdInv$MaxHDunit[83]
  ProdInv$MaxHDtotal[84]<- ProdInv$Qty[84] *  ProdInv$MaxHDunit[84]
  ProdInv$MaxHDtotal[85]<- ProdInv$Qty[85] *  ProdInv$MaxHDunit[85]
  ProdInv$MaxHDtotal[86]<- ProdInv$Qty[86] *  ProdInv$MaxHDunit[86]
  ProdInv$MaxHDtotal[87]<- ProdInv$Qty[87] *  ProdInv$MaxHDunit[87]
  ProdInv$MaxHDtotal[88]<- ProdInv$Qty[88] *  ProdInv$MaxHDunit[88]
  ProdInv$MaxHDtotal[89]<- ProdInv$Qty[89] *  ProdInv$MaxHDunit[89]
  ProdInv$MaxHDtotal[90]<- ProdInv$Qty[90] *  ProdInv$MaxHDunit[90]
  ProdInv$MaxHDtotal[91]<- ProdInv$Qty[91] *  ProdInv$MaxHDunit[91]
  ProdInv$MaxHDtotal[92]<- ProdInv$Qty[92] *  ProdInv$MaxHDunit[92]
  ProdInv$MaxHDtotal[93]<- ProdInv$Qty[93] *  ProdInv$MaxHDunit[93]
  ProdInv$MaxHDtotal[94]<- ProdInv$Qty[94] *  ProdInv$MaxHDunit[94]
  ProdInv$MaxHDtotal[95]<- ProdInv$Qty[95] *  ProdInv$MaxHDunit[95]
  ProdInv$MaxHDtotal[96]<- ProdInv$Qty[96] *  ProdInv$MaxHDunit[96]
  ProdInv$MaxHDtotal[97]<- ProdInv$Qty[97] *  ProdInv$MaxHDunit[97]
  ProdInv$MaxHDtotal[98]<- ProdInv$Qty[98] *  ProdInv$MaxHDunit[98]
  ProdInv$MaxHDtotal[99]<- ProdInv$Qty[99] *  ProdInv$MaxHDunit[99]
  ProdInv$MaxHDtotal[100]<- ProdInv$Qty[100] *  ProdInv$MaxHDunit[100]
  ProdInv$MaxHDtotal[101]<- ProdInv$Qty[101] *  ProdInv$MaxHDunit[101]
  ProdInv$MaxHDtotal[102]<- ProdInv$Qty[102] *  ProdInv$MaxHDunit[102]
  ProdInv$MaxHDtotal[103]<- ProdInv$Qty[103] *  ProdInv$MaxHDunit[103]
  ProdInv$MaxHDtotal[104]<- ProdInv$Qty[104] *  ProdInv$MaxHDunit[104]
  ProdInv$MaxHDtotal[105]<- ProdInv$Qty[105] *  ProdInv$MaxHDunit[105]
  ProdInv$MaxHDtotal[106]<- ProdInv$Qty[106] *  ProdInv$MaxHDunit[106]
  ProdInv$MaxHDtotal[107]<- ProdInv$Qty[107] *  ProdInv$MaxHDunit[107]
  ProdInv$MaxHDtotal[108]<- ProdInv$Qty[108] *  ProdInv$MaxHDunit[108]
  ProdInv$MaxHDtotal[109]<- ProdInv$Qty[109] *  ProdInv$MaxHDunit[109]
  ProdInv$MaxHDtotal[110]<- ProdInv$Qty[110] *  ProdInv$MaxHDunit[110]
  ProdInv$MaxHDtotal[111]<- ProdInv$Qty[111] *  ProdInv$MaxHDunit[111]
  ProdInv$MaxHDtotal[112]<- ProdInv$Qty[112] *  ProdInv$MaxHDunit[112]
  ProdInv$MaxHDtotal[113]<- ProdInv$Qty[113] *  ProdInv$MaxHDunit[113]
  ProdInv$MaxHDtotal[114]<- ProdInv$Qty[114] *  ProdInv$MaxHDunit[114]
  ProdInv$MaxHDtotal[115]<- ProdInv$Qty[115] *  ProdInv$MaxHDunit[115]
  ProdInv$MaxHDtotal[116]<- ProdInv$Qty[116] *  ProdInv$MaxHDunit[116]
  ProdInv$MaxHDtotal[117]<- ProdInv$Qty[117] *  ProdInv$MaxHDunit[117]
  ProdInv$MaxHDtotal[118]<- ProdInv$Qty[118] *  ProdInv$MaxHDunit[118]
  ProdInv$MaxHDtotal[119]<- ProdInv$Qty[119] *  ProdInv$MaxHDunit[119]
  ProdInv$MaxHDtotal[120]<- ProdInv$Qty[120] *  ProdInv$MaxHDunit[120]
  ProdInv$MaxHDtotal[121]<- ProdInv$Qty[121] *  ProdInv$MaxHDunit[121]
  ProdInv$MaxHDtotal[122]<- ProdInv$Qty[122] *  ProdInv$MaxHDunit[122]
  ProdInv$MaxHDtotal[123]<- ProdInv$Qty[123] *  ProdInv$MaxHDunit[123]
  ProdInv$MaxHDtotal[124]<- ProdInv$Qty[124] *  ProdInv$MaxHDunit[124]
  ProdInv$MaxHDtotal[125]<- ProdInv$Qty[125] *  ProdInv$MaxHDunit[125]
  ProdInv$MaxHDtotal[126]<- ProdInv$Qty[126] *  ProdInv$MaxHDunit[126]
  ProdInv$MaxHDtotal[127]<- ProdInv$Qty[127] *  ProdInv$MaxHDunit[127]
  ProdInv$MaxHDtotal[128]<- ProdInv$Qty[128] *  ProdInv$MaxHDunit[128]
  ProdInv$MaxHDtotal[129]<- ProdInv$Qty[129] *  ProdInv$MaxHDunit[129]
  ProdInv$MaxHDtotal[130]<- ProdInv$Qty[130] *  ProdInv$MaxHDunit[130]
  ProdInv$MaxHDtotal[131]<- ProdInv$Qty[131] *  ProdInv$MaxHDunit[131]
  ProdInv$MaxHDtotal[132]<- ProdInv$Qty[132] *  ProdInv$MaxHDunit[132]
  ProdInv$MaxHDtotal[133]<- ProdInv$Qty[133] *  ProdInv$MaxHDunit[133]
  ProdInv$MaxHDtotal[134]<- ProdInv$Qty[134] *  ProdInv$MaxHDunit[134]
  
  
  Configtrans$IdlePCtotal[looper] <- sum(ProdInv$IdlePCtotal)
  Configtrans$IdleOPtotal[looper] <- sum(ProdInv$IdleOPtotal)
  Configtrans$IdleHDtotal[looper] <- sum(ProdInv$IdleHDtotal)
  
  Configtrans$TypPCtotal[looper] <- sum(ProdInv$TypPCtotal)
  Configtrans$TypOPtotal[looper] <- sum(ProdInv$TypOPtotal)
  Configtrans$TypHDtotal[looper] <- sum(ProdInv$TypHDtotal)
  
  Configtrans$HighPCtotal[looper] <- sum(ProdInv$HighPCtotal)
  Configtrans$HighOPtotal[looper] <- sum(ProdInv$HighOPtotal)
  Configtrans$HighHDtotal[looper] <- sum(ProdInv$HighHDtotal)
  
  Configtrans$MaxPCtotal[looper] <- sum(ProdInv$MaxPCtotal)
  Configtrans$MaxOPtotal[looper] <- sum(ProdInv$MaxOPtotal)
  Configtrans$MaxHDtotal[looper] <- sum(ProdInv$MaxHDtotal)
  
  
  if(input$BuildType == "Calculator")
  {
    return(Configtrans)
  }
  else
  {
    return(ProdInv)
  }
  
  }
  
})

  


v6C <- reactive({
  if(input$BuildType == "Calculator")
  {
    return (NULL)
  }
  else
  {
  RadioHW$`RUS 01 B20` <- v6B()$Qty[39]
  RadioHW$`RUS 01 B1` <- v6B()$Qty[17]
  RadioHW$`RUS 02 B1` <- v6B()$Qty[18] + v6B()$Qty[35]
  RadioHW$`RUS 02 B8` <- v6B()$Qty[4] + v6B()$Qty[5] + v6B()$Qty[14] + v6B()$Qty[15] + v6B()$Qty[16] + v6B()$Qty[56] + v6B()$Qty[57] + v6B()$Qty[58] + v6B()$Qty[59] + v6B()$Qty[60]
  RadioHW$`RUS 01 B3` <- v6B()$Qty[36]
  RadioHW$`RUS 02 B3` <- v6B()$Qty[37]
  RadioHW$`RUS 03 B3` <- v6B()$Qty[38]
  RadioHW$`RRUS 11 B20` <- v6B()$Qty[26]
  RadioHW$`RRUS 12 B8` <- v6B()$Qty[1]
  RadioHW$`Radio 2212 B8` <- v6B()$Qty[2] + v6B()$Qty[3] + v6B()$Qty[6] + v6B()$Qty[29] + v6B()$Qty[30] + v6B()$Qty[55] + v6B()$Qty[61]
  RadioHW$`Radio 2217 B1` <- v6B()$Qty[7] + v6B()$Qty[8] + v6B()$Qty[9] + v6B()$Qty[10] + v6B()$Qty[11] + v6B()$Qty[12] + v6B()$Qty[31] + v6B()$Qty[52] + v6B()$Qty[76] + v6B()$Qty[77] + v6B()$Qty[78] + v6B()$Qty[79] + v6B()$Qty[80] + v6B()$Qty[81]
  RadioHW$`Radio 2217 B3` <- v6B()$Qty[32] + v6B()$Qty[53]
  RadioHW$`Radio 2217 B8` <- v6B()$Qty[13] + v6B()$Qty[33]
  RadioHW$`Radio 2217 B20` <- v6B()$Qty[34] + v6B()$Qty[44] + v6B()$Qty[45]
  RadioHW$`Radio 2219 B3` <- v6B()$Qty[19]
  RadioHW$`Radio 4415 B3` <- v6B()$Qty[20] + v6B()$Qty[46] + v6B()$Qty[47]
  RadioHW$`Radio 4415 B7A` <- v6B()$Qty[23]
  RadioHW$`Radio 8808 B40Y` <- v6B()$Qty[24] + v6B()$Qty[25] + v6B()$Qty[50] + v6B()$Qty[51]
  RadioHW$`Radio 4415 B1` <- v6B()$Qty[21] + v6B()$Qty[22] + v6B()$Qty[48] + v6B()$Qty[49]
  RadioHW$`Radio 8823 B42G` <- v6B()$Qty[62]
  RadioHW$`AIR 6488 B42G` <- v6B()$Qty[63]
  RadioHW$`Radio 2238 B8 B20` <- v6B()$Qty[27] + v6B()$Qty[28] + v6B()$Qty[68] + v6B()$Qty[69] + v6B()$Qty[70] + v6B()$Qty[71] + v6B()$Qty[72] + v6B()$Qty[73] + v6B()$Qty[74] + v6B()$Qty[75]
  RadioHW$`Radio 2203 B3` <- v6B()$Qty[54]
  RadioHW$`Radio 4480 B1 B3` <- v6B()$Qty[42] + v6B()$Qty[43]
  
  return (RadioHW)
  }
})  
observe({print(v6C())})


v6D <- reactive({  
  if(input$BuildType == "Calculator")
  {
    return (NULL)
  }
  else
  {
  DUBBHW$`DUG 10` <- v6B()$Qty[99]
  DUBBHW$`DUG 20` <- v6B()$Qty[100]
  DUBBHW$`DUW 20` <- v6B()$Qty[101]
  DUBBHW$`DUW 30` <- v6B()$Qty[102]
  DUBBHW$`DUW 31` <- v6B()$Qty[103]
  DUBBHW$`DUS 31` <- v6B()$Qty[104]
  DUBBHW$`BB 5212` <- v6B()$Qty[88]
  DUBBHW$`BB 5216` <- v6B()$Qty[89]
  DUBBHW$`BB 6620` <- v6B()$Qty[107]
  DUBBHW$`BB 6630` <- v6B()$Qty[108]
  DUBBHW$`R503` <- v6B()$Qty[109]
  DUBBHW$`BB 6318` <- v6B()$Qty[113]
  DUBBHW$`BB 6502` <- v6B()$Qty[114]
  
  return (DUBBHW)
  }
})
observe({print(v6D())})


v6E <- reactive({
  if(input$BuildType == "Calculator")
  {
    return (NULL)
  }
  else
  {
  CabHW$`RBS 6201` <- v6B()$Qty[124]
  CabHW$`RBS 6202` <- v6B()$Qty[126]
  CabHW$`Enc 6147/6215` <- v6B()$Qty[127]
  CabHW$`RBS 6601` <- v6B()$Qty[128]
  CabHW$`19" Rack` <- v6B()$Qty[129]
  CabHW$`Eltek` <- v6B()$Qty[133]
  CabHW$`RBS 6102` <- v6B()$Qty[125]
  CabHW$`RBS 6140/6150` <- v6B()$Qty[130]
  CabHW$`RBS 6301` <- v6B()$Qty[131]
  CabHW$`Lancaster 3rd Party Cab` <- v6B()$Qty[134]
  CabHW$`Shire` <- v6B()$Qty[135]
  CabHW$`York cabinet` <- v6B()$Qty[132]

  return (CabHW)
  }
})
observe({print(v6E())})



#vX <- reactive({  
#if(toString(vA()) == "StreetFurniture")
#{
#  RadioHW[1,2] = 10
#  return(RadioHW)
#}
#else
#{
#  RadioHW[1,2] = 11
#  return(RadioHW)
#}
#})  
#observe({print(vX())})


# vX variable to create vector list of columns of Radios to hide, that is where row value for that column equals 0 #
vX <- reactive({
  #RadioHWvector <- c(colnames(v6C()))
  #RadioHWvectorsub <- subset(RadioHWvector,v6C()[,]==0)
  RadioHWvectorsub <- c(which(v6C()==0)-1)  # -1 because we will be removing the index column, so column index 4 becomes 3, column index 5 becomes 4 etc.
  return(RadioHWvectorsub)
})
observe({print("Radio columns:")})
observe({print(vX())})


# vY variable to create vector list of columns of Digital Units/Baseband to hide, that is where row value for that column equals 0 #
vY <- reactive({
  #DUBBHWvector <- c(colnames(v6D()))
  #DUBBHWvectorsub <- subset(DUBBHWvector,v6D()[,]==0)
  DUBBHWvectorsub <- c(which(v6D()==0)-1)
  return(DUBBHWvectorsub)
})
observe({print("DUBB columns:")})
observe({print(vY())})

# vZ variable to create vector list of columns of Cabinets/Enclosures/Support Systems to hide, that is where row value for that column equals 0 #
vZ <- reactive({
  #CabHWvector <- c(colnames(v6E()))
  #CabHWvectorsub <- subset(CabHWvector,v6E()[,]==0)
  CabHWvectorsub <- c(which(v6E()==0)-1)
  return(CabHWvectorsub)
})
observe({print("Cabinet columns:")})
observe({print(vZ())})


# vZ1 variable to create vector list of rows of Cabinet Evironment to hide, that is where column value for that row does not equal input$Config or top 3 header rows #
vZ1 <- reactive({
  CEvectorsub <- c(as.character(CE[which(CE[2] == input$Config),]))
  return(CEvectorsub)
})
observe({print("CE rows:")})
observe({print(vZ1())})




# rendering Product Inventory #  
output$prodinv <- DT::renderDataTable(
  v6B(), options = list(columnDefs = list(list(targets = c(6,8,10,12,14,16), visible = FALSE),list(className = 'dt-center', targets = c(5,6))),
                        scrollX = TRUE, pagelength = 100, lengthMenu = c(10,20,50,80,90,100), stringsAsFactors = FALSE)
)

# rendering Power Consumption Master #  
output$pcmaster <- DT::renderDataTable(
  v6B(), options = list(columnDefs = list(list(targets = c(6,8,10,12,14,16), visible = FALSE),list(className = 'dt-center', targets = c(5,6))),
                        scrollX = TRUE, pagelength = 100, lengthMenu = c(10,20,50,80,90,100), stringsAsFactors = FALSE)
)
  
# rendering Radio Hardware Output #  
  output$RadioHW <- DT::renderDataTable(
    datatable(v6C(), rownames = F, options = list(columnDefs = list(list(targets = vX(), visible = FALSE), list(width='200px', targets = "_all"), list(className = 'dt-center', targets = "_all")),
                           scrollX = TRUE, pagelength = 5, lengthMenu = c(5,10), stringsAsFactors = FALSE), class = 'cell-border stripe', caption = htmltools::tags$caption(htmltools::tags$span("Radio Units", style="color:black; font-weight: bold;")))
  )

    
# rendering DUBB Hardware Output #  
  output$DUBBHW <- DT::renderDataTable(
    datatable(v6D(), rownames = F, options = list(columnDefs = list(list(targets = vY(), visible = FALSE), list(width='200px', targets = "_all"), list(className = 'dt-center', targets = "_all")),
                          scrollX = TRUE, pagelength = 5, lengthMenu = c(5,10), stringsAsFactors = FALSE), class = 'cell-border stripe', caption = htmltools::tags$caption(htmltools::tags$span("Digital Units and Basebands", style="color:black; font-weight: bold;")))
  )

   
# rendering Cab Hardware Output #  
  output$CabHW <- DT::renderDataTable(
    datatable(v6E(), rownames = F, options = list(columnDefs = list(list(targets = vZ(), visible = FALSE), list(width='200px', targets = "_all"), list(className = 'dt-center', targets = "_all")),
                                                  scrollX = TRUE, pagelength = 5, lengthMenu = c(5,10), stringsAsFactors = FALSE), class = 'cell-border stripe', caption = htmltools::tags$caption(htmltools::tags$span("Cabinets and Enclosures", style="color:black; font-weight: bold;")))
  )
 

# variable for renderDataTable #
vF <- reactive({
  if(input$Config == ""){
    return (CE)
  }
  else{
    return (CE[c(1,2,which(CE[2] == input$Config)),])
  }
})  


# variable for RMD #
vF1 <- reactive({
  if(input$Config == ""){
    return (CE2)
  }
  else{
    return (CE2[c(which(CE2[2] == input$Config)),])
  }
})  

  
# rendering Cabinet Environment Output (initially we used the if else statement to hide rows but it works better in reactive function for passing to params #  
  output$CE <- DT::renderDataTable(
    #if(input$Config == ""){
    datatable(vF(),
              rownames = F, options = list(columnDefs = list(list(autoWidth = TRUE, targets = "_all")),
              scrollX = TRUE, pagelength = 15, lengthMenu = c(15,20,30,50), stringsAsFactors = FALSE), 
              class = 'display nowrap cell-border striped', caption = htmltools::tags$caption(htmltools::tags$span("Cabinet Environment", 
              style="color:black; font-weight: bold;"))) %>% formatStyle("3PPCab", target = "row", backgroundColor = styleEqual(c("Tef LTE BB","SupportSystemControl"),c("yellow","yellow")))
    #}
    # else{
    #   datatable(CE[c(1,2,which(CE[2] == input$Config)),],
    #             rownames = F, options = list(columnDefs = list(list(autoWidth = TRUE, targets = "_all")),
    #             scrollX = TRUE, pagelength = 15, lengthMenu = c(15,20,30,50), stringsAsFactors = FALSE), 
    #             class = 'display nowrap cell-border striped', caption = htmltools::tags$caption(htmltools::tags$span("Cabinet Environment", 
    #             style="color:black; font-weight: bold;"))) %>% formatStyle("3PPCab", target = "row", backgroundColor = styleEqual(c("Tef LTE BB","SupportSystemControl"),c("yellow","yellow")))
    # }
      
      ) # three classes are defined here for this datatable, 1.display nowrap to prevent text wrapping within cells, 2.cell-border to border cells and 3.striped to stripe every second row

  

  

##############################################################################################################################################################  
## Updating and rendering the PC data ##

v21 <- reactive({
    PCoverview$RadioIdlePC[1] <- sum(v6B()$IdlePCtotal[1:81])
    PCoverview$RadioTypPC[1] <- sum(v6B()$TypPCtotal[1:81])
    PCoverview$RadioHighPC[1] <- sum(v6B()$HighPCtotal[1:81])
    PCoverview$RadioMaxPC[1] <- sum(v6B()$MaxPCtotal[1:81])
    PCoverview$BasebandIdlePC[1] <- sum(v6B()$IdlePCtotal[99:114])
    PCoverview$BasebandTypPC[1] <- sum(v6B()$TypPCtotal[99:114])
    PCoverview$BasebandHighPC[1] <- sum(v6B()$HighPCtotal[99:114])
    PCoverview$BasebandMaxPC[1] <- sum(v6B()$MaxPCtotal[99:114])
    PCoverview$SupportSysIdlePC[1] <- sum(v6B()$IdlePCtotal[124:135])
    PCoverview$SupportSysTypPC[1] <- sum(v6B()$TypPCtotal[124:135])
    PCoverview$SupportSysHighPC[1] <- sum(v6B()$HighPCtotal[124:135])
    PCoverview$SupportSysMaxPC[1] <- sum(v6B()$MaxPCtotal[124:135])
    PCoverview$TotalIdlePC[1] <- sum(v6B()$IdlePCtotal)
    PCoverview$TotalTypPC[1] <- sum(v6B()$TypPCtotal)
    PCoverview$TotalHighPC[1] <- sum(v6B()$HighPCtotal)
    PCoverview$TotalMaxPC[1] <- sum(v6B()$MaxPCtotal)
    
    PCoverview$RadioIdleOP[1] <- sum(v6B()$IdleOPtotal[1:81])
    PCoverview$RadioTypOP[1] <- sum(v6B()$TypOPtotal[1:81])
    PCoverview$RadioHighOP[1] <- sum(v6B()$HighOPtotal[1:81])
    PCoverview$RadioMaxOP[1] <- sum(v6B()$MaxOPtotal[1:81])
    PCoverview$BasebandIdleOP[1] <- sum(v6B()$IdleOPtotal[99:114])
    PCoverview$BasebandTypOP[1] <- sum(v6B()$TypOPtotal[99:114])
    PCoverview$BasebandHighOP[1] <- sum(v6B()$HighOPtotal[99:114])
    PCoverview$BasebandMaxOP[1] <- sum(v6B()$MaxOPtotal[99:114])
    PCoverview$SupportSysIdleOP[1] <- sum(v6B()$IdleOPtotal[124:135])
    PCoverview$SupportSysTypOP[1] <- sum(v6B()$TypOPtotal[124:135])
    PCoverview$SupportSysHighOP[1] <- sum(v6B()$HighOPtotal[124:135])
    PCoverview$SupportSysMaxOP[1] <- sum(v6B()$MaxOPtotal[124:135])
    PCoverview$TotalIdleOP[1] <- sum(v6B()$IdleOPtotal)
    PCoverview$TotalTypOP[1] <- sum(v6B()$TypOPtotal)
    PCoverview$TotalHighOP[1] <- sum(v6B()$HighOPtotal)
    PCoverview$TotalMaxOP[1] <- sum(v6B()$MaxOPtotal)
    
    PCoverview$RadioIdleHD[1] <- sum(v6B()$IdleHDtotal[1:81])
    PCoverview$RadioTypHD[1] <- sum(v6B()$TypHDtotal[1:81])
    PCoverview$RadioHighHD[1] <- sum(v6B()$HighHDtotal[1:81])
    PCoverview$RadioMaxHD[1] <- sum(v6B()$MaxHDtotal[1:81])
    PCoverview$BasebandIdleHD[1] <- sum(v6B()$IdleHDtotal[99:114])
    PCoverview$BasebandTypHD[1] <- sum(v6B()$TypHDtotal[99:114])
    PCoverview$BasebandHighHD[1] <- sum(v6B()$HighHDtotal[99:114])
    PCoverview$BasebandMaxHD[1] <- sum(v6B()$MaxHDtotal[99:114])
    PCoverview$SupportSysIdleHD[1] <- sum(v6B()$IdleHDtotal[124:135])
    PCoverview$SupportSysTypHD[1] <- sum(v6B()$TypHDtotal[124:135])
    PCoverview$SupportSysHighHD[1] <- sum(v6B()$HighHDtotal[124:135])
    PCoverview$SupportSysMaxHD[1] <- sum(v6B()$MaxHDtotal[124:135])
    PCoverview$TotalIdleHD[1] <- sum(v6B()$IdleHDtotal)
    PCoverview$TotalTypHD[1] <- sum(v6B()$TypHDtotal)
    PCoverview$TotalHighHD[1] <- sum(v6B()$HighHDtotal)
    PCoverview$TotalMaxHD[1] <- sum(v6B()$MaxHDtotal)
    
    return(PCoverview)
    
  }) 
  observe({print(v21())})    

  
# rendering Total Hardware Output #  
    output$SupportSysPC <- DT::renderDataTable(
      datatable(v21(), rownames = F, options = list(columnDefs = list(list(targets = c(0,1,2,3,4,5,6,7,12,13,14,15,16:47), visible = FALSE), list(list(className = 'dt-center', targets = "_all"))),
                            scrollX = TRUE, pagelength = 5, lengthMenu = c(5,10), stringsAsFactors = FALSE), class = 'cell-border stripe',
                               caption = htmltools::tags$caption(htmltools::tags$span("Support System Power Consumption Data", style="color:black; font-weight: bold;")))
                                   %>% formatStyle(c('SupportSysTypPC', 'SupportSysMaxPC'),  color = 'white', backgroundColor = 'red', fontWeight = 'bold')
    )
    
    output$DUBBPC <- DT::renderDataTable(
      datatable(v21(), rownames = F, options = list(columnDefs = list(list(targets = c(0,1,2,3,8,9,10,11,12,13,14,15,16:47), visible = FALSE), list(list(className = 'dt-center', targets = "_all"))),
                                                    scrollX = TRUE, pagelength = 5, lengthMenu = c(5,10), stringsAsFactors = FALSE), class = 'cell-border stripe',
                caption = htmltools::tags$caption(htmltools::tags$span("Baseband/Digital Unit Power Consumption Data", style="color:black; font-weight: bold;")))
      %>% formatStyle(c('BasebandTypPC', 'BasebandMaxPC'),  color = 'white', backgroundColor = 'red', fontWeight = 'bold')
    )
    
    output$RadioPC <- DT::renderDataTable(
      datatable(v21(), rownames = F, options = list(columnDefs = list(list(targets = c(4,5,6,7,8,9,10,11,12,13,14,15,16:47), visible = FALSE), list(list(className = 'dt-center', targets = "_all"))),
                                                    scrollX = TRUE, pagelength = 5, lengthMenu = c(5,10), stringsAsFactors = FALSE), class = 'cell-border stripe',
                caption = htmltools::tags$caption(htmltools::tags$span("Radio Power Consumption Data", style="color:black; font-weight: bold;")))
      %>% formatStyle(c('RadioTypPC', 'RadioMaxPC'),  color = 'white', backgroundColor = 'red', fontWeight = 'bold')
    )
    
    output$TotalPC <- DT::renderDataTable(
      datatable(v21(), rownames = F, options = list(columnDefs = list(list(targets = c(0,1,2,3,4,5,6,7,8,9,10,11,16:47), visible = FALSE), list(list(className = 'dt-center', targets = "_all"))),
                                                    scrollX = TRUE, pagelength = 5, lengthMenu = c(5,10), stringsAsFactors = FALSE), class = 'cell-border stripe',
                caption = htmltools::tags$caption(htmltools::tags$span("Total Power Consumption Data", style="color:black; font-weight: bold;")))
      %>% formatStyle(c('TotalTypPC', 'TotalMaxPC'),  color = 'white', backgroundColor = 'red', fontWeight = 'bold')
    )
  
    
# Power Tables for rmarkdown #
    v21a <- reactive({
      RadioPCoverview$RadioIdlePC[1] <- sum(v6B()$IdlePCtotal[1:81])
      RadioPCoverview$RadioTypPC[1] <- sum(v6B()$TypPCtotal[1:81])
      RadioPCoverview$RadioHighPC[1] <- sum(v6B()$HighPCtotal[1:81])
      RadioPCoverview$RadioMaxPC[1] <- sum(v6B()$MaxPCtotal[1:81])
      return(RadioPCoverview)
    })
    
    v21b <- reactive({
      BBPCoverview$BasebandIdlePC[1] <- sum(v6B()$IdlePCtotal[99:114])
      BBPCoverview$BasebandTypPC[1] <- sum(v6B()$TypPCtotal[99:114])
      BBPCoverview$BasebandHighPC[1] <- sum(v6B()$HighPCtotal[99:114])
      BBPCoverview$BasebandMaxPC[1] <- sum(v6B()$MaxPCtotal[99:114])
      return(BBPCoverview)
    })
    
    v21c <- reactive({
      CabPCoverview$SupportSysIdlePC[1] <- sum(v6B()$IdlePCtotal[124:135])
      CabPCoverview$SupportSysTypPC[1] <- sum(v6B()$TypPCtotal[124:135])
      CabPCoverview$SupportSysHighPC[1] <- sum(v6B()$HighPCtotal[124:135])
      CabPCoverview$SupportSysMaxPC[1] <- sum(v6B()$MaxPCtotal[124:135])
      #return (select(CabPCoverview,1,2,3,4))   # can do it this way also, that is just select the first 4 columns
      return (CabPCoverview[,1:4])
    })
    
    v21d <- reactive({
      TotalPCoverview$TotalIdlePC[1] <- sum(v6B()$IdlePCtotal)
      TotalPCoverview$TotalTypPC[1] <- sum(v6B()$TypPCtotal)
      TotalPCoverview$TotalHighPC[1] <- sum(v6B()$HighPCtotal)
      TotalPCoverview$TotalMaxPC[1] <- sum(v6B()$MaxPCtotal)
      return(TotalPCoverview)
    })
    
# %>% formatStyle('TotalMaxPC',  color = 'red', backgroundColor = 'orange', fontWeight = 'bold')  
    
    
# Calculating power consumption by cabinet ##
    # 2x cabinet scebarios #

    # •	2x RBS 6201:
    #   
    # Cabinet 1:
    # G9 Radios (Macro) + DUGs
    # U9 Radios (Macro) + DUWs
    # 
    # Cabinet 2:
    # U21 Radios (Macro) + DUWs
    # L18 Radios (Macro)
    # L8 Radios (Macro)
    # BBs
    # R503
    # 
    # All ERS/RRUS radios powered from external Power Distribution unit.
    # [Watson Charles (UK)] Correct.
  
    
    # •	2x RBS 6102:
    #   
    # Cabinet 1:
    # G9 Radios + DUGs
    # U9 Radios + DUWs
    # L8 Radios (ERS/RRUS)
    # NR7 Radios
    # NR34 Radios
    # L26 Radios
    # 
    # Cabinet 2:
    # L18 Radios
    # L23 Radios
    # L8 Radios (Macro)
    # U21 Radios + DUWs
    # L21/NR21 Radios
    # BBs
    # R503
    # [Watson Charles (UK)] Correct.
    
    
    # •	1x RBS 6102 + Lancaster
    # 
    # Cabinet 1 (RBS 6102):
    # G9 Radios + DUGs
    # U9 Radios + DUWs
    # NR34 Radios
    # 
    # Cabinet 2 (Lancaster):
    # L18 Radios
    # L23 Radios
    # L8 Radios (Macro)       # although not used in any of these sceanarios thus far
    # L8 Radios (ERS/RRUS)
    # NR7 Radios              # although not used in any of these sceanarios thus far
    # L26 Radios
    # U21 + DUWs              # although not used in any of these sceanarios thus far
    # L21/NR21 Radios
    # BBs
    # R503
    # [Watson Charles (UK)] Not confirmed yet, but I see this being the case, this is what is holding up Anuj with the BoM for the B3-CCR-038. Confirmation needed from Mark Richards’ team.
    
    
    # •	1x RBS 6102 + York:
    #   
    # Cabinet 1 (RBS 6102):
    # G9 Radios + DUGs
    # U9 Radios + DUWs
    # BBs
    # R503
    # L18 Radios
    # L23 Radios
    # L8 Radios (Macro)      # although not used in any of these sceanarios thus far
    # L8 Radios (ERS/RRUS)
    # NR7 Radios
    # NR34 Radios
    # L26 Radios
    # U21 + DUWs             # although not used in any of these sceanarios thus far
    # L21/NR21 Radios
    # [Watson Charles (UK)] All Radios powered from Cab 1, RBS 6102.
    # 
    # Cabinet 2 (York):
      
      
    
    v22 <- reactive({
       L8macro <- c("a")
       L8ers <- c("r", "t", "z") 
       
     if(substr(v6A2(), 46,47) == "id" & !(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),1] %in% cabsx2_B1B3) & !(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),1] %in% cabsx2_B2B3))
     {
       CabPCoverview$Cab1_IdlePC[1] = sum(v6B()$IdlePCtotal[c(4,5,14:18,35:39,56:60,99:112,124,128)])
       CabPCoverview$Cab1_TypPC[1] = sum(v6B()$TypPCtotal[c(4,5,14:18,35:39,56:60,99:112,124,128)])
       CabPCoverview$Cab1_HighPC[1] = sum(v6B()$HighPCtotal[c(4,5,14:18,35:39,56:60,99:112,124,128)])
       CabPCoverview$Cab1_MaxPC[1] = sum(v6B()$MaxPCtotal[c(4,5,14:18,35:39,56:60,99:112,124,128)])
       CabPCoverview$Cab1_IdleOP[1] = sum(v6B()$IdleOPtotal[c(4,5,14:18,35:39,56:60,99:112,124,128)])
       CabPCoverview$Cab1_TypOP[1] = sum(v6B()$TypOPtotal[c(4,5,14:18,35:39,56:60,99:112,124,128)])
       CabPCoverview$Cab1_HighOP[1] = sum(v6B()$HighOPtotal[c(4,5,14:18,35:39,56:60,99:112,124,128)])
       CabPCoverview$Cab1_MaxOP[1] = sum(v6B()$MaxOPtotal[c(4,5,14:18,35:39,56:60,99:112,124,128)])
       CabPCoverview$Cab1_IdleHD[1] = sum(v6B()$IdleHDtotal[c(4,5,14:18,35:39,56:60,99:112,124,128)])
       CabPCoverview$Cab1_TypHD[1] = sum(v6B()$TypHDtotal[c(4,5,14:18,35:39,56:60,99:112,124,128)])
       CabPCoverview$Cab1_HighHD[1] = sum(v6B()$HighHDtotal[c(4,5,14:18,35:39,56:60,99:112,124,128)])
       CabPCoverview$Cab1_MaxHD[1] = sum(v6B()$MaxHDtotal[c(4,5,14:18,35:39,56:60,99:112,124,128)])
       
       CabPCoverview$Cab2_IdlePC[1] = "NA"
       CabPCoverview$Cab2_TypPC[1] = "NA"
       CabPCoverview$Cab2_HighPC[1] = "NA"
       CabPCoverview$Cab2_MaxPC[1] = "NA"
       CabPCoverview$Cab2_IdleOP[1] = "NA"
       CabPCoverview$Cab2_TypOP[1] = "NA"
       CabPCoverview$Cab2_HighOP[1] = "NA"
       CabPCoverview$Cab2_MaxOP[1] = "NA"
       CabPCoverview$Cab2_IdleHD[1] = "NA"
       CabPCoverview$Cab2_TypHD[1] = "NA"
       CabPCoverview$Cab2_HighHD[1] = "NA"
       CabPCoverview$Cab2_MaxHD[1] = "NA"
       return(CabPCoverview)
     }
       
     else if(substr(v6A2(), 46,47) == "id" & ((DS6456[which(DS6456$TelefonicaConfiguration == input$Config),1] %in% cabsx2_B1B3) | (DS6456[which(DS6456$TelefonicaConfiguration == input$Config),1] %in% cabsx2_B2B3)))
       {
         CabPCoverview$Cab1_IdlePC[1] = sum(v6B()$IdlePCtotal[c(4,5,14:16,56:60,99:103)],v6B()$IdlePCtotal[124]/2)
         CabPCoverview$Cab1_TypPC[1] = sum(v6B()$TypPCtotal[c(4,5,14:16,56:60,99:103)],v6B()$TypPCtotal[124]/2)
         CabPCoverview$Cab1_HighPC[1] = sum(v6B()$HighPCtotal[c(4,5,14:16,56:60,99:103)],v6B()$HighPCtotal[124]/2)
         CabPCoverview$Cab1_MaxPC[1] = sum(v6B()$MaxPCtotal[c(4,5,14:16,56:60,99:103)],v6B()$MaxPCtotal[124]/2)
         CabPCoverview$Cab1_IdleOP[1] = sum(v6B()$IdleOPtotal[c(4,5,14:16,56:60,99:103)],v6B()$IdleOPtotal[124]/2)
         CabPCoverview$Cab1_TypOP[1] = sum(v6B()$TypOPtotal[c(4,5,14:16,56:60,99:103)],v6B()$TypOPtotal[124]/2)
         CabPCoverview$Cab1_HighOP[1] = sum(v6B()$HighOPtotal[c(4,5,14:16,56:60,99:103)],v6B()$HighOPtotal[124]/2)
         CabPCoverview$Cab1_MaxOP[1] = sum(v6B()$MaxOPtotal[c(4,5,14:16,56:60,99:103)],v6B()$MaxOPtotal[124]/2)
         CabPCoverview$Cab1_IdleHD[1] = sum(v6B()$IdleHDtotal[c(4,5,14:16,56:60,99:103)],v6B()$IdleHDtotal[124]/2)
         CabPCoverview$Cab1_TypHD[1] = sum(v6B()$TypHDtotal[c(4,5,14:16,56:60,99:103)],v6B()$TypHDtotal[124]/2)
         CabPCoverview$Cab1_HighHD[1] = sum(v6B()$HighHDtotal[c(4,5,14:16,56:60,99:103)],v6B()$HighHDtotal[124]/2)
         CabPCoverview$Cab1_MaxHD[1] = sum(v6B()$MaxHDtotal[c(4,5,14:16,56:60,99:103)],v6B()$MaxHDtotal[124]/2)
         
         CabPCoverview$Cab2_IdlePC[1] = sum(v6B()$IdlePCtotal[c(17,18,35:39,104:112,128)],v6B()$IdlePCtotal[124]/2)
         CabPCoverview$Cab2_TypPC[1] = sum(v6B()$TypPCtotal[c(17,18,35:39,104:112,128)],v6B()$TypPCtotal[124]/2)
         CabPCoverview$Cab2_HighPC[1] = sum(v6B()$HighPCtotal[c(17,18,35:39,104:112,128)],v6B()$HighPCtotal[124]/2)
         CabPCoverview$Cab2_MaxPC[1] = sum(v6B()$MaxPCtotal[c(17,18,35:39,104:112,128)],v6B()$MaxPCtotal[124]/2)
         CabPCoverview$Cab2_IdleOP[1] = sum(v6B()$IdleOPtotal[c(17,18,35:39,104:112,128)],v6B()$IdleOPtotal[124]/2)
         CabPCoverview$Cab2_TypOP[1] = sum(v6B()$TypOPtotal[c(17,18,35:39,104:112,128)],v6B()$TypOPtotal[124]/2)
         CabPCoverview$Cab2_HighOP[1] = sum(v6B()$HighOPtotal[c(17,18,35:39,104:112,128)],v6B()$HighOPtotal[124]/2)
         CabPCoverview$Cab2_MaxOP[1] = sum(v6B()$MaxOPtotal[c(17,18,35:39,104:112,128)],v6B()$MaxOPtotal[124]/2)
         CabPCoverview$Cab2_IdleHD[1] = sum(v6B()$IdleHDtotal[c(17,18,35:39,104:112,128)],v6B()$IdleHDtotal[124]/2)
         CabPCoverview$Cab2_TypHD[1] = sum(v6B()$TypHDtotal[c(17,18,35:39,104:112,128)],v6B()$TypHDtotal[124]/2)
         CabPCoverview$Cab2_HighHD[1] = sum(v6B()$HighHDtotal[c(17,18,35:39,104:112,128)],v6B()$HighHDtotal[124]/2)
         CabPCoverview$Cab2_MaxHD[1] = sum(v6B()$MaxHDtotal[c(17,18,35:39,104:112,128)],v6B()$MaxHDtotal[124]/2)
         return(CabPCoverview)
       }
       
     else if(vSCD() == "New Build" 
             | (vSCD() == "B1-B3" & (!(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),1] %in% cabsx2_B1B3_RBS_YL)))
               | (vSCD() == "B2-B3" & (!(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),1] %in% cabsx2_B2B3_RBS_YL))))
     {
       CabPCoverview$Cab1_IdlePC[1] = PCoverview$TotalIdlePC[1]
       CabPCoverview$Cab1_TypPC[1] = PCoverview$TotalTypPC[1]
       CabPCoverview$Cab1_HighPC[1] = PCoverview$TotalHighPC[1]
       CabPCoverview$Cab1_MaxPC[1] = PCoverview$TotalMaxPC[1]
       CabPCoverview$Cab1_IdleOP[1] = PCoverview$TotalIdleOP[1]
       CabPCoverview$Cab1_TypOP[1] = PCoverview$TotalTypOP[1]
       CabPCoverview$Cab1_HighOP[1] = PCoverview$TotalHighOP[1]
       CabPCoverview$Cab1_MaxOP[1] = PCoverview$TotalMaxOP[1]
       CabPCoverview$Cab1_IdleHD[1] = PCoverview$TotalIdleHD[1]
       CabPCoverview$Cab1_TypHD[1] = PCoverview$TotalTypHD[1]
       CabPCoverview$Cab1_HighHD[1] = PCoverview$TotalHighHD[1]
       CabPCoverview$Cab1_MaxHD[1] = PCoverview$TotalMaxHD[1]
       
       CabPCoverview$Cab2_IdlePC[1] = "NA"
       CabPCoverview$Cab2_TypPC[1] = "NA"
       CabPCoverview$Cab2_HighPC[1] = "NA"
       CabPCoverview$Cab2_MaxPC[1] = "NA"
       CabPCoverview$Cab2_IdleOP[1] = "NA"
       CabPCoverview$Cab2_TypOP[1] = "NA"
       CabPCoverview$Cab2_HighOP[1] = "NA"
       CabPCoverview$Cab2_MaxOP[1] = "NA"
       CabPCoverview$Cab2_IdleHD[1] = "NA"
       CabPCoverview$Cab2_TypHD[1] = "NA"
       CabPCoverview$Cab2_HighHD[1] = "NA"
       CabPCoverview$Cab2_MaxHD[1] = "NA"
       return(CabPCoverview)
     }
     else if((vSCD() == "B1-B3" & DS6456[which(DS6456$TelefonicaConfiguration == input$Config),1] %in% cabsx2_B1B3)
             | (vSCD() == "B2-B3" & DS6456[which(DS6456$TelefonicaConfiguration == input$Config),1] %in% cabsx2_B2B3))
     {
       CabPCoverview$Cab1_IdlePC[1] = sum(v6B()$IdlePCtotal[c(1:5,6,13:16,23,26:30,33:34,44:45,55:75,99:103)],v6B()$IdlePCtotal[124:135]/2)
       CabPCoverview$Cab1_TypPC[1] = sum(v6B()$TypPCtotal[c(1:5,6,13:16,23,26:30,33:34,44:45,55:75,99:103)],v6B()$TypPCtotal[124:135]/2)
       CabPCoverview$Cab1_HighPC[1] = sum(v6B()$HighPCtotal[c(1:5,6,13:16,23,26:30,33:34,44:45,55:75,99:103)],v6B()$HighPCtotal[124:135]/2)
       CabPCoverview$Cab1_MaxPC[1] = sum(v6B()$MaxPCtotal[c(1:5,6,13:16,23,26:30,33:34,44:45,55:75,99:103)],v6B()$MaxPCtotal[124:135]/2)
       CabPCoverview$Cab1_IdleOP[1] = sum(v6B()$IdleOPtotal[c(1:5,6,13:16,23,26:30,33:34,44:45,55:75,99:103)],v6B()$IdleOPtotal[124:135]/2)
       CabPCoverview$Cab1_TypOP[1] = sum(v6B()$TypOPtotal[c(1:5,6,13:16,23,26:30,33:34,44:45,55:75,99:103)],v6B()$TypOPtotal[124:135]/2)
       CabPCoverview$Cab1_HighOP[1] = sum(v6B()$HighOPtotal[c(1:5,6,13:16,23,26:30,33:34,44:45,55:75,99:103)],v6B()$HighOPtotal[124:135]/2)
       CabPCoverview$Cab1_MaxOP[1] = sum(v6B()$MaxOPtotal[c(1:5,6,13:16,23,26:30,33:34,44:45,55:75,99:103)],v6B()$MaxOPtotal[124:135]/2)
       CabPCoverview$Cab1_IdleHD[1] = sum(v6B()$IdleHDtotal[c(1:5,6,13:16,23,26:30,33:34,44:45,55:75,99:103)],v6B()$IdleHDtotal[124:135]/2)
       CabPCoverview$Cab1_TypHD[1] = sum(v6B()$TypHDtotal[c(1:5,6,13:16,23,26:30,33:34,44:45,55:75,99:103)],v6B()$TypHDtotal[124:135]/2)
       CabPCoverview$Cab1_HighHD[1] = sum(v6B()$HighHDtotal[c(1:5,6,13:16,23,26:30,33:34,44:45,55:75,99:103)],v6B()$HighHDtotal[124:135]/2)
       CabPCoverview$Cab1_MaxHD[1] = sum(v6B()$MaxHDtotal[c(1:5,6,13:16,23,26:30,33:34,44:45,55:75,99:103)],v6B()$MaxHDtotal[124:135]/2)
       
       CabPCoverview$Cab2_IdlePC[1] = sum(v6B()$IdlePCtotal[c(7:12,17:22,24:25,31:32,35:43,46:54,76:81,104:112)],v6B()$IdlePCtotal[124:135]/2)
       CabPCoverview$Cab2_TypPC[1] = sum(v6B()$TypPCtotal[c(7:12,17:22,24:25,31:32,35:43,46:54,76:81,104:112)],v6B()$TypPCtotal[124:135]/2)
       CabPCoverview$Cab2_HighPC[1] = sum(v6B()$HighPCtotal[c(7:12,17:22,24:25,31:32,35:43,46:54,76:81,104:112)],v6B()$HighPCtotal[124:135]/2)
       CabPCoverview$Cab2_MaxPC[1] = sum(v6B()$MaxPCtotal[c(7:12,17:22,24:25,31:32,35:43,46:54,76:81,104:112)],v6B()$MaxPCtotal[124:135]/2)
       CabPCoverview$Cab2_IdleOP[1] = sum(v6B()$IdleOPtotal[c(7:12,17:22,24:25,31:32,35:43,46:54,76:81,104:112)],v6B()$IdleOPtotal[124:135]/2)
       CabPCoverview$Cab2_TypOP[1] = sum(v6B()$TypOPtotal[c(7:12,17:22,24:25,31:32,35:43,46:54,76:81,104:112)],v6B()$TypOPtotal[124:135]/2)
       CabPCoverview$Cab2_HighOP[1] = sum(v6B()$HighOPtotal[c(7:12,17:22,24:25,31:32,35:43,46:54,76:81,104:112)],v6B()$HighOPtotal[124:135]/2)
       CabPCoverview$Cab2_MaxOP[1] = sum(v6B()$MaxOPtotal[c(7:12,17:22,24:25,31:32,35:43,46:54,76:81,104:112)],v6B()$MaxOPtotal[124:135]/2)
       CabPCoverview$Cab2_IdleHD[1] = sum(v6B()$IdleHDtotal[c(7:12,17:22,24:25,31:32,35:43,46:54,76:81,104:112)],v6B()$IdleHDtotal[124:135]/2)
       CabPCoverview$Cab2_TypHD[1] = sum(v6B()$TypHDtotal[c(7:12,17:22,24:25,31:32,35:43,46:54,76:81,104:112)],v6B()$TypHDtotal[124:135]/2)
       CabPCoverview$Cab2_HighHD[1] = sum(v6B()$HighHDtotal[c(7:12,17:22,24:25,31:32,35:43,46:54,76:81,104:112)],v6B()$HighHDtotal[124:135]/2)
       CabPCoverview$Cab2_MaxHD[1] = sum(v6B()$MaxHDtotal[c(7:12,17:22,24:25,31:32,35:43,46:54,76:81,104:112)],v6B()$MaxHDtotal[124:135]/2)
       return (CabPCoverview)
     }
       else if(((vSCD() == "B1-B3" & DS6456[which(DS6456$TelefonicaConfiguration == input$Config),1] %in% cabsx2_B1B3_YL)
                | (vSCD() == "B2-B3" & DS6456[which(DS6456$TelefonicaConfiguration == input$Config),1] %in% cabsx2_B2B3_YL)) & substr(v6A2(), 46,47) == "of")   # RBS 6102 + Lancaster
       {
         CabPCoverview$Cab1_IdlePC[1] = sum(v6B()$IdlePCtotal[c(4,5,14:16,56:60,62,63,99:103)],v6B()$IdlePCtotal[124:135]/2)
         CabPCoverview$Cab1_TypPC[1] = sum(v6B()$TypPCtotal[c(4,5,14:16,56:60,62,63,99:103)],v6B()$TypPCtotal[124:135]/2)
         CabPCoverview$Cab1_HighPC[1] = sum(v6B()$HighPCtotal[c(4,5,14:16,56:60,62,63,99:103)],v6B()$HighPCtotal[124:135]/2)
         CabPCoverview$Cab1_MaxPC[1] = sum(v6B()$MaxPCtotal[c(4,5,14:16,56:60,62,63,99:103)],v6B()$MaxPCtotal[124:135]/2)
         CabPCoverview$Cab1_IdleOP[1] = sum(v6B()$IdleOPtotal[c(4,5,14:16,56:60,62,63,99:103)],v6B()$IdleOPtotal[124:135]/2)
         CabPCoverview$Cab1_TypOP[1] = sum(v6B()$TypOPtotal[c(4,5,14:16,56:60,62,63,99:103)],v6B()$TypOPtotal[124:135]/2)
         CabPCoverview$Cab1_HighOP[1] = sum(v6B()$HighOPtotal[c(4,5,14:16,56:60,62,63,99:103)],v6B()$HighOPtotal[124:135]/2)
         CabPCoverview$Cab1_MaxOP[1] = sum(v6B()$MaxOPtotal[c(4,5,14:16,56:60,62,63,99:103)],v6B()$MaxOPtotal[124:135]/2)
         CabPCoverview$Cab1_IdleHD[1] = sum(v6B()$IdleHDtotal[c(4,5,14:16,56:60,62,63,99:103)],v6B()$IdleHDtotal[124:135]/2)
         CabPCoverview$Cab1_TypHD[1] = sum(v6B()$TypHDtotal[c(4,5,14:16,56:60,62,63,99:103)],v6B()$TypHDtotal[124:135]/2)
         CabPCoverview$Cab1_HighHD[1] = sum(v6B()$HighHDtotal[c(4,5,14:16,56:60,62,63,99:103)],v6B()$HighHDtotal[124:135]/2)
         CabPCoverview$Cab1_MaxHD[1] = sum(v6B()$MaxHDtotal[c(4,5,14:16,56:60,62,63,99:103)],v6B()$MaxHDtotal[124:135]/2)
         
         CabPCoverview$Cab2_IdlePC[1] = sum(v6B()$IdlePCtotal[c(1:3,6:13,17:55,61,64:98,104:112)],v6B()$IdlePCtotal[124:135]/2)
         CabPCoverview$Cab2_TypPC[1] = sum(v6B()$TypPCtotal[c(1:3,6:13,17:55,61,64:98,104:112)],v6B()$TypPCtotal[124:135]/2)
         CabPCoverview$Cab2_HighPC[1] = sum(v6B()$HighPCtotal[c(1:3,6:13,17:55,61,64:98,104:112)],v6B()$HighPCtotal[124:135]/2)
         CabPCoverview$Cab2_MaxPC[1] = sum(v6B()$MaxPCtotal[c(1:3,6:13,17:55,61,64:98,104:112)],v6B()$MaxPCtotal[124:135]/2)
         CabPCoverview$Cab2_IdleOP[1] = sum(v6B()$IdleOPtotal[c(1:3,6:13,17:55,61,64:98,104:112)],v6B()$IdleOPtotal[124:135]/2)
         CabPCoverview$Cab2_TypOP[1] = sum(v6B()$TypOPtotal[c(1:3,6:13,17:55,61,64:98,104:112)],v6B()$TypOPtotal[124:135]/2)
         CabPCoverview$Cab2_HighOP[1] = sum(v6B()$HighOPtotal[c(1:3,6:13,17:55,61,64:98,104:112)],v6B()$HighOPtotal[124:135]/2)
         CabPCoverview$Cab2_MaxOP[1] = sum(v6B()$MaxOPtotal[c(1:3,6:13,17:55,61,64:98,104:112)],v6B()$MaxOPtotal[124:135]/2)
         CabPCoverview$Cab2_IdleHD[1] = sum(v6B()$IdleHDtotal[c(1:3,6:13,17:55,61,64:98,104:112)],v6B()$IdleHDtotal[124:135]/2)
         CabPCoverview$Cab2_TypHD[1] = sum(v6B()$TypHDtotal[c(1:3,6:13,17:55,61,64:98,104:112)],v6B()$TypHDtotal[124:135]/2)
         CabPCoverview$Cab2_HighHD[1] = sum(v6B()$HighHDtotal[c(1:3,6:13,17:55,61,64:98,104:112)],v6B()$HighHDtotal[124:135]/2)
         CabPCoverview$Cab2_MaxHD[1] = sum(v6B()$MaxHDtotal[c(1:3,6:13,17:55,61,64:98,104:112)],v6B()$MaxHDtotal[124:135]/2)
         return (CabPCoverview) 
       }
       else if(((vSCD() == "B1-B3" & DS6456[which(DS6456$TelefonicaConfiguration == input$Config),1] %in% cabsx2_B1B3_YL)
                | (vSCD() == "B2-B3" & DS6456[which(DS6456$TelefonicaConfiguration == input$Config),1] %in% cabsx2_B2B3_YL)) & substr(v6A2(), 46,47) == "oy")    # RBS 6102 + York
       {
         #CabPCoverview$Cab1_IdlePC[1] = sum(v6B()$IdlePCtotal[c(4,5,14:16,56:60,99:112)],v6B()$IdlePCtotal[124:135]/2)     # old indices used, CW has updated and all units powered from RBS 6102, I have left here as a note in case that needs to change
         CabPCoverview$Cab1_IdlePC[1] = sum(v6B()$IdlePCtotal[c(1:112)],v6B()$IdlePCtotal[124:135]/2)
         CabPCoverview$Cab1_TypPC[1] = sum(v6B()$TypPCtotal[c(1:112)],v6B()$TypPCtotal[124:135]/2)
         CabPCoverview$Cab1_HighPC[1] = sum(v6B()$HighPCtotal[c(1:112)],v6B()$HighPCtotal[124:135]/2)
         CabPCoverview$Cab1_MaxPC[1] = sum(v6B()$MaxPCtotal[c(1:112)],v6B()$MaxPCtotal[124:135]/2)
         CabPCoverview$Cab1_IdleOP[1] = sum(v6B()$IdleOPtotal[c(1:112)],v6B()$IdleOPtotal[124:135]/2)
         CabPCoverview$Cab1_TypOP[1] = sum(v6B()$TypOPtotal[c(1:112)],v6B()$TypOPtotal[124:135]/2)
         CabPCoverview$Cab1_HighOP[1] = sum(v6B()$HighOPtotal[c(1:112)],v6B()$HighOPtotal[124:135]/2)
         CabPCoverview$Cab1_MaxOP[1] = sum(v6B()$MaxOPtotal[c(1:112)],v6B()$MaxOPtotal[124:135]/2)
         CabPCoverview$Cab1_IdleHD[1] = sum(v6B()$IdleHDtotal[c(1:112)],v6B()$IdleHDtotal[124:135]/2)
         CabPCoverview$Cab1_TypHD[1] = sum(v6B()$TypHDtotal[c(1:112)],v6B()$TypHDtotal[124:135]/2)
         CabPCoverview$Cab1_HighHD[1] = sum(v6B()$HighHDtotal[c(1:112)],v6B()$HighHDtotal[124:135]/2)
         CabPCoverview$Cab1_MaxHD[1] = sum(v6B()$MaxHDtotal[c(1:112)],v6B()$MaxHDtotal[124:135]/2)
         
         #CabPCoverview$Cab2_IdlePC[1] = sum(v6B()$IdlePCtotal[c(1:3,6:13,17:55,61:98)],v6B()$IdlePCtotal[124:135]/2)       # old indices used, CW has updated and all units powered from RBS 6102, I have left here as a note in case that needs to change
         CabPCoverview$Cab2_IdlePC[1] = sum(v6B()$IdlePCtotal[124:135])/2
         CabPCoverview$Cab2_TypPC[1] = sum(v6B()$TypPCtotal[124:135])/2
         CabPCoverview$Cab2_HighPC[1] = sum(v6B()$HighPCtotal[124:135])/2
         CabPCoverview$Cab2_MaxPC[1] = sum(v6B()$MaxPCtotal[124:135])/2
         CabPCoverview$Cab2_IdleOP[1] = sum(v6B()$IdleOPtotal[124:135])/2
         CabPCoverview$Cab2_TypOP[1] = sum(v6B()$TypOPtotal[124:135])/2
         CabPCoverview$Cab2_HighOP[1] = sum(v6B()$HighOPtotal[124:135])/2
         CabPCoverview$Cab2_MaxOP[1] = sum(v6B()$MaxOPtotal[124:135])/2
         CabPCoverview$Cab2_IdleHD[1] = sum(v6B()$IdleHDtotal[124:135])/2
         CabPCoverview$Cab2_TypHD[1] = sum(v6B()$TypHDtotal[124:135])/2
         CabPCoverview$Cab2_HighHD[1] = sum(v6B()$HighHDtotal[124:135])/2
         CabPCoverview$Cab2_MaxHD[1] = sum(v6B()$MaxHDtotal[124:135])/2
         return (CabPCoverview)
         #return ("Check your Cabinet splits") 
       }
       
    })
    observe({print(v22())})    
    
# variables to help with naming data tables for cabinet power consumption #
    v22Cab1 <- reactive({
      if(substr(v6A2(), 46,47) == "id")
    {
      return ("Cabinet 1 (RBS 6201) Power Consumption data")
      }
      else if(vSCD() != "New Build" & (substr(v6A2(), 46,47) == "oa" | substr(v6A2(), 46,47) == "of" | substr(v6A2(), 46,47) == "oy" | substr(v6A2(), 46,47) == "ys"))
      {
        return ("Cabinet 1 (RBS 6102) Power Consumption data") 
      }
      else if(substr(v6A2(), 46,47) == "ys" & vSCD() == "New Build")
      {
        return ("Cabinet 1 (York) Power Consumption data") 
      }
      else if(substr(v6A2(), 46,47) == "oe" | substr(v6A2(), 46,47) == "ie")
      {
        return ("Cabinet 1 (Eltek) Power Consumption data") 
      }
    })
    
    v22Cab2 <- reactive({
      if(substr(v6A2(), 46,47) == "id" & ((DS6456[which(DS6456$TelefonicaConfiguration == input$Config),1] %in% cabsx2_B1B3) | (DS6456[which(DS6456$TelefonicaConfiguration == input$Config),1] %in% cabsx2_B2B3)))
      {
        return ("Cabinet 2 (RBS 6201) Power Consumption data")
      }
      else if(substr(v6A2(), 46,47) == "oa"& ((DS6456[which(DS6456$TelefonicaConfiguration == input$Config),1] %in% cabsx2_B1B3) | (DS6456[which(DS6456$TelefonicaConfiguration == input$Config),1] %in% cabsx2_B2B3)))
      {
        return ("Cabinet 2 (RBS 6102) Power Consumption data") 
      }
      else if(substr(v6A2(), 46,47) == "of" & ((DS6456[which(DS6456$TelefonicaConfiguration == input$Config),1] %in% cabsx2_B1B3_YL) | (DS6456[which(DS6456$TelefonicaConfiguration == input$Config),1] %in% cabsx2_B2B3_YL)))
      {
        return ("Cabinet 2 (Lancaster) Power Consumption data") 
      }
      else if(substr(v6A2(), 46,47) == "oy" & ((DS6456[which(DS6456$TelefonicaConfiguration == input$Config),1] %in% cabsx2_B1B3_YL) | (DS6456[which(DS6456$TelefonicaConfiguration == input$Config),1] %in% cabsx2_B2B3_YL)))
      {
        return ("Cabinet 2 (York) Power Consumption data") 
      }
      else if(substr(v6A2(), 46,47) == "ys" & ((DS6456[which(DS6456$TelefonicaConfiguration == input$Config),1] %in% cabsx2_B1B3_YL) | (DS6456[which(DS6456$TelefonicaConfiguration == input$Config),1] %in% cabsx2_B2B3_YL)))
      {
        return ("Cabinet 2 (York) Power Consumption data") 
      }
    })
    
    
# rendering cabinet by cabinet power consumption data #
    # Power Tables continued for rmarkdown #
    v22a <- reactive({
      return (v22()[,4:15])
    })
    
    v22b <- reactive({
      return (v22()[,16:27])
    })
    
    
    
    output$Cab1PC <- DT::renderDataTable(
      datatable(v22(), rownames = F, options = list(columnDefs = list(list(targets = c(0,1,2,3,16,17,18,19,20,21,22,23,24,25,26,27), visible = FALSE), list(list(className = 'dt-center', targets = "_all"))),
                                                    scrollX = TRUE, pagelength = 5, lengthMenu = c(5,10), stringsAsFactors = FALSE), class = 'cell-border stripe',
                caption = htmltools::tags$caption(htmltools::tags$span(v22Cab1(), style="color:black; font-weight: bold;")))
      %>% formatStyle(c('Cab1_TypPC', 'Cab1_MaxPC'),  color = 'white', backgroundColor = 'red', fontWeight = 'bold')
    )
    
    output$Cab2PC <- DT::renderDataTable(
      datatable(v22(), rownames = F, options = list(columnDefs = list(list(targets = c(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), visible = FALSE), list(list(className = 'dt-center', targets = "_all"))),
                                                    scrollX = TRUE, pagelength = 5, lengthMenu = c(5,10), stringsAsFactors = FALSE), class = 'cell-border stripe',
                caption = htmltools::tags$caption(htmltools::tags$span(v22Cab2(), style="color:black; font-weight: bold;")))
      %>% formatStyle(c('Cab2_TypPC', 'Cab2_MaxPC'),  color = 'white', backgroundColor = 'red', fontWeight = 'bold')
    )
    
    
  
##############################################################################################################################################################  
## Creating the BOM List ##
  
  bomlist_subset <- reactive({
    a <- subset(bomlist, OrderingCode == v7() | OrderingCode == v8() | OrderingCode == v9() | OrderingCode == v10() | OrderingCode == v11()
                | OrderingCode == v12() | OrderingCode == v13() | OrderingCode == v14() | OrderingCode == v15() | OrderingCode == v16() 
                | OrderingCode == v17() | OrderingCode == v18() | OrderingCode == v19() | OrderingCode == v20())
    return(a)
  })

  output$bom <- DT::renderDataTable(
      bomlist_subset(), options = list(columnDefs = list(list(className = 'dt-center', targets = 6)),
                           scrollX = TRUE, scrollY = "750px", pagelength = 20, lengthMenu = c(20,25,30,100), order = list(list(2, 'asc'))) #order/sort by column 2 which is OrderingCode
  )


##############################################################################################################################################################  
## Variables to check already existing technologies for supression of ordering codes for Tech Add only ##
  
  # # variable to help look for digit signifying L23 and L26 presence #
  # vDig <- c(0,"i","o","s","y","z")
  # 
  # # variable to determine L23 already installed or not #
  # vL23UG <- reactive({
  #   ifelse(!(substr(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),6],13,13) %in% vDig) || substr(input$T23,1,1)=="Y","Y","N")
  # })
  # observe({print(vL23UG())})
  # 
  # # variable to determine L26 already installed or not #
  # vL26UG <- reactive({
  #   ifelse((nchar(toString(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),6])) != 16 & substr(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),6],16,16) != "0") ||
  #            substr(input$L26,1,1)=="Y" ,"Y","N")
  # })
  # observe({print(vL26UG())})
  # 
  # # variable to determine L21 4415 or not #
  # v4415 <- reactive({
  #   ifelse(substr(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),6],12,12)=="v" || substr(input$L21_4415,1,1)=="Y","Y","N")
  # })
  # observe({print(v4415())})
  # 
  # v4415_2 <- reactive({
  #   ifelse(substr(DS6456[which(DS6456$TelefonicaConfiguration == input$Config),6],12,12)=="v" || substr(input$L21_4415,1,1)=="Y","V","A")
  # })
  # observe({print(v4415_2())})
  # 
 
   
##############################################################################################################################################################
## Generating Reports ##
  
  output$report <- downloadHandler(
    # For HTML output, change this to "report.html"
    filename = function(){
      paste0(input$SiteID,"_","SID_Beacon 3","_",input$BuildType,"_",VC[1,1],".pdf")
    },
    content = function(file) {
      # Copy the report file to a temporary directory before processing it, in
      # case we don't have write permissions to the current working dir (which
      # can happen when deployed).
      wd <- getwd()
      tempReport <- file.path(wd, "report.Rmd")
      #file.copy("report.Rmd", tempReport, overwrite = TRUE)                          # leave commented, dangerous, will wipe report.RMD
      hldpath <- paste0(wd, "/www/", v1())
      cab1path <- paste0(wd, "/www/", v1A())
      cab2path <- paste0(wd, "/www/", v1B())
      #cab3path <- paste0(wd, "/www/", v1C())
      
      cd1path <- paste0(wd, "/www/", v1D())
      cd2path <- paste0(wd, "/www/", v1E())
      cd3path <- paste0(wd, "/www/", v1Ea())
      cd4path <- paste0(wd, "/www/", v1Eb())
      cd5path <- paste0(wd, "/www/", v1Ec())
      
      cpri1path <- paste0(wd, "/www/", v1F())
      cpri2path <- paste0(wd, "/www/", v1G())
      cpri3path <- paste0(wd, "/www/", v1Ga())
      cpri4path <- paste0(wd, "/www/", v1Gb())
      
      radiokeep <- v6C()[,-(vX()+1), drop=FALSE]
      radiokeep <- t(radiokeep)
      radiokeep <- as.data.frame(radiokeep)
      colnames(radiokeep) <- c("Quantity")
      setDT(radiokeep, keep.rownames = "Radio Unit")
      observe({print(dim(radiokeep))})
      observe({print(class(radiokeep))})
      observe({print(sapply(radiokeep, class))})
      observe({print(sapply(radiokeep, class))})
      observe({print("RADIOKEEP:")})
      observe({print(radiokeep)})
      
      dubbkeep <- v6D()[,-(vY()+1), drop=FALSE]
      dubbkeep <- t(dubbkeep)
      dubbkeep <- as.data.frame(dubbkeep)
      colnames(dubbkeep) <- c("Quantity")
      setDT(dubbkeep, keep.rownames = "Digital Unit/Baseband")
      observe({print("DUBBKEEP:")})
      observe({print(dubbkeep)})
      
      cabskeep <- v6E()[,-(vZ()+1), drop=FALSE]   #When you access a single column of a data frame it is converted to a vector, drop=FALSE prevents that and retains the column name.
      cabskeep <- t(cabskeep)
      cabskeep <- as.data.frame(cabskeep)
      colnames(cabskeep) <- c("Quantity")
      setDT(cabskeep, keep.rownames = "Cabinet/Enclosure")
      observe({print("CABSKEEP:")})
      observe({print(cabskeep)})
      
      
      # Set up parameters to pass to Rmd document
      params <- list(vc = VC[1,1], siteid = input$SiteID, sname = input$SiteName, asp = input$ASP, saddr = input$SiteAddr, postcode = input$PostCode,
                     sacc = input$Access, img = re1(), hw=v6B()[,c(1,5,6,10)], config = input$Config, SFpole = input$SFtype, build = input$BuildType, 
                     l26 = input$L26, l23 = input$T23, l184x4 = input$L18_4x4, l8swap = input$L8_swap, L21_4415 = input$L21_4415,
                     TEF_5G_T34_8x8 = input$TEF_5G_T34_8x8, TEF_5G_T34_64M = input$TEF_5G_T34_64M, MORAN_5G_T34_8x8 = input$MORAN_5G_T34_8x8, MORAN_5G_T34_64M = input$MORAN_5G_T34_64M,
                     ESS_5G_N21_4x4 = input$ESS_5G_N21_4x4, T23BB_ESS_5G_N21_4x4 = input$T23BB_ESS_5G_N21_4x4, N7_2x2_MMBB = input$N7_2x2_MMBB, N7_2x2_MMBB_T23BB = input$N7_2x2_MMBB_T23BB,
                     hld = hldpath, cab1 = cab1path, cab2 = cab2path,
                     cd1 = cd1path, cd2 = cd2path, cd3 = cd3path, cd4 = cd4path, cd5 = cd5path, 
                     cpri1 = cpri1path, cpri2 = cpri2path, cpri3 = cpri3path, cpri4 = cpri4path, 
                     gsmq = v2(), umtsq = v3(), lteq = v5A(), ngq = v6A1(),
                     baseoc = v7(), l8swapoc = v8(), l184x4oc = v9(), l214415oc = v10(), l23oc = v11(), l26oc = v12(), NRT348x8oc = v13(), NRT3464Moc = v14(),  NRMor348x8oc = v15(), NRMor3464Moc = v16(),
                     NR214x4oc = v17(), NR21T23BB4x4oc = v18(), NR72x2oc = v19(), NR7T23BB2x2oc = v20(),
                     radio = radiokeep, dubb = dubbkeep, cabs = cabskeep, pca = v21a(), pcb = v21b(), pcc = v21c(), pcd = v21d(), pce = v22a(), pcf = v22b(), cab1label = v22Cab1(), cab2label = v22Cab2(),
                     bom = bomlist_subset()[,-c(4,6,7,8,9)],
                     ce1 = vF1()[,3:11], ce2 = vF1()[,13:21], ce3 = vF1()[,23:31], dtm = vM1())
      
      # Knit the document, passing in the `params` list, and eval it in a
      # child of the global environment (this isolates the code in the document
      # from the code in this app).
      rmarkdown::render(tempReport, output_file = file,
                        params = params,
                        envir = new.env(parent = globalenv())
      )
    }
  )

# params:
#   vc: NA
#   siteid: NA
#   sname: NA
#   saddr: NA
#   postcode: NA
#   sacc: NA
#   asp: NA
#   img: NA
#   hw: NA
#   config: NA
#   SFpole: NA
#   build: NA
  
#   l26: NA
#   l23: NA
#   l184x4: NA
#   l8swap: NA
#   L21_4415: NA
#   TEF_5G_T34_8x8: NA
#   TEF_5G_T34_64M: NA
#   MORAN_5G_T34_8x8: NA
#   MORAN_5G_T34_64M: NA  
#   ESS_5G_N21_4x4: NA
#   T23BB_ESS_5G_N21_4x4: NA
#   N7_2x2_MMBB: NA
#   N7_2x2_MMBB_T23BB: NA  
  
#   gsmq: NA
#   umtsq: NA
#   lteq: NA
#   ngq: NA
  
#   baseoc: NA
#   l26oc: NA
#   l23oc: NA
#   l184x4oc: NA
#   l8swapoc: NA
#   l214415oc: NA
#   NRT348x8oc: NA
#   NRT3464Moc: NA
#   NRMor348x8oc: NA
#   NRMor3464Moc: NA
#   NR214x4oc: NA
#   NR21T23BB4x4oc: NA
#   NR72x2oc: NA
#   NR7T23BB2x2oc: NA 
  
#   cabs: NA
#   dubb: NA
#   radio: NA
#   pca: NA
#   pcb: NA  
#   pcc: NA
#   pcd: NA
#   pce: NA
#   pcf: NA
#   cab1label: NA
#   cab2label: NA
#   bom: NA
#   hld: NA
#   cab1: NA
#   cab2: NA

#   cd1: NA
#   cd2: NA
#   cd3: NA
#   cd4: NA
#   cd5: NA

#   cpri1: NA
#   cpri2: NA
#   cpri3: NA
#   cpri4: NA
  
#   ce1: NA
#   ce2: NA
#   ce3: NA
#   dtm: NA
#   spealloc: NA
#   pi: NA
    
  }

shinyApp(ui, server)
